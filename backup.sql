-- MySQL dump 10.13  Distrib 8.0.36, for Linux (aarch64)
--
-- Host: localhost    Database: flask_website
-- ------------------------------------------------------
-- Server version	8.0.36-0ubuntu0.22.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `alembic_version`
--

DROP TABLE IF EXISTS `alembic_version`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `alembic_version` (
  `version_num` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  PRIMARY KEY (`version_num`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `alembic_version`
--

LOCK TABLES `alembic_version` WRITE;
/*!40000 ALTER TABLE `alembic_version` DISABLE KEYS */;
INSERT INTO `alembic_version` VALUES ('6d605126b6fa');
/*!40000 ALTER TABLE `alembic_version` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comment`
--

DROP TABLE IF EXISTS `comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `comment` (
  `id` int NOT NULL AUTO_INCREMENT,
  `timestamp` datetime NOT NULL,
  `content` text CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `post_id` int NOT NULL,
  `author` varchar(100) COLLATE utf8mb3_bin NOT NULL,
  `left` int NOT NULL,
  `right` int NOT NULL,
  `depth` int NOT NULL,
  PRIMARY KEY (`id`),
  KEY `ix_comment_timestamp` (`timestamp`),
  KEY `post_id` (`post_id`),
  KEY `ix_comment_left` (`left`),
  KEY `ix_comment_right` (`right`),
  CONSTRAINT `comment_ibfk_1` FOREIGN KEY (`post_id`) REFERENCES `post` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=313 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comment`
--

LOCK TABLES `comment` WRITE;
/*!40000 ALTER TABLE `comment` DISABLE KEYS */;
INSERT INTO `comment` VALUES (298,'2024-05-12 09:28:41','tes',148,'test',1,2,0),(299,'2024-05-12 09:28:43','tes',148,'test',3,4,0),(300,'2024-05-12 09:29:15','a',148,'s',5,6,0),(301,'2024-05-12 09:29:16','a',148,'s',7,8,0),(302,'2024-05-12 09:29:18','a',148,'s',9,10,0),(303,'2024-05-12 09:29:20','a',148,'s',11,12,0),(304,'2024-05-12 09:29:22','d',148,'a',13,14,0),(305,'2024-05-12 09:29:43','a',148,'s',15,16,0),(306,'2024-05-12 09:30:11','a',148,'s',17,18,0),(311,'2024-05-13 00:40:26','lol',148,'original Poster',19,22,0),(312,'2024-05-13 06:47:14','lol',148,'original poster',20,21,1);
/*!40000 ALTER TABLE `comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `post`
--

DROP TABLE IF EXISTS `post`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `post` (
  `id` int NOT NULL AUTO_INCREMENT,
  `timestamp` datetime NOT NULL,
  `title` varchar(150) COLLATE utf8mb3_bin NOT NULL,
  `sanitized_title` varchar(150) COLLATE utf8mb3_bin NOT NULL,
  `subtitle` varchar(150) COLLATE utf8mb3_bin DEFAULT NULL,
  `content` mediumtext COLLATE utf8mb3_bin NOT NULL,
  `edited_timestamp` datetime DEFAULT NULL,
  `blog_id` varchar(5) COLLATE utf8mb3_bin NOT NULL,
  `published` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `sanitized_title` (`sanitized_title`),
  UNIQUE KEY `title` (`title`),
  KEY `ix_post_timestamp` (`timestamp`),
  KEY `ix_post_blog_id` (`blog_id`)
) ENGINE=InnoDB AUTO_INCREMENT=151 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `post`
--

LOCK TABLES `post` WRITE;
/*!40000 ALTER TABLE `post` DISABLE KEYS */;
INSERT INTO `post` VALUES (77,'2024-05-09 07:14:30','Why does the Chinese remainder theorem work?','why-does-the-chinese-remainder-theorem-work','APPLYING MATH FROM 1500 YEARS AGO AND DISCOVERING THE INTUITION BEHIND THE FORMULA','Fifteen hundred years ago, a man named Sun Tzu helped you wait about 234 milliseconds less for this webpage to load[^calculation source].\r\n\r\n# Sun Tzu\'s puzzle\r\n\r\nYou might\'ve seen Sun Tzu\'s name attached to quotes such as\r\n\r\n> Appear weak when you are strong, and strong when you are weak.\r\n\r\nor\r\n\r\n> The supreme art of war is to subdue the enemy without fighting.\r\n\r\nor maybe even\r\n\r\n> Whatever you do, don\'t reveal all your techniques in a YouTube video, you fool, you moron.\r\n\r\nThis is the same trap I fell into initially—it\'s not the Sun Tzu you\'re probably thinking of[^sun tzu clarification]. This Sun Tzu was a mathematician, not a war strategist, who in the fifth century CE asked:\r\n\r\n> There are certain things whose number is unknown. If we count them by threes, we have two left over; by fives, we have three left over; and by sevens, two are left over. How many things are there?\r\n\r\nThis puzzle eventually spawned the Chinese remainder theorem, which among many other things is now a widely-adopted optimization for multiple algorithms like RSA decryption (one of the most popular ciphers that help you secure your Internet traffic and more[^NordVPN]) and the Fast Fourier Transform (magic that turns weird squiggles into nicer-looking squiggles, which is useful in pretty much every part of science[^doctor\'s handwriting])[^applications source]. Assuming you know the basics of modular arithmetic, the Chinese remainder theorem states:\r\n\r\n\\thm\r\n\r\nIf \\\\(m_1, m_2, \\dots, m_p\\\\) are pairwise coprime integers, then the system\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\nx &\\equiv a_1 \\mod m_1 \\\\\\\\\r\nx &\\equiv a_2 \\mod m_2 \\\\\\\\\r\n&\\vdots \\\\\\\\\r\nx &\\equiv a_p \\mod m_p\r\n\\end{alignat*}\r\n\\\\]\r\nhas a unique solution, \\\\(x \\equiv A \\mod M\\\\), where \\\\(M = m_1 m_2 \\dots m_p\\\\).\r\n\r\n\\endthm\r\n\r\n# A formula to solve the puzzle\r\n\r\nIn this puzzle posed by Sun Tzu (The Second), our moduli 3, 5, and 7 are coprime, so there is indeed a solution to this system of congruences:\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\nx &\\equiv 2 \\mod 3 \\\\\\\\\r\nx &\\equiv 3 \\mod 5 \\\\\\\\\r\nx &\\equiv 2 \\mod 7.\r\n\\end{alignat*}\r\n\\\\]\r\n\r\nBut wait! The Chinese remainder theorem never specified *how* to solve our problem, only that a solution exists. The classic joke\r\n\r\n> A physicist, a mathematician and an engineer stay in a hotel.\r\n\r\n> The engineer is awakened by a smell and gets up to check it. He finds a fire in the hallway, sees a nearby fire extinguisher and after extinguishing it, goes back to bed.\r\n\r\n> Later that night, the physicist gets up, again because of the smell of fire. He quickly gets up and sees the fire in the hallway. After calculating air pressure, flame temperature and humidity as well as distance to the fire and projected trajectory, he extinguishes the fire with the least amount of fluid.\r\n\r\n> Finally, the mathematician awakes, only again to find a fire in the hallway. He instantly sees the extinguisher and thinks, \"A solution exists!\", and heads back into his room.[^solution exists joke source]\r\n\r\nhas never been more real. Luckily, it turns out there is actually a formula for finding the solution. I will solve the puzzle using this formula first, and then explain the important part: the intuition behind why it works.\r\n\r\n\\thm\r\n\r\nA system of congruences which has been guaranteed a solution by the Chinese remainder theorem is solved by\r\n\\\\[\r\nx \\equiv \\sum_{i = 1}^{p}{a_i M_i s_i} \\mod M,\r\n\\\\]\r\nwhere \\\\(a_i\\\\) are the remainders in the system of congruences, \\\\(M_i = M / m_i\\\\), and \\\\(s_i\\\\) is the multiplicative inverse of \\\\(M_i \\mod m_i\\\\).\r\n\r\n\\endthm\r\n\r\nMultiplicative inverse? What?\r\n\r\n## A quick detour to multiplicative inverses\r\n\r\nWithout getting too thick into the weeds, a **multiplicative inverse** is basically a fancy abstract algebra way of saying \"reciprocal\". Remember fractions? \\\\(\\frac{1}{2}\\\\) is the reciprocal or multiplicative inverse of \\\\(2\\\\), *because multiplying \\\\(\\mathit{\\frac{1}{2}}\\\\) and \\\\(\\mathit{2}\\\\)[^funky 2] gives you \\\\(\\mathit{1}\\\\)*. \\\\(\\frac{1}{4}\\\\) is the multiplicative inverse of \\\\(4\\\\), because \\\\(\\frac{1}{4} \\cdot 4 = 1\\\\)[^why 1?]. Formally[^fourth grade math], if \\\\(s\\\\) is the reciprocal or multiplicative inverse of \\\\(x\\\\), then\r\n\r\n\\\\[\r\nxs \\equiv 1.\r\n\\\\]\r\n\r\nIn the context of modular arithmetic, multiplicative inverses aren\'t fractions anymore (since modular arithmetic is really only defined for integers), but the formula works the exact same:\r\n\r\n\\thm\r\n\r\nIf \\\\(s\\\\) is the multiplicative inverse of \\\\(x\\\\) mod \\\\(m\\\\), then\r\n\r\n\\\\[\r\nxs \\equiv 1 \\mod m.\r\n\\\\]\r\n\r\n\\endthm\r\n\r\nFor example, \\\\(3\\\\) is the multiplicative inverse to \\\\(2 \\mod 5\\\\), since \\\\(2 \\cdot 3 \\equiv 1 \\mod 5\\\\). We will see why this is so useful when we get to the intuition part.\r\n\r\n## Back to the solution\r\n\r\nSo again, let\'s apply this formula and then explain the intuition afterwards.\r\n\r\n\\\\(M\\\\), the product of our moduli, is \\\\(3 \\cdot 5 \\cdot 7 = 105\\\\). We can then find our \\\\(M_i\\\\): \r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\n&M_1 = 105 / 3 = 35 \\\\\\\\\r\n&M_2 = 105 / 5 = 21 \\\\\\\\\r\n&M_3 = 105 / 7 = 15.\r\n\\end{alignat*}\r\n\\\\]\r\n\r\nNow, our multiplicative inverses \\\\(s_i\\\\) are the only parts of the formula we have yet to find. Remembering our definition from earlier, and the fact that \\\\(s_i\\\\) is the multiplicative inverse of \\\\(M_i \\mod m_i\\\\), we have\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{2}\r\n&&M_1 s_1 &\\equiv 1 \\mod m_1 \\\\\\\\\r\n&\\implies &35s_1 &\\equiv 1 \\mod 3 \\\\\\\\\r\n&\\implies &2s_1 &\\equiv 1 \\mod 3 \\\\\\\\\r\n&\\implies &s_1 &= 2.\r\n\\end{alignat*}\r\n\\\\]\r\n\r\nSimilarly,\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{2}\r\n&&21s_2 &\\equiv 1 \\mod 5 \\\\\\\\\r\n&\\implies &1s_2 &\\equiv 1 \\mod 5 \\\\\\\\\r\n&\\implies &s_2 &= 1 \\\\\\\\\r\n&&15s_3 &\\equiv 1 \\mod 7 \\\\\\\\\r\n&\\implies &1s_3 &\\equiv 1 \\mod 7 \\\\\\\\\r\n&\\implies &s_3 &= 1.\r\n\\end{alignat*}\r\n\\\\]\r\n\r\nSo now that we have all the pieces of the formula, our final solution is\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\nx &\\equiv \\ 2 \\cdot 35 \\cdot 2 + 3 \\cdot 21 \\cdot 1 + 2 \\cdot 15 \\cdot 1 \\\\\\\\\r\n&\\equiv \\ 233 \\equiv \\ 23 \\mod 105.\r\n\\end{alignat*}\r\n\\\\]\r\n\r\nCheck for yourself: 23 does indeed solve the puzzle!\r\n\r\n# The intuition behind the formula\r\n\r\n## Why pairwise coprime?\r\n\r\nLet\'s first explore why the condition that all the moduli have to be pairwise coprime is so important. Recall that the multiplicative inverse of \\\\(x \\mod m\\\\), \\\\(s\\\\), satisfies\r\n\r\n\\\\[\r\nxs \\equiv 1 \\mod m.\r\n\\\\]\r\n\r\nBut what happens if \\\\(x\\\\) and \\\\(m\\\\) share a common factor, i.e. are *not* coprime? For example, \\\\(x = 2\\\\) and \\\\(m = 4\\\\). How would you find \\\\(s\\\\) such that\r\n\r\n\\\\[\r\n2s \\equiv 1 \\mod 4?\r\n\\\\]\r\n\r\nYou can\'t, no matter how much time you waste guessing and checking. This is why it\'s so important to have all the moduli coprime to each other: having divided out \\\\(m_1\\\\), \\\\(M_1\\\\) only has factors from \\\\(m_2\\\\) and \\\\(m_3\\\\). *Both of these are coprime to \\\\(\\mathit{m_1}\\\\)*, so intuitively \\\\(M_1\\\\), made up of only these two numbers, must also be coprime to \\\\(m_1\\\\)[^coprime intuition example]. The big implication of all this is that\r\n\r\n\\\\[\r\nM_i s_i \\equiv 1 \\mod m_i\r\n\\\\]\r\n\r\ndoesn\'t end up in one of those unsolvable situations, *thus \\\\(\\mathit{s_i}\\\\) is guaranteed to exist* and there is a solution.\r\n\r\n## Where do the terms in the formula come from?\r\n\r\nWith that out of the way, let\'s look at the first of the three identical terms that make up our final solution:\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\na_1 M_1 s_1 &= 2 \\cdot 35 \\cdot 2.\r\n\\end{alignat*}\r\n\\\\]\r\n\r\nLet\'s check out \\\\(M_1 s_1\\\\) first. If we recall the definition of multiplicative inverses (again), \\\\(M_1 s_1 \\equiv 1 \\mod m_i\\\\). Then, \\\\(a_1 = 2\\\\) multiplies this remainder to the 2 that we see in the first line of the puzzle, so that our first term \\\\(a_1 M_1 s_1 \\equiv 2 \\mod 3\\\\) satisfies our first congruence.\r\n\r\nSimilarly, \\\\(M_2 s_2 \\equiv 1 \\mod m_2\\\\), and \\\\(a_2 = 3\\\\) multiplies this remainder so \\\\(a_2 M_2 s_2 \\equiv 3 \\mod 5\\\\), satisfying our second congruence. See why the multiplicative inverse creating 1s is so useful now? This multiplication wouldn\'t be nearly as straightforward with any other number besides 1.\r\n\r\nAnd similarly, \\\\(M_3 s_3 \\equiv 1 \\mod m_3\\\\), and \\\\(a_3 = 2\\\\) multiplies this remainder so \\\\(a_3 M_3 s_3 \\equiv 2 \\mod 7\\\\), satisfying our third congruence.\r\n\r\nNow we have three terms, each satisfying one of the congruences in the system. There is one last step—adding these three terms into one that satisfies *all* the congruences. And this won\'t mess up each other\'s remainders, because \\\\(M_i\\\\) is made up of and divisible by the other two moduli. This means that, for example, \\\\(a_1 M_1 s_1 \\equiv 0 \\mod m_2\\\\) and \\\\(a_1 M_1 s_1 \\equiv 0 \\mod m_3\\\\), so adding this first term adds 0 to the remainders for the second and third congruences. Let\'s see this in action:\r\n\r\n\\\\[\r\n\\begin{array}{ccccc}\r\n&a_1 M_1 s_1 &+ &a_2 M_2 s_2 &+ &a_3 M_3 s_3& \\\\\\\\[3pt]\r\n= &2 &+ &0 &+ &0 &&\\mod 3 \\p{.} \\\\\\\\[3pt]\r\n= &0 &+ &3 &+ &0 &&\\mod 5 \\p{.} \\\\\\\\[3pt]\r\n= &0 &+ &0 &+ &2 &&\\mod 7.\r\n\\end{array}\r\n\\\\]\r\n\r\nSee how we keep our perfect remainder setup because we\'re able to just add 0s? With all that, we\'ve finally crafted the perfect number, the solution to our puzzle[^induction on more terms].\r\n\r\n# A bit on RSA\r\n\r\nDecrypting RSA ciphertext relies on calculating some \\\\(m\\\\) for\r\n\r\n\\\\[\r\nm \\equiv c^d \\mod pq,\r\n\\\\]\r\n\r\nwhere \\\\(c\\\\) is a numerical representation of the ciphertext and \\\\(m\\\\) is the plaintext version the receiver wants to get. \\\\(d\\\\) and \\\\(pq\\\\) are really big numbers, however, and can make this calculation very slow. The Chinese remainder theorem, in reverse of what we just did, allows us to \"unsolve\" this equation into the system\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\nm &\\equiv a_1 \\mod p \\\\\\\\\r\nm &\\equiv a_2 \\mod q,\r\n\\end{alignat*}\r\n\\\\]\r\n\r\nwhere \\\\(a_1\\\\) and \\\\(a_2\\\\) can be calculated relatively quickly using some other number theory stuff[^rsa decryption calc] and will be much smaller than \\\\(c^d\\\\).\r\n\r\nLook familiar? Instead of taking forever to calculate \\\\(c^d \\mod pq\\\\), we can just solve this new puzzle for \\\\(m\\\\) with smaller and faster numbers across the board. This makes decryption about 3–4 times as fast as before[^speedup sources], and this optimization is used almost ubiquitously in modern RSA implementations.\r\n\r\nAlthough admittedly, \"modern RSA implementations\" might start to sound like a contradiction soon…\r\n\r\n---\r\n\r\n*By the way, I give this blog post credit for carrying my midterm…when you spend hours writing about a formula, you won\'t exactly have to memorize it.*\r\n\r\n[^calculation source]: Calculated from [here](https://www.cscjournals.org/manuscript/Journals/IJCSS/Volume10/Issue5/IJCSS-1289.pdf), with the many naive assumptions that we used a 2048-bit key instead of 4096, that doing so halved the time, and that loading this page started a new TCP connection which invoked a TLS handshake on a version prior to 1.3.\r\n[^sun tzu clarification]: Admittedly, this Sun Tzu is often romanized as \"Sunzi\".\r\n[^NordVPN]: This blog post was not sponsored by NordVPN.\r\n[^doctor\'s handwriting]: (especially for decoding those doctors\' handwriting)\r\n[^applications source]: \\*sigh\\* From [Wikipedia](https://en.wikipedia.org/wiki/Chinese_remainder_theorem#Applications).\r\n[^solution exists joke source]: From [Proof Wiki](https://proofwiki.org/wiki/ProofWiki:Jokes/Physicist_Mathematician_and_Engineer_Jokes/Burning_Hotel). Also, the Proof Wiki keeping an organized catalog of jokes is just about the most mathematician thing ever.\r\n[^funky 2]: I\'m sorry if this \'\\\\(\\mathit{2}\\\\)\' hurts your eyes, `\\mathit` just hates eyeballs.\r\n[^why 1?]: It must equal 1 because 1 is the multiplicative identity, aka the number that you multiply by to not change anything, and the mathematicians decided that having the inverse make the identity was very useful.\r\n[^fourth grade math]: Yes, I know this is fourth grade math.\r\n[^coprime intuition example]: Example: \\\\(M_1 = 35\\\\) came from dividing \\\\(M\\\\) by \\\\(m_1 = 3\\\\). Thus, the only divisors remaining in \\\\(M_1\\\\) are from the other two factors of \\\\(M\\\\),  5 and 7, both of which are coprime to 3 by the CRT\'s condition. Thus, made up of only these two numbers, \\\\(M_1\\\\) must also be coprime to \\\\(m_1 = 3\\\\).\r\n[^induction on more terms]: This holds for any number of congruences/terms greater than or equal to 2, since the CRT is all about combining multiple congruences into one. If we had 8 congruences, for example, we could solve the mini-system that is the first 2, then the next two, and so on until we end up with 4. Then, rinse and repeat until we get 1 again. In addition, pairwise coprime will hold all the way through as long as it holds for the initial 8 congruences.\r\n[^rsa decryption calc]: If you know more number theory: start with \\\\(m \\equiv c^d \\mod p\\\\). Then, just like dividing \\\\(x\\\\) by \\\\(y\\\\) to get \\\\(x = ky + \\t{remainder}\\\\) for integer \\\\(k\\\\), we do \\\\(d = k \\phi(p) + (d \\mod \\phi(p))\\\\), where \\\\(\\phi\\\\) is Euler\'s totient, to get \\\\(c^d \\equiv c^{k \\phi(p) + (d \\mod \\phi(p))}\\\\) \\\\(\\equiv (c^{\\phi(p)})^k \\cdot c^{d \\mod \\phi(p)} \\mod p\\\\). Euler\'s theorem says \\\\(c^{\\phi(p)} \\equiv 1 \\mod p\\\\), so \\\\(m \\equiv c^d \\equiv c^{d \\mod \\phi(p)} \\mod p\\\\), which is our first congruence (see how the exponent is smaller than our original \\\\(d\\\\)?). Then, repeat with \\\\(q\\\\). [Example](https://youtu.be/6ytuvahX1tQ?t=192) (which also reduces \\\\(c \\mod p\\\\) first).\r\n[^speedup sources]: Sources: [here](https://www.cscjournals.org/manuscript/Journals/IJCSS/Volume10/Issue5/IJCSS-1289.pdf) and [here](https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=28f21d6f441d037c2495276561a58bf622f58783).','2024-05-13 06:17:53','3',1),(98,'2024-05-09 07:17:09','Synchronization, semaphores, and the sleeping barber','synchronization-semaphores-and-the-sleeping-barber','BREAKING DOWN A CLASSIC PROBLEM LIKE NEVER BEFORE','Have you ever stayed up at night wondering what happens if two people go into a barbershop at the exact same time, causing the barber\'s brain to spontaneously combust and render the local town uninhabitable for years from neuron fallout?\r\n\r\nJust me?\r\n\r\nWell, \\*in case\\* that pops into your mind someday, just remember…the semaphore will always be there for you.\r\n\r\n\\dropdown\r\n\r\n\\summary\r\n\r\nWarning\r\n\r\n\\endsummary\r\n\r\nI\'ll try to introduce everything from the ground up, but I still recommend having some basic knowledge of concurrency concepts before reading. Also, the point of this post isn\'t to just teach terminology (even though I\'ll squeeze in everything I can)—hopefully, I can show you *why* synchronization is important and *how* it solves various issues.\r\n\r\n\\enddropdown\r\n\r\n# Threads, data races, and race conditions\r\n\r\nYour poor computer is always trying to manage many things at a time. 74 tabs of Firefox[^firefox], Slack ready to jumpscare you with its notification sound, Windows Defender sneakily eating away in the background. Each of these things packages the code it needs to run into a **thread**, and then adds this thread to your computer\'s todo list. Your computer switches between these threads hundreds of times a second (**context switching**), running a tiny bit of code from each at a time. This *illusion* of multitasking allows your computer to handle all these things at the same time, a concept called **concurrency**[^parallelism].\r\n\r\nBut sometimes your computer might switch at a very unfortunate time. Consider this basic example: the table below shows two threads that run their own pieces of code, along with the Assembly (pseudo) code that your computer actually runs. They are both trying to increment the same variable in memory, `x`.\r\n\r\n|  | <center>Thread 1</center> | <center>Thread 2</center> |\r\n|:---:|---|---|\r\n| C | <pre><code>x = x + 1;</code></pre> | <pre><code>x = x + 5;</code></pre> |\r\n| Pseudo-<br>Assembly | <pre><code>load x from memory into temp<br>add 1 to temp<br>save temp back to x in memory</code></pre> | <pre><code>load x from memory into temp<br>add 5 to temp<br>save temp back to x in memory</code></pre> |\r\n\r\nWhat happens if your computer randomly pauses thread 1 right before its last line of Assembly[^assembly] and switches to thread 2? Let\'s trace every step:\r\n\r\n| Step | <center>Thread 1</center> | <center>Thread 2</center> | `t1` | `t2` | `x` (in memory) |\r\n|:---:|---|---|:---:|:---:|:---:|\r\n| 1 | `load x into temp t1` | <center>-</center> | 0 |  | 0 |\r\n| 2 | `add 1 to t1` | <center>-</center> | 1 |  | 0 |\r\n| 3 | <center>-</center> | `load x into temp t2` | 1 | 0 | 0 |\r\n| 4 | <center>-</center> | `add 5 to t2` | 1 | 5 | 0 |\r\n| 5 | <center>-</center> | `save t2 back to x` | 1 | 5 | 5 |\r\n| 6 | `save t1 back to x` | <center>-</center> | 1 | 5 | 1 |\r\n\r\nSee how we did both a `+1` and a `+5`, but ended up with only the `+1` instead of `+6`? This would not have been a problem with just a single thread, but now with two there\'s the potential for unlucky switches like this. This problem is called a **data race**: multiple threads try to access some shared resource like a variable in memory at the “same time” (i.e. not letting one finish before starting the other), *and at least one of them is trying to write*[^data race with read].\r\n\r\nThere\'s also a separate term called a **race condition**, which generally (the semantics are still up for debate) refers to a larger-scale error caused by things like mistimed switches between whole lines of C instead of Assembly, or not controlling which thread starts first when we needed to. We\'ll see examples of these larger-scale race conditions when we get to the sleeping barber.\r\n\r\nBut regardless of whether it\'s a data race or a race condition, semaphores are here to save the day.\r\n\r\n# What is a semaphore?\r\n\r\nImplemented in your operating system, semaphores are a versatile tool[^more synchronization tools] for **synchronizing** threads, or making them wait when they feel the urge to make a badly-timed switch. Usually, **a semaphore is just a whole number that can\'t go negative**, and that threads can increment and decrement (semaphores have a special guarantee by your OS/hardware that it won\'t switch in the middle of *these* operations). If a thread tries to decrement when the semaphore is already 0, it gets stuck, which is how we get threads to wait (\"**block**\") for others to finish and increment the semaphore before switching. It\'s like a hall pass that only lets one kid vape in the bathroom at a time, and taking the hall pass is like decrementing it to 0 (forcing other people to wait) while returning it is incrementing it back to 1[^other names for up/down]. This might still sound super abstract, so let\'s look at that previous example, but with a semaphore to control switching:\r\n\r\n|  | <center>Thread 1</center> | <center>Thread 2</center> |\r\n|:---:|---|---|\r\n| C | <pre><code>sem.down();<br>x = x + 1;<br>sem.up();</code></pre> | <pre><code>sem.down();<br>x = x + 5;<br>sem.up();</code></pre> |\r\n| Pseudo-<br>Assembly | <pre><code>sem.down()<br>load x from memory into t1<br>add 1 to t1<br>save t1 back to x in memory<br>sem.up()</code></pre> | <pre><code>sem.down()<br>load x from memory into t2<br>add 5 to t2<br>save t2 back to x in memory<br>sem.up()</code></pre> |\r\n\r\n|  | <center data-col-width=\"35%\">Thread 1</center> | <center data-col-width=\"35%\">Thread 2</center> | `sem` | `t1` | `t2` | `x` |\r\n|:---:|---|---|:---:|:---:|:---:|:---:|\r\n| 0 |  |  | 1 |  |  | 0 |\r\n| 1 | `sem.down()` | <center>-</center> | 0 |  |  | 0 |\r\n| 2 | `load x into t1` | <center>-</center> | 0 | 0 |  | 0 |\r\n| 3 | `add 1 to t1` | <center>-</center> | 0 | 1 |  | 0 |\r\n| 4 | <center>-</center> | `sem.down()`—BLOCKED! | 0 | 1 |  | 0 |\r\n| 5 | `save t1 to x` | <center>- blocked -</center> | 0 | 1 |  | 1 |\r\n| 6 | `sem.up()` | <center>- blocked -</center> | 1 | 1 |  | 1 |\r\n| 7 | <center>-</center> | `sem.down()` | 0 | 1 |  | 1 |\r\n| 8 | <center>-</center> | `load x into t1` | 0 | 1 | 1 | 1 |\r\n| 9 | <center>-</center> | `add 5 to t1` | 0 | 1 | 6 | 1 |\r\n| 10 | <center>-</center> | `save t1 to x` | 0 | 1 | 6 | 6 |\r\n| 11 | <center>-</center> | `sem.up()` | 1 | 1 | 6 | 6 |\r\n\r\nBy surrounding our code with this semaphore logic, we make sure thread 2 has to wait when thread 1 has already `down()`ed to 0 and is working. Then, when thread 1 is done, it `up()`s, allowing or \"signaling\" thread 2 to finally begin. The result of all this is that we actually get `+6` now, as we wanted. Also note that we initialized this semaphore with a value of 1 so a thread can start in the first place, and that starting with thread 1 was just an arbitrary choice on my part—the OS can choose a random thread to start with.\r\n\r\nA block of code like this that must be finished in one go and cannot be interrupted (aka **atomic**[^atomicity etymology][^semaphores are atomic]) in order to avoid an error like a data race or a race condition is called a **critical region**. In most cases, including this one, critical regions are blocks of code that access and write to a shared variable, susceptible to data races and potentially even race conditions. And our semaphores only need to protect critical regions, not the whole program, because why bother having multiple threads if only one can go at a time *ever*? (It just so happens that in this simple example, there is no more code besides the critical region.)\r\n\r\n# How are semaphores used?\r\n\r\nWhile functionally the same, it might be convenient for teaching purposes (as a sort of intuition guide) to think of semaphores as typically being used for two kinds of waits: 1. waiting for exclusive access to a critical region, or 2. waiting for a resource other than access to a critical region.\r\n\r\nThe example earlier showed the first case: a semaphore `down()`s before the critical region, and `up()`s after to signal that access rights are up for sale again. You may also realize that these semaphores, like the one in the example, can only ever be 0 or 1, because of how our code was set up—such semaphores are called **binary semaphores**. In addition, a binary semaphore used for this first case of ensuring *mut*ually *ex*clusive access to a critical region is also known as a **mutex** or lock.\r\n\r\nIn the second case (which we haven\'t seen yet), these semaphores could be either binary or **counting**, the latter being a semaphore that isn\'t stopped from exceeding 1 by our program logic (like having 5 hall passes). Here, we get to choose (based on our needs) to wait for an `up()` signal from *any* thread that is making *any* resource available, even letting us `down()` only in one thread and `up()` only in another. For example, a web server\'s main (\"dispatch\") thread will `down()` a counting semaphore when it needs a new worker thread to deal with an incoming connection. This will either succeed immediately like a normal decrement if the semaphore is not 0 (worker threads are available!), or it will force the server to wait until a worker threads `up()`s to signal that they\'re free again. This *synchronizes* the dispatch and worker threads, making sure the server doesn\'t immediately hand off a connection to a still-busy worker the first instant it switches to the dispatch thread.\r\n\r\n**To recap, computers handle many things at once by switching randomly between threads. However, code that share resources between threads may require specific switch timings, like if two threads need to write to shared memory without being interrupted by each other, or if a thread needs to wait for another to free up a shared resource before continuing. Synchronization tools like semaphores make computers wait for these specific switch timings so nothing gets messed up.**\r\n\r\n# The sleeping barber\r\n\r\nWith the intro out of the way (yes, that was all intro…\\*looks at scroll bar nervously\\*), let\'s look at the sleeping barber, a classic and more complicated problem formulated by Dijkstra (why is half of CS just him?):\r\n\r\n\\thm\r\n\r\nThere exists a barbershop with \\\\(n\\\\) chairs in the waiting room.\r\n\r\nWhen the barber finishes a haircut, they move on to another customer, or fall asleep if there are none.\r\n\r\nWhen a customer arrives, they must wake the barber if asleep. Otherwise, if the barber is already busy, they must find a waiting room chair to sit in. If the waiting room is full, they leave.[^modified problem]\r\n\r\n\\endthm\r\n\r\nTo hopefully provide a more unique look at this done-to-death problem, I will build our way up from a naive implementation with no synchronization and fix issues like data races and race conditions along the way. This is not how you should approach writing actual code—I’m just trying to demonstrate more clearly *why* we need synchronization.\r\n\r\n## Naive \"solution\" with no synchronization\r\n\r\nLet\'s treat this as a computer simulation. Our barber will be a single `barberThread` and each customer will be their own `customerThread`, allowing us to simulate everyone \"at the same time\" (remember the *illusion* of multitasking!) by switching back and forth between threads really fast[^universe simulation]. Let\'s first try to get a basic idea of what our code might look like, with no regard to synchronization whatsoever[^implementation may vary]:\r\n\r\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <center>Globals</center>                                                                                                                                                                                                                                                                                                                                                                      |\r\n+============================================================================================================================================================================================+==================================================================================================================================================================================================+\r\n| <pre><code>int waitingCustomers = 0;<br>int freeSeats = n;<br>bool barberReady = 0;</code></pre>                                                                                                                                                                                                                                                                                              |\r\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <center>**barberThread**</center>                                                                                                                                                          | <center>**customerThread**</center>                                                                                                                                                              |\r\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <pre data-col-width=\"50%\"><code>while (true) {<br>  while (waitingCustomers < 1) {}<br>  waitingCustomers--;<br>  freeSeats++;<br>  barberReady = true;<br>  // cut hair<br>}</code></pre> | <pre><code>if (freeSeats > 0) {<br>  freeSeats--;<br>  waitingCustomers++;<br>  while (!barberReady) {}<br>  barberReady = false;<br>  // get haircut<br>} else {<br>  return;<br>}</code></pre> |\r\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n\r\nIn this non-semaphored version, we have empty `while` loops to simulate sleeping and waiting for barber and customer respectively, and you might wonder: what\'s wrong with that? Why do we need semaphores when we can just wait in a `while` loop?\r\n\r\nWell, let me show you a what could go wrong with just two customers. I\'ll introduce a race condition here by switching threads between two lines of C. And for brevity, we will assume the barber has just set `barberReady` to `true` at step 0:\r\n\r\n|  | <center data-col-width=\"40%\">Customer 1</center> | <center data-col-width=\"40%\">Customer 2</center> | `barberReady` |\r\n|:---:|---|---|:---:|\r\n| 0 |  |  | `true` |\r\n| 1 | `waitingCustomers++` | <center>-</center> | `true` |\r\n| 2 | `while (!barberReady) {}` | <center>-</center> | `true` |\r\n| 3 | <center>-</center> | `waitingCustomers++` | `true` |\r\n| 4 | <center>-</center> | `while (!barberReady) {}` | `true` |\r\n| 5 | <center>-</center> | `barberReady = false` | `false` |\r\n| 6 | `barberReady = false` | <center>-</center> | `false` |\r\n| 7 | Get haircut | <center>-</center> | `false` |\r\n| 8 | <center>-</center> | Get haircut | `false` |\r\n\r\nUh oh! Both customers are trying to get a haircut at the same time; the barber\'s brain defenestrates itself; the customers get into a fistfight; WW3 erupts.\r\n\r\nTake a look at steps 2 and 3. Customer 1 was ready to get their haircut, but the simulation paused them before they had the chance to set `barberReady` to false. Then, customer 2 was let in. Since `barberReady` is still true, customer 2 gets past the `while` loop too, and now both customers are on the inevitable spiral towards `// get haircut`.\r\n\r\n## Revision 1: use binary semaphore to synchronize customers with barber\r\n\r\nSo our `while` loop has failed us because our computer decided to switch right after it…but remember how we dealt with unlucky switches? We could use a mutex to protect this critical region from such a race condition.\r\n\r\nBut there\'s an easier solution! Notice how the barber is a resource we are waiting to become available—we wait on (the race-condition-prone) `while(!barberReady)`, and the barber signals `barberReady = true` when they\'re ready. Sound familiar? How about we wait on `down()`, which is atomic and negates this race condition, and have the barber signal `up()` when they\'re ready? It\'s our second use case! In fact, we can replace both the while loop *and* the subsequent decrement with `down()`, since `down()` does both waiting and decrementing[^busy wait]!\r\n\r\nLet\'s try the same situation now with our updated code:\r\n\r\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <center>Globals</center>                                                                                                                                                                                                                                                                                                                                     |\r\n+==========================================================================================================================================================================================+===================================================================================================================================================================+\r\n| <pre><code>int waitingCustomers = 0;<br>int freeSeats = n;<br>sem barberReady = 0;</code></pre>                                                                                                                                                                                                                                                              |\r\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <center>**barberThread**</center>                                                                                                                                                        | <center>**customerThread**</center>                                                                                                                               |\r\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <pre data-col-width=\"50%\"><code>while (true) {<br>  while (waitingCustomers < 1) {}<br>  waitingCustomers--;<br>  freeSeats++;<br>  barberReady.up();<br>  // cut hair<br>}</code></pre> | <pre><code>if (freeSeats > 0) {<br>  freeSeats--;<br>  waitingCustomers++;<br>  barberReady.down()<br>  // get haircut<br>} else {<br>  return;<br>}</code></pre> |\r\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n\r\n|  | <center data-col-width=\"40%\">Customer 1</center> | <center data-col-width=\"40%\">Customer 2</center> | `barberReady` |\r\n|:---:|---|---|:---:|\r\n| 0 |  |  | 1 |\r\n| 1 | `waitingCustomers++` | <center>-</center> | 0 |\r\n| 2 | `barberReady.down()` | <center>-</center> | 0 |\r\n| 3 | <center>-</center> | `waitingCustomers++` | 0 |\r\n| 4 | <center>-</center> | `barberReady.down()`—BLOCKED! | 0 |\r\n| 5 | Get haircut | <center>- blocked - | 0 |\r\n\r\nSee how this fixes the race condition? Customer 2 can no longer catch the barbershop in a moment when customer 1 has finished waiting but has not yet set `barberReady` to 0 yet, no matter how quickly they try to barge in after step 2. Instead, customer 2 will have to keep waiting, blocked and sad, until the barber finishes the haircut and eventually loops back around to `barberReady.up()`[^deadlock].\r\n\r\nAlso notice that `barberReady` is a binary semaphore here, which makes sense since there\'s only one barber resource available, so there\'s no reason for our semaphore to exceed 1 (we’ll see later when it does need to exceed 1). In addition, it was initialized to 0 instead of 1 as a mutex would—if we had initialized to 1 and the barber thread happened to run first, we would get a value of 2 (because remember that nothing is stopping a binary semaphore from becoming a counting semaphore except our own code), which could let two customers `down()`—world war 3[^note on zero init]. \r\n\r\n## Revision 2: use counting semaphore to synchronize barber with customers\r\n\r\nBut notice that the other `while` loop with `waitingCustomer` still faces the same problem, so we want to perform the same fix: \r\n\r\n+----------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <center>Globals</center>                                                                                                                                                                                                                                                                                                        |\r\n+==========================================================================================================================================================+======================================================================================================================================================================+\r\n| <pre><code>sem waitingCustomers = 0;<br>int freeSeats = n;<br>sem barberReady = 0;</code></pre>                                                                                                                                                                                                                                 |\r\n+----------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <center>**barberThread**</center>                                                                                                                        | <center>**customerThread**</center>                                                                                                                                  |\r\n+----------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <pre data-col-width=\"50%\"><code>while (true) {<br>  waitingCustomers.down();<br>  freeSeats++;<br>  barberReady.up();<br>  // cut hair<br>}</code></pre> | <pre><code>if (freeSeats > 0) {<br>  freeSeats--;<br>  waitingCustomers.up();<br>  barberReady.down()<br>  // get haircut<br>} else {<br>  return;<br>}</code></pre> |\r\n+----------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n\r\nThe only difference this time is that customers are now the resource the barber waits for, and we can have multiple customers, each of which can increment `waitingCustomers`. Thus, as a natural consequence of how our problem is set up, `waitingCustomers` is a counting semaphore, which helps us track the number of customers (resources) available.\r\n\r\nNow is a good time to summarize some concepts in a table (DON\'T MEMORIZE; you will never need to actually consult arbitrary categorizations like this when you write code. This is only here to hopefully strengthen intuition and clear up any muddiness):\r\n\r\n|  | <span data-col-width=\"40%\">Binary</span> | <span data-col-width=\"40%\">Counting</span> |\r\n|:---:|:---:|:---:|\r\n| **Case 1:<br>mutex** | Lets one set of access rights<br>be claimed; wait when<br>access rights not available<br>**Example**: every mutex ever | - |\r\n| **Case 2:<br>waiting<br>for available<br>resource(s)** | Lets a resource other than<br>access rights be claimed; wait<br>when resource not available<br>**Example**: `barberReady` lets<br>the one barber be claimed | Lets multiple resources other<br>than access rights be claimed;<br>wait when resources run out<br>**Examples**: `waitingCustomers`<br>lets multiple customers be up<br>for claiming; server lets<br>multiple worker threads<br>be claimed by connections |\r\n\r\n## Revision 3: protect shared variable with mutex\r\n\r\nOur last issue has potentially been an elephant in the room: the global `freeSeats` variable could suffer the same Assembly-level data race that `x` did at the very beginning of this blog post.\r\n\r\nQuestion: should we use a mutex, or the same \"waiting on a resource\" second case that we\'ve been using up to this point?\r\n\r\n\\dropdown\r\n\r\n\\summary\r\n\r\nDon\'t click until you\'ve chosen an answer.\r\n\r\n\\endsummary\r\n\r\nIf you answered #2, try to sketch up that same fix for `freeSeats` and teach yourself why it doesn\'t work.\r\n<br><br>\r\n~~also the answer was literally in the heading smh~~\r\n\r\n\\enddropdown\r\n\r\nWe don\'t have anything waiting on `freeSeats` to be \"available\" or anything—the customer leaves instead of waits. We just need to wait for exclusive access rights to prevent a data race, so a mutex is the way to go here:\r\n\r\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <center>Globals</center>                                                                                                                                                                                                                                                                                                                                                                                                                            |\r\n+====================================================================================================================================================================================================================+================================================================================================================================================================================================================================+\r\n| <pre><code>sem waitingCustomers = 0;<br>int freeSeats = n;<br>sem barberReady = 0;<br>sem freeSeatsMutex = 1;</code></pre>                                                                                                                                                                                                                                                                                                                          |\r\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <center>**barberThread**</center>                                                                                                                                                                                  | <center>**customerThread**</center>                                                                                                                                                                                            |\r\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <pre data-col-width=\"50%\"><code>while (true) {<br>  waitingCustomers.down();<br>  freeSeatsMutex.down();<br>  freeSeats++;<br>  freeSeatsMutex.up();<br>  barberReady.up();<br>  // cut hair<br>}<br></code></pre> | <pre><code>if (freeSeats > 0) {<br>  freeSeatsMutex.down();<br>  freeSeats--;<br>  freeSeatsMutex.up();<br>  waitingCustomers.up();<br>  barberReady.down()<br>  // get haircut<br>} else {<br>  return;<br>}<br></code></pre> |\r\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n\r\nBut there\'s still one issue here! If the computer switches to another customer between the `if (freeSeats.value() > 0)` and the `freeSeats.down()` (another race condition!), we could have:\r\n\r\n|  | <center>Customer 1</center> | <center>Customer 2</center> | freeSeats |\r\n|:---:|---|---|:---:|\r\n| 0 |  |  | 1 |\r\n| 1 | `if (freeSeats > 0)` | <center>-</center> | 1 |\r\n| 2 | <center>-</center> | `if (freeSeats > 0)` | 1 |\r\n| 3 | <center>-</center> | `freeSeatsMutex.down()` | 1 |\r\n| 4 | <center>-</center> | `freeSeats--` | 0 |\r\n| 5 | <center>-</center> | `freeSeatsMutex.up()` | 0 |\r\n| 6 | `freeSeatsMutex.down()` | <center>-</center> | 0 |\r\n| 7 | `freeSeats--` | <center>-</center> | -1 |\r\n| 8 | `freeSeatsMutex.up()` | <center>-</center> | -1 |\r\n\r\n-1??? Even though we\'ve protected `freeSeats` from the Assembly-level data races in the increment/decrement, we\'re still vulnerable to switching between the `if` and the actual decrement! In order to remedy this, we have to include the `if` check within our critical region, guaranteeing that the ‘if’ and the decrement finish in one go without interruption:\r\n\r\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <center>Globals</center>                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\r\n+====================================================================================================================================================================================================================+========================================================================================================================================================================================================================================================+\r\n| <pre><code>sem waitingCustomers = 0;<br>int freeSeats = n;<br>sem barberReady = 0;<br>sem freeSeatsMutex = 1;</code></pre>                                                                                                                                                                                                                                                                                                                                                  |\r\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <center>**barberThread**</center>                                                                                                                                                                                  | <center>**customerThread**</center>                                                                                                                                                                                                                    |\r\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <pre data-col-width=\"50%\"><code>while (true) {<br>  waitingCustomers.down();<br>  freeSeatsMutex.down();<br>  freeSeats++;<br>  freeSeatsMutex.up();<br>  barberReady.up();<br>  // cut hair<br>}<br></code></pre> | <pre><code>freeSeatsMutex.down();<br>if (freeSeats > 0) {<br>  freeSeats--;<br>  freeSeatsMutex.up();<br>  waitingCustomers.up();<br>  barberReady.down()<br>  // get haircut<br>} else {<br>  freeSeatsMutex.up();<br>  return;<br>}<br></code></pre> |\r\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n\r\nNotice that since we `down()` before the `if`, we have to make sure our `else` case also `up()`s, or else we might end up with a critical region that never gets exited. Always keep this in the back of your mind, as well as including condition checks (`if`, `while`, even `for` in certain cases) in the critical region. It’ll probably help you anticipate or find some synchronization bugs faster.\r\n\r\nBut that\'s it! That\'s our final sleeping barber simulation that patches all the synchronization issues[^implementing haircut]. Admittedly, this problem might\'ve been a bit contrived, because it wasn\'t designed to have every last drop of its pedagogical value milked like the United States realizing that a McDonald\'s kitchen has oil too[^more edge cases]. But I needed to prove to myself that my dozen-hour[^dozen more hours] rabbit hole for a 10-minute segment of lecture wasn\'t a waste, so I hope this was a helpful and unique insight to the world of semaphores and sleep-deprived barbers.\r\n\r\nAnd before we say goodbye, I would like to apologize for \"neuron fallout\". I hope that absolutely miserable attempt at a pun didn\'t make neurun away.\r\n\r\n[^firefox]: If you\'re using Chrome: 1. don\'t, 2. I will make your browser mine crypto (I won’t), 3. this introduction actually doesn\'t apply to Chrome! Chrome [uses processes](https://levelup.gitconnected.com/how-web-browsers-use-processes-and-threads-9f8f8fa23371) instead of threads for tabs, which is like having 74 different todo lists with maybe a few items each instead of 1 list with 74 items. I won\'t go into advantages/disadvantages here.\r\n[^parallelism]: In contrast, *real*, simultaneous multitasking is called **parallelism**, for example when you have multiple CPU cores running at the same time instead of just one core switching back and forth. Most modern devices do both, but I will only talk about concurrency here.\r\n[^assembly]: By the way, this Assembly would be analogous to taking a container out of a fridge (memory) onto the countertop (temp storage), adding food into it, and then putting it back into the fridge.\r\n[^data race with read]: They don\'t have to be both writes. For example, thread 2 might try to read in the middle of thread 1\'s write. Maybe thread 2 will get the old value, maybe it\'ll get the new value, maybe it\'ll even get half the bits from the old value and half from the new…and the mere *possibility* for a value different than what we\'re expecting makes this a data race.\r\n[^more synchronization tools]: If you\'re curious, things like condition variables/[monitors](https://en.wikipedia.org/wiki/Monitor_(synchronization)) also exist for synchronization. I might cover them someday, but they\'re probably more complicated than semaphores.\r\n[^other names for up/down]: Sometimes `down()` is referred to as `wait()` and `up()` as `post()`/`signal()`. The original names were `p()` and `v()` respectively, named after Dutch *prolaag* and *verhogen* (the inventor, Dijkstra, was Dutch). But because computer scientists can never agree on things, there are a few more candidates for what these stand for [here](https://en.wikipedia.org/wiki/Semaphore_(programming)#Operation_names).\r\n[^atomicity etymology]: Possibly [named](https://cs.stackexchange.com/a/121464) after the fact that atoms are (almost) inseparable, just how like atomic blocks of code are uninterruptible—don\'t tell them about nuclear fission!\r\n[^semaphores are atomic]: `sem.down()` and `sem.up()` are also atomic.\r\n[^modified problem]: This is the most popular variant of the [original problem](https://www.cs.utexas.edu/users/EWD/transcriptions/EWD01xx/EWD123.html#4.2.%20The%20Superfluity%20of%20the%20General%20Semaphore.). Ironically, Djikstra originally used the sleeping barber to be like \"you mortals, I can do all that with just binary semaphores\", but it seems like textbook writers (and me) were like \"hippity hoppity your problem is now my property\" and turned it into teaching material for semaphores in general.\r\n[^universe simulation]: The next time someone tells you the universe is a simulation, ask them how fast it context switches.\r\n[^implementation may vary]: The specific implementation of this is up to debate, but remember that this is not a C programming assignment. Unfortunately, I have to insist that this is the code that works best for our walkthrough, and hopefully you can make sense of it.\r\n<br><br>\r\nAlso, I know C doesn\'t have booleans by default...now please stop screaming at me.\r\n[^busy wait]: Another advantage of this substitution besides fixing the WW3 issue is that semaphores wait much more \"passively\" than while loops—`sem.down()` puts that thread to sleep until it receives a `sem.up()` somewhere, while `while` loops are like setting an alarm every millisecond to see if the `barberReady` has changed. This latter situation is called a **busy wait**, and it uses an unnecessary amount of CPU by constantly switching back to run the while loop again.\r\n[^deadlock]: Also notice that if we had put `waitingCustomer++` *after* `barberReady.down()` instead, the customer would wait for the barber to `barberReady.up()` while the barber waits for the customer to `waitingCustomer++`—they will wait for each other, forever. This situation is called a **deadlock**, and it\'s good to be mindful of them when you\'re debugging a program that is stuck somewhere.\r\n[^note on zero init]: In case you\'re wondering, even if the customer thread started first with the semaphore initialized to 0, they would just have to wait at `down()` for the barber thread to start, i.e. for the barbershop to open.\r\n[^implementing haircut]: Implementing the actual haircut is left as an exercise to the reader.\r\n[^more edge cases]: Some of the things I considered didn\'t even show up here, like what happens if the `freeSeatsMutex.up()`s were placed differently like some sources do. I *believe* this shouldn\'t affect anything, but if any of you happen to be an expert and are reading this for some reason, please feel free to correct me in the comments.\r\n[^dozen more hours]: I wouldn\'t be surprised if I\'ve spent another dozen hours writing this—I must\'ve revised it at least a hundred times.',NULL,'3',1),(101,'2024-05-09 07:13:30','The Airport','the-airport','','The Airport is a place where dreams are born and dreams go to die. My parents met at an Airport, and I leave them at an Airport.\r\n\r\nWe fly out in pursuit of a new life, and simultaneously say goodbye to our old one. Some are forced to leave. Others, more optimistic or more fortunate, escape towards a better path.\r\n\r\nThe security check holds the power of separation. Some families part for fathers to find work or adult children to find education, because they were unable to succeed at home. Some people never return. Some people can’t. Regardless, they hug and kiss and cry at the entrance to the security line, believing that beyond the X-ray machines lies the best, or only chance of a better life for all.\r\n\r\nBut beyond those machines, the whisper of a better life settles into the dust beneath the lone desk at the gates, waiting to be stirred up by the winds of fate. A passerby brings through a small breeze; the dust might rise up an inch, then settle back down into the pile it is forever destined to. Millions of dust particles sit in the pile, and the ones drifting through the air are far, few, and temporary.\r\n\r\nFor every person that makes it onto a plane, a dream is hidden within their hearts. Some dream of their families. Some dream of a better life.\r\n\r\nSome dream of not leaving at all.\r\n\r\nAnd it might be a young adult’s first time in a plane by themselves, or a working adult’s last time in a plane at all. But whatever the case, they are flying alone.\r\n\r\n---\r\n\r\n*Originally written at an Airport.*\r\n\r\n*Yes, I know vacations exist.*',NULL,'7',1),(102,'2024-05-09 07:13:55','Spectator of my Life','spectator-of-my-life','','There was once a boy\r\n<br>\r\nneither friend nor foe\r\n<br>\r\nwho watched me from afar.\r\n\r\nHe would sit idly in the shade\r\n<br>\r\nreading a book, playing a game\r\n<br>\r\nlooking up once in a while to see if the sun had set\r\n\r\nI knew the boy, I trusted him\r\n<br>\r\nI knew he would guide my journey ahead\r\n<br>\r\nknew that he always had my back\r\n\r\nYet when I thought I was on top of the world \r\n<br>\r\nhe would see everyone ahead, too far for me to see\r\n<br>\r\nhe would not realize that letting me know would mean the world to me\r\n\r\nYet when I took a wrong turn and noticed a dead end\r\n<br>\r\nand I convinced myself that it was a trick of the light\r\n<br>\r\nhe offered no rebuke, nothing to stifle my ego\r\n\r\nYet when I became the hare to the tortoise\r\n<br>\r\nhe\'d seen me do better, outrun the rest\r\n<br>\r\nbut he refused to leave his comfortable spot beneath the trees\r\n\r\nspectating me\r\n<br>\r\nwatching me fall behind\r\n<br>\r\nwatching me waste time.\r\n\r\nOne day I finally strolled around the corner and saw the finish line\r\n<br>\r\neveryone was already there, rejoicing together in the fruits of their labor\r\n<br>\r\nI looked over; the boy was humming a tune to himself\r\n\r\nAt the end, I finally saw what could’ve been\r\n<br>\r\nif he had stopped me from that break I thought I could take\r\n<br>\r\nif he had just reminded me of the flame that once blazed within\r\n\r\nI showed him the damage he’d done\r\n<br>\r\nthe scars he’d left, never to heal\r\n<br>\r\ntold him that he had let me down\r\n\r\nAnd finally\r\n<br>\r\ntoo late\r\n<br>\r\nthe boy took it unto himself to be more than just a bystander\r\n\r\nthen I realized\r\n<br>\r\nthe boy was me.\r\n\r\n---\r\n\r\n*Originally written Apr 17, 2024.*','2024-05-14 08:41:04','7',1),(103,'2024-05-09 07:13:13','Those Kinds of Change','those-kinds-of-change','','those kinds of change\r\n<br>\r\nthey\'re exciting\r\n<br>\r\nlets you see what\'s out there\r\n\r\nthose kinds of change\r\n<br>\r\nthey\'re generous\r\n<br>\r\nshows you a new warmth to keep you going\r\n\r\nthose kinds of change\r\n<br>\r\nthey\'re addicting\r\n<br>\r\nbrings you on an adventure to make you feel something new\r\n\r\nthose kinds of change\r\n<br>\r\nthey\'re scary\r\n<br>\r\nlets you see what\'s out there, that what you currently have is worthless\r\n<br>\r\nthat everything you\'ve worked to build up is nothing\r\n\r\nthose kinds of change\r\n<br>\r\nthey\'re sadistic\r\n<br>\r\nshows you a new warmth but strips you of your old one\r\n<br>\r\nexposes you to the barren world as you struggle to get there\r\n\r\nthose kinds of change\r\n<br>\r\nthey\'re insidious\r\n<br>\r\nbrings you on an adventure, but adventures don\'t last forever\r\n<br>\r\nhow do you fill the hole with what you\'ve lost?\r\n\r\nyou have nothing.\r\n\r\n---\r\n\r\n*Originally written Apr 20, 2024.*',NULL,'7',1),(104,'2024-05-09 07:12:51','Memories.','memories','','Time.\r\n\r\nIn a universe where each fading star could be a brief conflict, a passing inconvenience…time is our only immortal enemy.\r\n\r\nBut—time is an illusion. An illusion of an unstoppable flow, a bottomless ocean, a suffocating force slowly crushing our life away…\r\n\r\nThe illusion can be broken.\r\n\r\nA single window to the past, seeing through the deception of time, defeats the illusion, even if for just a moment…\r\n\r\nThose windows are called memories.\r\n\r\n<br>\r\n\r\nMemories.\r\n\r\nIn a world of darkness, memories are our light.\r\n\r\nIt is a light that rekindles the flames of hope and the ashes of sorrow. It is a light that pierces through the cosmos to deliver a vision, a *dream*—a wormhole back to when all was well and good.\r\n\r\nIt is a light that shines brighter than stars.\r\n\r\n<br>\r\n\r\nMy past.\r\n\r\nIt is gone forever. I know that.\r\n\r\nBut it isn\'t. It lives inside me. Inside all of us.\r\n\r\nI *am* my past.\r\n\r\n<br>\r\n\r\nThe universe.\r\n\r\nThe vast expanse of stars, the endless fields of glimmering galaxies, the oceans of bright, beautiful nebulae, floating through a cold and empty void…\r\n\r\nThe thousands of colorful flickers, small or large, bright or dim, flickers of my past…\r\n\r\nThey give meaning to the void that is life.\r\n\r\n<br>\r\n\r\nLife.\r\n\r\nOne blink of an eye and it\'s gone.\r\n\r\nSome people tell me to not look back.\r\n\r\nBut sometimes looking back is the only way we can move on.\r\n\r\n<br>\r\n\r\nA life, a journey, a game…a momentary flash quickly lost in the eternal darkness of the universe…\r\n\r\nBut it\'s a life nonetheless.\r\n\r\nOne day my bones will grow weak and my joints will become rickety.\r\n\r\nThat day, I want to look back through the windows of time, on years upon years of memories, of my past, of my universe, of my life, of *me*—and be proud. Proud, and happy.\r\n\r\nBecause no matter how much I\'ve been battered and beaten, torn to pieces, disintegrated into stardust, tossed around in this chaotic world, lost in the vast chasm of life—I\'m still me.\r\n\r\n<br>\r\n\r\nAnd as the sun sets, I will have conquered my world.\r\n\r\n---\r\n\r\n*Originally written Apr 4, 2022.*',NULL,'7',1),(105,'2024-05-09 07:14:15','Some random chapter title ideas from a while ago','some-random-chapter-title-ideas-from-a-while-ago','','__**Chapter 1\r\n<br>\r\nDawn**__\r\n\r\n*The first light peeks above the horizon, bringing with it a new beginning.*\r\n\r\n*Dawn.*\r\n\r\n*Every morning, as the sun bathes the serene meadows in a soft orange glow and the dew glistens in the warm light, a bird chirps hello to a new day, bringing in a fresh chorus of cheerful responses. Every day is unique, and every day is special.*\r\n\r\n*Every dawn promises a new day.*\r\n\r\n<br>\r\n\r\n__**Chapter 2\r\n<br>\r\nRain**__\r\n\r\n*My path forward in the day of dawn is unclear, obscured by sheets of rain.*\r\n\r\n*The rain reminisces of night. Of darkness.*\r\n\r\n*It reminisces of my past.*\r\n\r\n<br>\r\n\r\n__**Chapter 3\r\n<br>\r\nSprout**__\r\n\r\n*The rain reminisces of night, of darkness.*\r\n\r\n*But with every rain, hidden seeds begin to sprout.*\r\n\r\n*And slowly, these sprouts begin to bear fruit.*\r\n\r\n<br>\r\n\r\n__**Chapter 4\r\n<br>\r\nHorizon**__\r\n\r\n*As the rain clears and the sprouts bear fruit, the horizon emerges…an endless field of shimmering light, at the place where our dreams lie.*\r\n\r\n*But as I look towards the horizon in front, the hopes of my future fade into the distance, too far away for me to catch up.*\r\n\r\n*And as I look towards the horizon behind, the blunders of my past vanish into the unreachable, too late for me to go back.*\r\n\r\n*You can run, you can seek…but you will never reach the horizon.*\r\n\r\n*Where your dreams lie.*\r\n\r\n<br>\r\n\r\n__**Chapter 5\r\n<br>\r\nSunshine**__\r\n\r\n*I may never reach the horizon, but the sun will.*\r\n\r\n*The sun hugs me with its beaming rays and pulls me within the horizon\'s reach.*\r\n\r\n*The sun reminds me that there is still hope, that there is still happiness, that there is still light, at the place where my dreams lie.*\r\n\r\n*The sun casts its brightest beams upon me for this special hour, the golden hour of my life.*\r\n\r\n*The sun loves me, and I love the sun.*\r\n\r\n<br>\r\n\r\n__**Chapter 6\r\n<br>\r\nEvening**__\r\n\r\n*Sunshine can bring me to the place where my dreams lie.*\r\n\r\n*But by the time the sun reaches the horizon, as the day reaches the peak of its beauty, the light is already fading…*\r\n\r\n*The dawn promised a unique day, but sometimes that\'s a curse: this day will never return again.*\r\n\r\n*And as short-lived beauty wanes blue, night begins to fall.*\r\n\r\n<br>\r\n\r\n__**Chapter 7\r\n<br>\r\nSunset**__\r\n\r\n*The last light fades into mist, casting long shadows as we stand in the vast fields of life. Shadows, imprints of us, memories…cast only by the light of the past, but reminding us of the darkness of the present…*\r\n\r\n*Leaves gently dust the roadside with colors of autumn, lined with thickets of eucalyptus shade in the fading light. The setting sun spills gold onto the spindly trees, dazzling the red and gray of the trunks in harmony…the avenue of dreams melts into the golden haze, blurring into the passage of time…the final glimmer vanishes behind the misty peaks, and the bright pink splashes of rosy clouds fade into cool blue like distant memories…a burst of cold air swoops in, noisily picking up the heaps of fallen autumn leaves…pure silver moonlight spills across the meadows, illuminating the night sky just like the sun, providing comfort, vanishing behind turbulent clouds…the first pitter-pattering of raindrops on cold soil, punctuating the dying rhythm of chirping birds returning to their nests…the howling of the wind, narrating the uprooting of the trees, the scouring of the fields…and the flowers and the birds, having just gone to sleep for the last time…*\r\n\r\n<br>\r\n\r\n__**Lead-in to Epilogue**__\r\n\r\nBut all that is the past.\r\n\r\nI turn to face the future.\r\n\r\nThe golden radiance of the setting sun dazzles me, blinding me with its beams of light. The distant peaks are shrouded in fog, hiding what is beyond. The cold breeze of the night blows in, bringing the beautiful day that has blossomed to a close.\r\n\r\n*But even in the darkest of nights, I must dream of dawn.*\r\n\r\nTurning back, I take one last look at the past, at everything…\r\n\r\nThen I walk into the night, towards the setting sun.\r\n\r\n<br>\r\n\r\n__**Epilogue\r\n<br>\r\nNight**__\r\n\r\n*The night is cold, and it is unforgiving.*\r\n\r\n*It drives away warmth. It takes away hope. It strips away light and leaves empty cold where dreams once danced.*\r\n\r\n*But it doesn’t last forever.*\r\n\r\n*With enough patience, every sunset brings a new dawn.*\r\n\r\n---\r\n\r\n*Originally written [redacted].*\r\n\r\n*\"dream of dawn\" and \"towards the setting sun\" are pretty much pulled from Matthew Stover\'s Revenge of the Sith, so credits to him.*\r\n\r\n*Also, I know that birbs aren’t real, but “punctuating the dying rhythm of chirping government spy drones” doesn’t hit as hard.*',NULL,'7',1),(106,'2024-05-09 07:13:42','The Mask','the-mask','','To them, it looks like I\'m an idiot.\r\n<br>\r\nTo them, I shouldn\'t be struggling.\r\n<br>\r\n\"It\'s simple\", they always say.\r\n<br>\r\n\"Why can\'t you see it?\"\r\n\r\n*Why can\'t you see me?*\r\n\r\nThey never understand that what works for them doesn’t work for me.\r\n<br>\r\nThey care about me, but certainly in the wrong way.\r\n<br>\r\nBut if I say that, I hurt their feelings\r\n<br>\r\nbecause they\'re offended by my reality.\r\n\r\nToo nice and they don\'t get it.\r\n<br>\r\nToo direct and it\'s an excuse.\r\n<br>\r\nMy self-awareness insults them.\r\n<br>\r\nCracks in the mask, slowly, slowly…\r\n\r\n*Trapped in my own mind.*\r\n\r\nI try so hard to work with all their needs\r\n<br>\r\nbut it\'s exhausting when I can’t get that in return.\r\n<br>\r\nI spend hours fighting my own brain every day\r\n<br>\r\nyet they cannot give ten minutes to understand me.\r\n\r\nIt’s always just “you\'re overreacting”\r\n<br>\r\n“how have you gotten this far”\r\n<br>\r\nbut not a single one of these hasn\'t already been said by myself\r\n\r\nit just hurts a bit more when it comes from you.\r\n\r\n---\r\n\r\n*Originally written Apr 22, 2024.*',NULL,'7',1),(126,'2024-05-09 07:14:23','The Glass Sheep','the-glass-sheep','','a sheep wanders alone upon a vast plain\r\n<br>\r\nthe wind rustles quietly; the sun beams down tirelessly\r\n<br>\r\nbright green rolling hills with no end in sight\r\n<br>\r\njust the sheep under the sun’s serene light\r\n\r\nbut on this grassland lives another sheep of glass\r\n<br>\r\nblending in perfectly to the background behind\r\n<br>\r\nit has no predator, for it can\'t be seen\r\n<br>\r\non the quiet grassland, all roam free\r\n\r\none day the glass sheep is a bit careless\r\n<br>\r\nbumps into the other, gives it quite a bit of shock\r\n<br>\r\nbut the other became curious, for it could get rid of its fleas\r\n<br>\r\nso many ideas for what it could do as one with the green\r\n\r\nbut dark clouds loom, and night is falling\r\n<br>\r\nthe glass sheep decides to teach the other when night clears\r\n<br>\r\nthe other, fuming, must hold its ideas patiently\r\n<br>\r\nwith no other choice, colorless green ideas sleep furiously.',NULL,'7',1),(133,'2024-05-13 18:01:15','A hyper-condensed summary of an entire linear algebra course','a-hyper-condensed-summary-of-an-entire-linear-algebra-course','AND HOW I WAS (PARTIALLY) INSPIRED TO DO MATH…BY A BAD PROF','*deep breath\\*\r\n\r\n*passes out\\*',NULL,'-3',0),(138,'2024-05-09 07:14:09','She','she','','She\'s there without fail, every single day\r\n<br>\r\nbut I\'m never brave enough to talk to her\r\n<br>\r\nHer back is turned, lonely, every time I glance\r\n<br>\r\nalmost like she’s inviting me to go over\r\n\r\nShe’s always at the same place\r\n<br>\r\nboth in person and in my heart\r\n<br>\r\nI try to smile every time\r\n<br>\r\nbut I can’t always tell if she saw\r\n\r\nI always show my best to her\r\n<br>\r\nhoping she’ll appreciate my effort\r\n<br>\r\nBut it’s starting to become clear to me\r\n<br>\r\nthat I’m going to have to do something more\r\n\r\nOther people talk to her sometimes\r\n<br>\r\nit makes her happy, like sunshine\r\n<br>\r\nAnd I can’t help but bask in the warmth of her smile\r\n<br>\r\nbut I’m always disappointed with myself in the end\r\n\r\nEvery day, time dwindles away\r\n<br>\r\nevery day, I long for that smile like sunshine\r\n<br>\r\nIt’s just a conversation, they always say\r\n<br>\r\nhow hard could it possibly be?\r\n\r\nI guess, that in this world\r\n<br>\r\ntrivial for one might be unfairly hard for another\r\n<br>\r\nI guess, that in this world\r\n<br>\r\nsome just can’t get what they deserve\r\n\r\nBecause what kind of world do we live in\r\n<br>\r\nwhere the old lady still works at the dining hall?\r\n\r\n---\r\n\r\n*If this confused you, or if you still think I’m in love with my dining hall staff (<3), please read again, and pay special attention to the penultimate paragraph.*\r\n\r\n*(or maybe I’m just a bad writer idk)*','2024-05-10 11:15:42','7',1),(144,'2024-05-10 03:04:13','Hide and Seek','hide-and-seek','','I’m the master of the game of hide and seek\r\n<br>\r\nno one has ever been able to find me\r\n<br>\r\nI guard myself with the darkness of shadows\r\n<br>\r\nI vanish behind a statue of a faceless smile\r\n\r\nBut after playing the game for too long\r\n<br>\r\nhiding started to feel like where I belonged\r\n<br>\r\nand when I realized the game had ended, to my horror\r\n<br>\r\nI no longer remembered how to be found\r\n\r\nNo matter how warm the light felt all around\r\n<br>\r\nI had taught myself to fear being found\r\n<br>\r\nI could no longer bring myself to step out from\r\n<br>\r\nthe darkness and pain I had come to love\r\n\r\nI will always be that statue of the faceless smile\r\n<br>\r\nand they will never know.',NULL,'7',1),(148,'2024-05-12 07:27:03','test','test','','test',NULL,'-6',0),(150,'2024-05-13 00:59:53','4am.','4am','','It’s 4am.\r\n\r\nOn this particularly foggy night in the middle of May, you step outside. The air is quiet and thick with moisture. A distant, eerie hum trembles through the air.\r\n\r\nAlone.\r\n\r\nYou choose a direction. North. Step by step, you leave the warm lights of home and stray into the unknown. You turn a corner and are momentarily blinded by the orange glow of a streetlight. Heading the other way, the path squeezes between two huge trees, disappearing upwards into the dark night sky. A wooden bridge lies ahead, lights melting into the fog.\r\n\r\nYou take your first step onto the bridge. You hear the rails rattle with every step you take, and the tiny squeaks of your shoes on the damp wood. The bridge creaks slightly, and it echoes faintly through the woods, reverberating off the canyon walls. Your pace quickens. Almost there…a small uphill path leads forward towards an empty road.\r\n\r\nYou cross the road. It has never been this quiet. The ominous bass of machinery draws near, saturating the air. Behind you, someone seems to open a door, but you cannot see.\r\n\r\nAnother bridge lies ahead, longer. The foot of the bridge on your side is splattered with isolated drops of water. It is foggy, not rainy. You continue forward. A light flickers on to your left unexpectedly with a loud click, then fades away as you pass. Your pace quickens. An icy wind picks up. An orange glow enters your vision, then disappears. The hum throbs from all sides now. It fills your ears, but above it, you hear your own heartbeat. Your breath. Your pace quickens. A light doesn’t turn on. A dark shadow flickers. A chilly draft from behind. The roar of machinery shakes the sky. Heavy drops of water splatter on your head. A huge mass of dark spots stares up at you. Your pace quickens. Your footsteps come from behind you. The air is frigid. The roar is suffocating. The bridge screams. You turn around. A dark flash fills your vision, and you fall, fall…','2024-05-13 08:39:48','7',1);
/*!40000 ALTER TABLE `post` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(25) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `email` varchar(512) COLLATE utf8mb3_bin NOT NULL,
  `password_hash` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,'admin','yhugdrive@gmail.com','scrypt:32768:8:1$bFQbWWSKhb5DRtgx$33557a1310635563bbf46f74ed6b2848a657a14d0ea06bcb7d67b4055d9d21e0ec6ab45169e60f90a84ff8d9697ed074dce86efec17b75265c217ac6173fde78');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2024-05-15  9:41:48
