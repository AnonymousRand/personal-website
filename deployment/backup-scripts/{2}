-- MySQL dump 10.13  Distrib 8.0.39, for Linux (aarch64)
--
-- Host: localhost    Database: flask_website
-- ------------------------------------------------------
-- Server version	8.0.37

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `alembic_version`
--

DROP TABLE IF EXISTS `alembic_version`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `alembic_version` (
  `version_num` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  PRIMARY KEY (`version_num`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `alembic_version`
--

LOCK TABLES `alembic_version` WRITE;
/*!40000 ALTER TABLE `alembic_version` DISABLE KEYS */;
INSERT INTO `alembic_version` VALUES ('dd81a3c83f5c');
/*!40000 ALTER TABLE `alembic_version` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blogpage`
--

DROP TABLE IF EXISTS `blogpage`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `blogpage` (
  `id` int NOT NULL,
  `url_path` varchar(50) NOT NULL,
  `name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `subname` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `meta_description` varchar(500) DEFAULT NULL,
  `login_required` tinyint(1) NOT NULL,
  `unpublished` tinyint(1) NOT NULL,
  `writeable` tinyint(1) NOT NULL,
  `ordering` int NOT NULL,
  `html_color_class` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `ix_blogpage_ordering` (`ordering`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blogpage`
--

LOCK TABLES `blogpage` WRITE;
/*!40000 ALTER TABLE `blogpage` DISABLE KEYS */;
INSERT INTO `blogpage` VALUES (-7,'/writers-unblock-backrooms','Writer\'s Unblock - The Backrooms',NULL,NULL,1,1,1,13,NULL),(-6,'/writers-block-backrooms','Writer\'s Block - The Backrooms',NULL,NULL,1,1,1,11,NULL),(-5,'/the-fake-news-network-backrooms','The Fake News Network - The Backrooms',NULL,NULL,1,1,1,9,NULL),(-3,'/professor-google-backrooms','Professor Google - The Backrooms',NULL,NULL,1,1,1,5,NULL),(-2,'/misc-backrooms','/misc/ - The Backrooms',NULL,NULL,1,1,1,3,NULL),(1,'/all','All Posts',NULL,'all posts by AnonymousRand.',0,0,0,1,NULL),(2,'/misc','/misc/','THINGS THAT COME TO MIND UNREASONABLY STRONGLY','all the posts that don\'t really belong anywhere else.',0,0,1,2,'gray'),(3,'/professor-google','Professor Google','THE BLOG WHERE I TEACH MYSELF CS AND MATH','intuition, explanations, and details about computer science and math topics hopefully unlike any class you\'ve taken.',0,0,1,4,'custom-green-deep-dark'),(5,'/the-fake-news-network','The Fake News Network','ruining decent oneliners with mediocre articles','The Onion, but by someone without a degree in journalism.',0,0,1,8,'custom-blue-deep'),(6,'/writers-block','Writer\'s Block','yes i stole the idea','the',0,0,1,10,'custom-pink-light'),(7,'/writers-unblock','Writer\'s Unblock','creative writing and existential dumps from 3am','creative writing dumps or random venting.',0,0,1,12,'custom-pink-light');
/*!40000 ALTER TABLE `blogpage` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comment`
--

DROP TABLE IF EXISTS `comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `comment` (
  `id` int NOT NULL AUTO_INCREMENT,
  `timestamp` datetime NOT NULL,
  `content` varchar(5000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `post_id` int NOT NULL,
  `author` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `left` int NOT NULL,
  `right` int NOT NULL,
  `depth` int NOT NULL,
  `unread` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `ix_comment_timestamp` (`timestamp`),
  KEY `post_id` (`post_id`),
  KEY `ix_comment_left` (`left`),
  KEY `ix_comment_right` (`right`),
  CONSTRAINT `comment_ibfk_1` FOREIGN KEY (`post_id`) REFERENCES `post` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=506 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comment`
--

LOCK TABLES `comment` WRITE;
/*!40000 ALTER TABLE `comment` DISABLE KEYS */;
INSERT INTO `comment` VALUES (385,'2024-07-28 04:34:03','test',229,'test',1,2,0,0),(386,'2024-07-28 04:34:38','test',229,'test',3,6,0,0),(387,'2024-07-28 04:34:55','lol!@?',229,'lol',4,5,1,0),(388,'2024-07-28 04:35:09','test',229,'est',7,8,0,0),(390,'2024-07-28 04:50:42','or die',229,'laugh',9,10,0,0),(391,'2024-07-28 04:50:47','lol',229,'lol',11,12,0,0),(392,'2024-07-28 05:11:26','fa',229,'fdfa',13,14,0,0),(393,'2024-07-28 05:12:27','asf',229,'a',15,16,0,0),(394,'2024-07-28 05:15:57',' sda',229,'afqfe ',17,18,0,0),(395,'2024-07-28 05:21:10','lol',229,'anonymousrand',19,20,0,0),(396,'2024-07-28 05:21:20','yes',229,'yes',21,22,0,0),(397,'2024-07-28 05:22:46','asfas',229,'g',23,24,0,0),(398,'2024-07-28 05:23:00','sdd',229,'anonymousrand',25,26,0,0),(399,'2024-07-28 05:23:33','sd',229,'anonymousrand',27,28,0,0),(400,'2024-07-28 05:23:37','sdgasdgas',229,' fa  sgadg ',29,30,0,0),(401,'2024-07-28 05:23:55','poopoo',229,'anonymousrand',31,32,0,0),(402,'2024-07-28 05:24:48','sdgasdgas',229,'fa sgadg ',33,34,0,0),(403,'2024-07-28 05:51:04','a',229,'lol',35,36,0,0),(404,'2024-07-28 05:56:50','zsgsz',229,'olgc',37,38,0,0),(405,'2024-07-28 05:57:09','asf a',229,'safa s f',39,40,0,0),(406,'2024-07-28 05:57:31','ag',229,'asga',41,42,0,0),(407,'2024-07-28 05:57:45','afas',229,'ga',43,44,0,0),(408,'2024-07-28 05:58:01','gasg',229,'agasg',45,46,0,0),(409,'2024-07-28 06:07:58','asfas',229,'fa',47,48,0,0),(410,'2024-07-28 07:21:02','a',229,' saf',49,50,0,0),(411,'2024-07-28 07:42:12','asdf',229,'f',51,52,0,0),(412,'2024-07-28 07:51:49','a',229,'test',53,54,0,0),(413,'2024-07-28 07:54:29','s',229,'asf',55,60,0,0),(431,'2024-07-29 07:00:45','f',229,'asd',56,59,1,0),(432,'2024-07-29 07:00:55','lol',229,'anonymousrand',57,58,2,0),(433,'2024-07-29 07:21:32','sad',229,'anonymousrand',61,62,0,0),(434,'2024-07-29 07:21:41','asd',229,'Anonym ousRand ',63,64,0,0),(435,'2024-07-29 07:21:49','sda',229,'AnonymousRand',65,66,0,0),(436,'2024-07-29 07:27:13','sd',229,'AnonymousRand',67,72,0,0),(439,'2024-07-30 01:21:25','```python\r\ndef yes():\r\n    penis = 5\r\n```',229,'faf',68,71,1,0),(441,'2024-08-03 23:02:55','youre stupid',229,'AnonymousRand',69,70,2,0),(448,'2024-08-04 04:59:10','That was so interesting! I love your use of war crimes to show the impact of the industrial revolution on mcdonalds prices at the bottom of the mariana trench. Great analysis!!!!!!!11!!!1!1!!!1',229,'AnonymousRand',73,80,0,0),(451,'2024-08-07 00:49:35','[lmao](https://google.com)',229,'AnonymousRand',74,77,1,0),(452,'2024-08-07 00:49:49','[sob](https://google.com)',229,'noob',75,76,2,0),(453,'2024-08-07 01:32:52','test',229,'AnonymousRand',78,79,1,0),(454,'2024-08-07 01:32:59','hohoho',229,'AnonymousRand',81,82,0,0),(455,'2024-08-07 01:33:16','a',229,'asf',83,86,0,0),(457,'2024-08-08 08:11:38','test',229,'AnonymousRand',84,85,1,0),(467,'2024-08-09 07:22:47','test',229,'test',87,88,0,0),(469,'2024-08-09 07:25:11','test',229,'test',89,90,0,0),(497,'2024-08-10 05:19:27','test',229,'test',91,96,0,0),(498,'2024-08-10 05:21:58','lol[^based]\r\n\r\ns\r\n\r\n[^based]: yes',229,'AnonymousRand',92,95,1,0),(499,'2024-08-10 05:22:24','lol[^yes]\r\n\r\n[^yes]: \\\\(pen\\\\)s',229,'AnonymousRand',93,94,2,0);
/*!40000 ALTER TABLE `comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `post`
--

DROP TABLE IF EXISTS `post`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `post` (
  `id` int NOT NULL AUTO_INCREMENT,
  `timestamp` datetime NOT NULL,
  `title` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `sanitized_title` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `subtitle` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `content` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci,
  `edited_timestamp` datetime DEFAULT NULL,
  `published` tinyint(1) NOT NULL,
  `blogpage_id` int NOT NULL,
  PRIMARY KEY (`id`),
  KEY `ix_post_timestamp` (`timestamp`),
  KEY `blogpage_id` (`blogpage_id`),
  CONSTRAINT `post_ibfk_1` FOREIGN KEY (`blogpage_id`) REFERENCES `blogpage` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=234 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `post`
--

LOCK TABLES `post` WRITE;
/*!40000 ALTER TABLE `post` DISABLE KEYS */;
INSERT INTO `post` VALUES (77,'2024-05-09 07:14:30','Why does the Chinese remainder theorem work?','why-does-the-chinese-remainder-theorem-work','DISCOVERING THE INTUITION BEHIND THE FORMULA','Fifteen hundred years ago, a man named Sun Tzu helped you wait about 234 milliseconds less for this webpage to load[^calculation source].\r\n\r\n\\dropdown\r\n\r\n\\summary\r\n\r\nPrerequisites:\r\n\r\n\\endsummary\r\n\r\n- Number theory: modular arithmetic basics\r\n\r\n\\enddropdown\r\n\r\n# Sun Tzu\'s puzzle\r\n\r\nYou might\'ve seen Sun Tzu\'s name attached to quotes such as\r\n\r\n> Appear weak when you are strong, and strong when you are weak.\r\n\r\nor\r\n\r\n> The supreme art of war is to subdue the enemy without fighting.\r\n\r\nor maybe even\r\n\r\n> Whatever you do, don\'t reveal all your techniques in a YouTube video, you fool, you moron.\r\n\r\nThis is the same trap I fell into initially—it\'s not the Sun Tzu you\'re probably thinking of[^sun tzu clarification]. This Sun Tzu was a mathematician, not a war strategist, who in the fifth century CE asked:\r\n\r\n> 今有物，不知其数。三、三数之，剩二；五、五数之，剩三；七、七数之，剩二。问物几何？[^chinese source]\r\n\r\nSorry, wrong language.\r\n\r\n> There are certain things whose number is unknown. If we count them by threes, we have two left over; by fives, we have three left over; and by sevens, two are left over. How many things are there?\r\n\r\nThis puzzle eventually spawned the Chinese remainder theorem, which among many other things is now a widely-adopted optimization for multiple algorithms like RSA decryption (one of the most popular ciphers that help you secure your Internet traffic and more[^NordVPN]) and the Fast Fourier Transform (magic that turns weird squiggles into nicer-looking squiggles, which is useful in pretty much every part of science[^doctor\'s handwriting])[^applications source]. The Chinese remainder theorem states:\r\n\r\n\\thm\r\n\r\nIf \\\\(m_1, m_2, \\dots, m_p\\\\) are pairwise coprime integers, then the system\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\nx &\\equiv a_1 \\mod m_1 \\\\\\\\\r\nx &\\equiv a_2 \\mod m_2 \\\\\\\\\r\n&\\vdots \\\\\\\\\r\nx &\\equiv a_p \\mod m_p\r\n\\end{alignat\\*}\r\n\\\\]\r\nhas a unique solution, \\\\(x \\equiv A \\mod M\\\\), where \\\\(M = m_1 m_2 \\dots m_p\\\\).\r\n\r\n\\endthm\r\n\r\n# A formula to solve the puzzle\r\n\r\nIn this puzzle posed by Sun Tzu (The Second), our moduli 3, 5, and 7 are coprime, so there is indeed a solution to this system of congruences:\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\nx &\\equiv 2 \\mod 3 \\\\\\\\\r\nx &\\equiv 3 \\mod 5 \\\\\\\\\r\nx &\\equiv 2 \\mod 7.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nBut wait! The Chinese remainder theorem never specified *how* to solve our problem, only that a solution exists. The classic joke\r\n\r\n> A physicist, a mathematician and an engineer stay in a hotel.\r\n\r\n> The engineer is awakened by a smell and gets up to check it. He finds a fire in the hallway, sees a nearby fire extinguisher and after extinguishing it, goes back to bed.\r\n\r\n> Later that night, the physicist gets up, again because of the smell of fire. He quickly gets up and sees the fire in the hallway. After calculating air pressure, flame temperature and humidity as well as distance to the fire and projected trajectory, he extinguishes the fire with the least amount of fluid.\r\n\r\n> Finally, the mathematician awakes, only again to find a fire in the hallway. He instantly sees the extinguisher and thinks, \"A solution exists!\", and heads back into his room.[^solution exists joke source]\r\n\r\nhas never been more real. Luckily, it turns out there is actually a formula for finding the solution. I will solve the puzzle using this formula first, and then explain the important part: the intuition behind why it works.\r\n\r\n\\thm\r\n\r\nA system of congruences which has been guaranteed a solution by the Chinese remainder theorem is solved by\r\n\\\\[\r\nx \\equiv \\sum_{i = 1}^{p}{a_i M_i s_i} \\mod M,\r\n\\\\]\r\nwhere \\\\(a_i\\\\) are the remainders in the system of congruences, \\\\(M_i = M / m_i\\\\), and \\\\(s_i\\\\) is the multiplicative inverse of \\\\(M_i \\mod m_i\\\\).\r\n\r\n\\endthm\r\n\r\nMultiplicative inverse? What?\r\n\r\n## A quick detour to multiplicative inverses\r\n\r\nWithout getting too thick into the weeds, a **multiplicative inverse** is basically a fancy abstract algebra way of saying \"reciprocal\". Remember fractions? \\\\(\\frac{1}{2}\\\\) is the reciprocal or multiplicative inverse of \\\\(2\\\\), *because multiplying \\\\(\\mathit{\\frac{1}{2}}\\\\) and \\\\(\\mathit{2}\\\\)[^funky 2] gives you \\\\(\\mathit{1}\\\\)*. \\\\(\\frac{1}{4}\\\\) is the multiplicative inverse of \\\\(4\\\\), because \\\\(\\frac{1}{4} \\cdot 4 = 1\\\\)[^why 1?]. Formally[^fourth grade math], if \\\\(s\\\\) is the reciprocal or multiplicative inverse of \\\\(x\\\\), then\r\n\r\n\\\\[\r\nxs \\equiv 1.\r\n\\\\]\r\n\r\nIn the context of modular arithmetic, multiplicative inverses aren\'t fractions anymore (since modular arithmetic is really only defined for integers), but the formula works the exact same:\r\n\r\n\\thm\r\n\r\nIf \\\\(s\\\\) is the multiplicative inverse of \\\\(x\\\\) mod \\\\(m\\\\), then\r\n\r\n\\\\[\r\nxs \\equiv 1 \\mod m.\r\n\\\\]\r\n\r\n\\endthm\r\n\r\nFor example, \\\\(3\\\\) is the multiplicative inverse to \\\\(2 \\mod 5\\\\), since \\\\(2 \\cdot 3 \\equiv 1 \\mod 5\\\\). We will see why this is so useful when we get to the intuition part.\r\n\r\n## Back to the solution\r\n\r\nSo again, let\'s apply this formula and then explain the intuition afterwards.\r\n\r\n\\\\(M\\\\), the product of our moduli, is \\\\(3 \\cdot 5 \\cdot 7 = 105\\\\). We can then find our \\\\(M_i\\\\):\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\n&M_1 = 105 / 3 = 35 \\\\\\\\\r\n&M_2 = 105 / 5 = 21 \\\\\\\\\r\n&M_3 = 105 / 7 = 15.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nNow, our multiplicative inverses \\\\(s_i\\\\) are the only parts of the formula we have yet to find. Remembering our definition from earlier, and the fact that \\\\(s_i\\\\) is the multiplicative inverse of \\\\(M_i \\mod m_i\\\\), we have\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{2}\r\n&&M_1 s_1 &\\equiv 1 \\mod m_1 \\\\\\\\\r\n&\\implies &35s_1 &\\equiv 1 \\mod 3 \\\\\\\\\r\n&\\implies &2s_1 &\\equiv 1 \\mod 3 \\\\\\\\\r\n&\\implies &s_1 &= 2.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nSimilarly,\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{2}\r\n&&21s_2 &\\equiv 1 \\mod 5 \\\\\\\\\r\n&\\implies &1s_2 &\\equiv 1 \\mod 5 \\\\\\\\\r\n&\\implies &s_2 &= 1 \\\\\\\\\r\n&&15s_3 &\\equiv 1 \\mod 7 \\\\\\\\\r\n&\\implies &1s_3 &\\equiv 1 \\mod 7 \\\\\\\\\r\n&\\implies &s_3 &= 1.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nSo now that we have all the pieces of the formula, our final solution is\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\nx &\\equiv \\ 2 \\cdot 35 \\cdot 2 + 3 \\cdot 21 \\cdot 1 + 2 \\cdot 15 \\cdot 1 \\\\\\\\\r\n&\\equiv \\ 233 \\equiv \\ 23 \\mod 105.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nCheck for yourself: 23 does indeed solve the puzzle!\r\n\r\n# The intuition behind the formula\r\n\r\n## Why pairwise coprime?\r\n\r\nLet\'s first explore why the condition that all the moduli have to be pairwise coprime is so important. Recall that the multiplicative inverse of \\\\(x \\mod m\\\\), \\\\(s\\\\), satisfies\r\n\r\n\\\\[\r\nxs \\equiv 1 \\mod m.\r\n\\\\]\r\n\r\nBut what happens if \\\\(x\\\\) and \\\\(m\\\\) share a common factor, i.e. are *not* coprime? For example, \\\\(x = 2\\\\) and \\\\(m = 4\\\\). How would you find \\\\(s\\\\) such that\r\n\r\n\\\\[\r\n2s \\equiv 1 \\mod 4?\r\n\\\\]\r\n\r\nYou can\'t, no matter how much time you waste guessing and checking. This is why it\'s so important to have all the moduli coprime to each other: having divided out \\\\(m_1\\\\), \\\\(M_1\\\\) only has factors from \\\\(m_2\\\\) and \\\\(m_3\\\\). *Both of these are coprime to \\\\(\\mathit{m_1}\\\\)*, so intuitively \\\\(M_1\\\\), made up of only these two numbers, must also be coprime to \\\\(m_1\\\\)[^coprime intuition example]. The big implication of all this is that\r\n\r\n\\\\[\r\nM_i s_i \\equiv 1 \\mod m_i\r\n\\\\]\r\n\r\ndoesn\'t end up in one of those unsolvable situations, *thus \\\\(\\mathit{s_i}\\\\) is guaranteed to exist* and there is a solution.\r\n\r\n## Where do the terms in the formula come from?\r\n\r\nWith that out of the way, let\'s look at the first of the three identical terms that make up our final solution:\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\na_1 M_1 s_1 &= 2 \\cdot 35 \\cdot 2.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nLet\'s check out \\\\(M_1 s_1\\\\) first. If we recall the definition of multiplicative inverses (again), \\\\(M_1 s_1 \\equiv 1 \\mod m_i\\\\). Then, \\\\(a_1 = 2\\\\) multiplies this remainder to the 2 that we see in the first line of the puzzle, so that our first term \\\\(a_1 M_1 s_1 \\equiv 2 \\mod 3\\\\) satisfies our first congruence.\r\n\r\nSimilarly, \\\\(M_2 s_2 \\equiv 1 \\mod m_2\\\\), and \\\\(a_2 = 3\\\\) multiplies this remainder so \\\\(a_2 M_2 s_2 \\equiv 3 \\mod 5\\\\), satisfying our second congruence. See why the multiplicative inverse creating 1s is so useful now? This multiplication wouldn\'t be nearly as straightforward with any other number besides 1.\r\n\r\nAnd similarly, \\\\(M_3 s_3 \\equiv 1 \\mod m_3\\\\), and \\\\(a_3 = 2\\\\) multiplies this remainder so \\\\(a_3 M_3 s_3 \\equiv 2 \\mod 7\\\\), satisfying our third congruence.\r\n\r\nNow we have three terms, each satisfying one of the congruences in the system. There is one last step—adding these three terms into one that satisfies *all* the congruences. And this won\'t mess up each other\'s remainders, because \\\\(M_i\\\\) is made up of and divisible by the other two moduli. This means that, for example, \\\\(a_1 M_1 s_1 \\equiv 0 \\mod m_2\\\\) and \\\\(a_1 M_1 s_1 \\equiv 0 \\mod m_3\\\\), so adding this first term adds 0 to the remainders for the second and third congruences. Let\'s see this in action:\r\n\r\n\\\\[\r\n\\begin{array}{ccccc}\r\n&a_1 M_1 s_1 &+ &a_2 M_2 s_2 &+ &a_3 M_3 s_3& \\\\\\\\[3pt]\r\n= &2 &+ &0 &+ &0 &&\\mod 3 \\p{.} \\\\\\\\[3pt]\r\n= &0 &+ &3 &+ &0 &&\\mod 5 \\p{.} \\\\\\\\[3pt]\r\n= &0 &+ &0 &+ &2 &&\\mod 7.\r\n\\end{array}\r\n\\\\]\r\n\r\nSee how we keep our perfect remainder setup because we\'re able to just add 0s? With all that, we\'ve finally crafted the perfect number, the solution to our puzzle[^induction on more terms].\r\n\r\n# A bit on RSA\r\n\r\nDecrypting RSA ciphertext relies on calculating some \\\\(m\\\\) for\r\n\r\n\\\\[\r\nm \\equiv c^d \\mod pq,\r\n\\\\]\r\n\r\nwhere \\\\(c\\\\) is a numerical representation of the ciphertext and \\\\(m\\\\) is the plaintext version the receiver wants to get. \\\\(d\\\\) and \\\\(pq\\\\) are really big numbers, however, and can make this calculation very slow. The Chinese remainder theorem, in reverse of what we just did, allows us to \"unsolve\" this equation into the system\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\nm &\\equiv a_1 \\mod p \\\\\\\\\r\nm &\\equiv a_2 \\mod q,\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nwhere \\\\(a_1\\\\) and \\\\(a_2\\\\) can be calculated relatively quickly using some other number theory stuff[^rsa decryption calc] and will be much smaller than \\\\(c^d\\\\).\r\n\r\nLook familiar? Instead of taking forever to calculate \\\\(c^d \\mod pq\\\\), we can just solve this new puzzle for \\\\(m\\\\) with smaller and faster numbers across the board. This makes decryption about 3–4 times as fast as before[^speedup sources], and this optimization is used almost ubiquitously in modern RSA implementations.\r\n\r\nAlthough admittedly, \"modern RSA implementations\" might start to sound like a contradiction soon…\r\n\r\n---\r\n\r\n*By the way, I give this blog post credit for carrying my midterm…when you spend hours writing about a formula, you won\'t exactly have to memorize it.*\r\n\r\n[^calculation source]: Calculated from [here](https://www.cscjournals.org/manuscript/Journals/IJCSS/Volume10/Issue5/IJCSS-1289.pdf), with the many naive assumptions that we used a 2048-bit key instead of 4096, that doing so halved the time, and that loading this page started a new TCP connection which invoked a TLS handshake on a version prior to 1.3.\r\n[^sun tzu clarification]: Admittedly, this Sun Tzu is often romanized as \"Sunzi\".\r\n[^chinese source]: Painfully extracted from [here](https://ctext.org/sunzi-suan-jing/juan-xia/zhs).\r\n[^NordVPN]: This blog post was not sponsored by NordVPN.\r\n[^doctor\'s handwriting]: (especially for decoding doctors\' handwriting)\r\n[^applications source]: \\*sigh\\* From [Wikipedia](https://en.wikipedia.org/wiki/Chinese_remainder_theorem#Applications).\r\n[^solution exists joke source]: From [Proof Wiki](https://proofwiki.org/wiki/ProofWiki:Jokes/Physicist_Mathematician_and_Engineer_Jokes/Burning_Hotel). Also, the Proof Wiki keeping an organized catalog of jokes is just about the most mathematician thing ever.\r\n[^funky 2]: I\'m sorry if this \'\\\\(\\mathit{2}\\\\)\' hurts your eyes, `\\mathit` just hates eyeballs.\r\n[^why 1?]: It must equal 1 because 1 is the multiplicative identity, aka the number that you multiply by to not change anything, and the mathematicians decided that having the inverse make the identity was very useful.\r\n[^fourth grade math]: Yes, I know this is fourth grade math.\r\n[^coprime intuition example]: Example: \\\\(M_1 = 35\\\\) came from dividing \\\\(M\\\\) by \\\\(m_1 = 3\\\\). Thus, the only divisors remaining in \\\\(M_1\\\\) are from the other two factors of \\\\(M\\\\),  5 and 7, both of which are coprime to 3 by the CRT\'s condition. Thus, made up of only these two numbers, \\\\(M_1\\\\) must also be coprime to \\\\(m_1 = 3\\\\).\r\n[^induction on more terms]: This holds for any number of congruences/terms greater than or equal to 2, since the CRT is all about combining multiple congruences into one. If we had 8 congruences, for example, we could solve the mini-system that is the first 2, then the next two, and so on until we end up with 4. Then, rinse and repeat until we get 1 again. In addition, pairwise coprime will hold all the way through as long as it holds for the initial 8 congruences.\r\n[^rsa decryption calc]: If you know more number theory: start with \\\\(m \\equiv c^d \\mod p\\\\). Then, just like dividing \\\\(x\\\\) by \\\\(y\\\\) to get \\\\(x = ky + \\t{remainder}\\\\) for integer \\\\(k\\\\), we do \\\\(d = k \\phi(p) + (d \\mod \\phi(p))\\\\), where \\\\(\\phi\\\\) is Euler\'s totient, to get \\\\(c^d \\equiv c^{k \\phi(p) + (d \\mod \\phi(p))}\\\\) \\\\(\\equiv (c^{\\phi(p)})^k \\cdot c^{d \\mod \\phi(p)} \\mod p\\\\). Euler\'s theorem says \\\\(c^{\\phi(p)} \\equiv 1 \\mod p\\\\), so \\\\(m \\equiv c^d \\equiv c^{d \\mod \\phi(p)} \\mod p\\\\), which is our first congruence (see how the exponent is smaller than our original \\\\(d\\\\)?). Then, repeat with \\\\(q\\\\). [Example](https://youtu.be/6ytuvahX1tQ?t=192) (which also reduces \\\\(c \\mod p\\\\) first).\r\n[^speedup sources]: Sources: [here](https://www.cscjournals.org/manuscript/Journals/IJCSS/Volume10/Issue5/IJCSS-1289.pdf) and [here](https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=28f21d6f441d037c2495276561a58bf622f58783).',NULL,1,3),(98,'2024-05-09 07:17:09','Synchronization, semaphores, and the sleeping barber','synchronization-semaphores-and-the-sleeping-barber','BREAKING DOWN A CLASSIC PROBLEM LIKE NEVER BEFORE','Have you ever stayed up at night wondering what happens if two people go into a barbershop at the exact same time, causing the barber\'s brain to spontaneously combust and render the local town uninhabitable for years from neuron fallout?\r\n\r\nJust me?\r\n\r\nWell, \\*in case\\* that pops into your mind someday, just remember…the semaphore will always be there for you.\r\n\r\n\\dropdown\r\n\r\n\\summary\r\n\r\nWarning & Prerequisites:\r\n\r\n\\endsummary\r\n\r\nI\'ll try to introduce everything from the ground up, but I still recommend having some basic knowledge of concurrency concepts before reading. Also, the point of this post isn\'t to just teach terminology (even though I\'ll squeeze in everything I can)—hopefully, I can show you *why* synchronization is important and *how* it solves various issues.\r\n\r\nPrerequisites:\r\n\r\n- Basic knowledge of a C-like language (I\'m surprised how much I was able to shave down the prereqs…)\r\n- A willingness to tolerate bad puns\r\n\r\n\\enddropdown\r\n\r\n# Threads, data races, and race conditions\r\n\r\nYour poor computer is always trying to manage many things at a time. 74 tabs of Firefox[^firefox], Slack ready to jumpscare you with its notification sound, Windows Defender sneakily eating away in the background. Each of these things packages the code it needs to run into a **thread**, and then adds this thread to your computer\'s todo list. Your computer switches between these threads hundreds of times a second (**context switching**), running a tiny bit of code from each at a time. This *illusion* of multitasking allows your computer to handle all these things at the same time, a concept called **concurrency**[^parallelism].\r\n\r\nBut sometimes your computer might switch at a very unfortunate time. Consider this basic example: the table below shows two threads that run their own pieces of code, along with the Assembly (pseudo) code that your computer actually runs. They are both trying to increment the same variable in memory, `x`.\r\n\r\n|  | <span data-align-center>Thread 1</span> | <span data-align-center>Thread 2</span> |\r\n|:---:|---|---|\r\n| C | <pre><code>x = x + 1;</code></pre> | <pre><code>x = x + 5;</code></pre> |\r\n| Pseudo-<br>Assembly | <pre><code>load x from memory into temp<br>add 1 to temp<br>save temp back to x in memory</code></pre> | <pre><code>load x from memory into temp<br>add 5 to temp<br>save temp back to x in memory</code></pre> |\r\n\r\nWhat happens if your computer randomly pauses thread 1 right before its last line of Assembly[^assembly] and switches to thread 2? Let\'s trace every step:\r\n\r\n| Step | <span data-align-center>Thread 1</span> | <span data-align-center>Thread 2</span> | `t1` | `t2` | `x` (in memory) |\r\n|:---:|---|---|:---:|:---:|:---:|\r\n| 1 | `load x into temp t1` | <span data-align-center>-</span> | 0 |  | 0 |\r\n| 2 | `add 1 to t1` | <span data-align-center>-</span> | 1 |  | 0 |\r\n| 3 | <span data-align-center>-</span> | `load x into temp t2` | 1 | 0 | 0 |\r\n| 4 | <span data-align-center>-</span> | `add 5 to t2` | 1 | 5 | 0 |\r\n| 5 | <span data-align-center>-</span> | `save t2 back to x` | 1 | 5 | 5 |\r\n| 6 | `save t1 back to x` | <span data-align-center>-</span> | 1 | 5 | 1 |\r\n\r\nSee how we did both a `+1` and a `+5`, but ended up with only the `+1` instead of `+6`? This would not have been a problem with just a single thread, but now with two there\'s the potential for unlucky switches like this. This problem is called a **data race**: multiple threads try to access some shared resource like a variable in memory at the \"same time\" (i.e. not letting one finish before starting the other), *and at least one of them is trying to write*[^data race with read].\r\n\r\nThere\'s also a separate term called a **race condition**, which generally (the semantics are still up for debate) refers to a larger-scale error caused by things like mistimed switches between whole lines of C instead of Assembly, or not controlling which thread starts first when we needed to. We\'ll see examples of these larger-scale race conditions when we get to the sleeping barber.\r\n\r\nBut regardless of whether it\'s a data race or a race condition, semaphores are here to save the day.\r\n\r\n# What is a semaphore?\r\n\r\nImplemented in your operating system, semaphores are a versatile tool[^more synchronization tools] for **synchronizing** threads, or making them wait when they feel the urge to make a badly-timed switch. Usually, **a semaphore is just a whole number that can\'t go negative**, and that threads can increment and decrement (semaphores have a special guarantee by your OS/hardware that it won\'t switch in the middle of *these* operations). If a thread tries to decrement when the semaphore is already 0, it gets stuck, which is how we get threads to wait (\"**block**\") for others to finish and increment the semaphore before switching. It\'s like a hall pass that only lets one kid vape in the bathroom at a time, and taking the hall pass is like decrementing it to 0 (forcing other people to wait) while returning it is incrementing it back to 1[^other names for up/down]. This might still sound super abstract, so let\'s look at that previous example, but with a semaphore to control switching:\r\n\r\n|  | <span data-align-center>Thread 1</span> | <span data-align-center>Thread 2</span> |\r\n|:---:|---|---|\r\n| C | <pre><code>sem.down();<br>x = x + 1;<br>sem.up();</code></pre> | <pre><code>sem.down();<br>x = x + 5;<br>sem.up();</code></pre> |\r\n| Pseudo-<br>Assembly | <pre><code>sem.down()<br>load x from memory into t1<br>add 1 to t1<br>save t1 back to x in memory<br>sem.up()</code></pre> | <pre><code>sem.down()<br>load x from memory into t2<br>add 5 to t2<br>save t2 back to x in memory<br>sem.up()</code></pre> |\r\n\r\n|  | <span data-col-width=\"35%\" data-align-center>Thread 1</span> | <span data-col-width=\"35%\" data-align-center>Thread 2</span> | `sem` | `t1` | `t2` | `x` |\r\n|:---:|---|---|:---:|:---:|:---:|:---:|\r\n| 0 |  |  | 1 |  |  | 0 |\r\n| 1 | `sem.down()` | <span data-align-center>-</span> | 0 |  |  | 0 |\r\n| 2 | `load x into t1` | <span data-align-center>-</span> | 0 | 0 |  | 0 |\r\n| 3 | `add 1 to t1` | <span data-align-center>-</span> | 0 | 1 |  | 0 |\r\n| 4 | <span data-align-center>-</span> | `sem.down()`—BLOCKED! | 0 | 1 |  | 0 |\r\n| 5 | `save t1 to x` | <span data-align-center>- blocked -</span> | 0 | 1 |  | 1 |\r\n| 6 | `sem.up()` | <span data-align-center>- blocked -</span> | 1 | 1 |  | 1 |\r\n| 7 | <span data-align-center>-</span> | `sem.down()` | 0 | 1 |  | 1 |\r\n| 8 | <span data-align-center>-</span> | `load x into t1` | 0 | 1 | 1 | 1 |\r\n| 9 | <span data-align-center>-</span> | `add 5 to t1` | 0 | 1 | 6 | 1 |\r\n| 10 | <span data-align-center>-</span> | `save t1 to x` | 0 | 1 | 6 | 6 |\r\n| 11 | <span data-align-center>-</span> | `sem.up()` | 1 | 1 | 6 | 6 |\r\n\r\nBy surrounding our code with this semaphore logic, we make sure thread 2 has to wait when thread 1 has already `down()`ed to 0 and is working. Then, when thread 1 is done, it `up()`s, allowing or \"signaling\" thread 2 to finally begin. The result of all this is that we actually get `+6` now, as we wanted. Also note that we initialized this semaphore with a value of 1 so a thread can start in the first place, and that starting with thread 1 was just an arbitrary choice on my part—the OS can choose a random thread to start with.\r\n\r\nA block of code like this that must be finished in one go and cannot be interrupted (aka **atomic**[^atomicity etymology][^semaphores are atomic]) in order to avoid an error like a data race or a race condition is called a **critical region**. In most cases, including this one, critical regions are blocks of code that access a shared resource like a variable. And our semaphores only need to protect critical regions, not the whole program, because why bother having multiple threads if only one can go at a time *ever*? (It just so happens that in this simple example, there is no more code besides the critical region.)\r\n\r\n# How are semaphores used?\r\n\r\nWhile functionally the same, it might be convenient for teaching purposes (as a sort of intuition guide) to think of semaphores as typically being used for two kinds of waits: 1. waiting for exclusive access to a critical region, or 2. waiting for a resource other than access to a critical region.\r\n\r\nThe example earlier showed the first case: a semaphore `down()`s before the critical region, and `up()`s after to signal that access rights are up for sale again. You may also realize that these semaphores, like the one in the example, can only ever be 0 or 1, because of how our code was set up—such semaphores are called **binary semaphores**. In addition, a binary semaphore used for this first case of ensuring *mut*ually *ex*clusive access to a critical region is also known as a **mutex** or lock.\r\n\r\nIn the second case (which we haven\'t seen yet), these semaphores could be either binary or **counting**, the latter being a semaphore that isn\'t stopped from exceeding 1 by our program logic (like having 5 hall passes). Here, we get to choose (based on our needs) to wait for an `up()` signal from *any* thread that is making *any* resource available, even letting us `down()` only in one thread and `up()` only in another. For example, a web server\'s main (\"dispatch\") thread will `down()` a counting semaphore when it needs a new worker thread to deal with an incoming connection. This will either succeed immediately like a normal decrement if the semaphore is not 0 (worker threads are available!), or it will force the server to wait until a worker threads `up()`s to signal that they\'re free again. This *synchronizes* the dispatch and worker threads, making sure the server doesn\'t immediately hand off a connection to a still-busy worker the first instant it switches to the dispatch thread.\r\n\r\n\\thm\r\n\r\nTo recap, computers handle many things at once by switching randomly between threads. However, code that share resources between threads may require specific switch timings, like if two threads need to write to shared memory without being interrupted by each other, or if a thread needs to wait for another to free up a shared resource before continuing. Synchronization tools like semaphores make computers wait for these specific switch timings so nothing gets messed up.\r\n\r\n\\endthm\r\n\r\n# The sleeping barber\r\n\r\nWith the intro out of the way (yes, that was all intro…\\*looks at scroll bar nervously\\*), let\'s look at the sleeping barber, a classic and more complicated problem formulated by Dijkstra (why is half of CS just him?):\r\n\r\n\\thm\r\n\r\nThere exists a barbershop with \\\\(n\\\\) chairs in the waiting room.\r\n\r\nWhen the barber finishes a haircut, they move on to another customer, or fall asleep if there are none.\r\n\r\nWhen a customer arrives, they must wake the barber if asleep. Otherwise, if the barber is already busy, they must find a waiting room chair to sit in. If the waiting room is full, they leave.[^modified problem]\r\n\r\n\\endthm\r\n\r\nTo hopefully provide a more unique look at this done-to-death problem, I will build our way up from a naive implementation with no synchronization and fix issues like data races and race conditions along the way. This is not how you should approach writing actual code—I\'m just trying to demonstrate more clearly *why* we need synchronization.\r\n\r\n## Naive \"solution\" with no synchronization\r\n\r\nLet\'s treat this as a computer simulation. Our barber will be a single `barberThread` and each customer will be their own `customerThread`, allowing us to simulate everyone \"at the same time\" (remember the *illusion* of multitasking!) by switching back and forth between threads really fast[^universe simulation]. Let\'s first try to get a basic idea of what our code might look like, with no regard to synchronization whatsoever[^implementation may vary]:\r\n\r\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <span data-align-center>Globals</span>                                                                                                                                                                                                                                                                                                                                                                       |\r\n+===========================================================================================================================================================================================================+==================================================================================================================================================================================================+\r\n| <pre><code>int waitingCustomers = 0;<br>int freeSeats = n;<br>bool barberReady = 0;</code></pre>                                                                                                                                                                                                                                                                                                             |\r\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <span data-align-center>**barberThread**</span>                                                                                                                                                           | <span data-align-center>**customerThread**</span>                                                                                                                                                |\r\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <pre data-col-width=\"50%\" data-align-top><code>while (true) {<br>  while (waitingCustomers < 1) {}<br>  waitingCustomers--;<br>  freeSeats++;<br>  barberReady = true;<br>  // cut hair<br>}</code></pre> | <pre><code>if (freeSeats > 0) {<br>  freeSeats--;<br>  waitingCustomers++;<br>  while (!barberReady) {}<br>  barberReady = false;<br>  // get haircut<br>} else {<br>  return;<br>}</code></pre> |\r\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n\r\nIn this non-semaphored version, we have empty `while` loops to simulate sleeping and waiting for barber and customer respectively, and you might wonder: what\'s wrong with that? Why do we need semaphores when we can just wait in a `while` loop?\r\n\r\nWell, let me show you a what could go wrong with just two customers. I\'ll introduce a race condition here by switching threads between two lines of C. And for brevity, we will assume the barber has just set `barberReady` to `true`[^c booleans] at step 0:\r\n\r\n|  | <span data-col-width=\"40%\" data-align-center>Customer 1</span> | <span data-col-width=\"40%\" data-align-center>Customer 2</span> | `barberReady` |\r\n|:---:|---|---|:---:|\r\n| 0 |  |  | `true` |\r\n| 1 | `waitingCustomers++` | <span data-align-center>-</span> | `true` |\r\n| 2 | `while (!barberReady) {}` | <span data-align-center>-</span> | `true` |\r\n| 3 | <span data-align-center>-</span> | `waitingCustomers++` | `true` |\r\n| 4 | <span data-align-center>-</span> | `while (!barberReady) {}` | `true` |\r\n| 5 | <span data-align-center>-</span> | `barberReady = false` | `false` |\r\n| 6 | `barberReady = false` | <span data-align-center>-</span> | `false` |\r\n| 7 | Get haircut | <span data-align-center>-</span> | `false` |\r\n| 8 | <span data-align-center>-</span> | Get haircut | `false` |\r\n\r\nUh oh! Both customers are trying to get a haircut at the same time; the barber\'s brain defenestrates itself; the customers get into a fistfight; WW3 erupts.\r\n\r\nTake a look at steps 2 and 3. Customer 1 was ready to get their haircut, but the simulation paused them before they had the chance to set `barberReady` to false. Then, customer 2 was let in. Since `barberReady` is still true, customer 2 gets past the `while` loop too, and now both customers are on the inevitable spiral towards `// get haircut`.\r\n\r\n## Revision 1: use binary semaphore to synchronize customers with barber\r\n\r\nSo our `while` loop has failed us because our computer decided to switch right after it…but remember how we dealt with unlucky switches? We could use a mutex to protect this critical region from such a race condition.\r\n\r\nBut there\'s an easier solution! Notice how the barber is a resource we are waiting to become available—we wait on (the race-condition-prone) `while(!barberReady)`, and the barber signals `barberReady = true` when they\'re ready. Sound familiar? How about we wait on `down()`, which is atomic and negates this race condition, and have the barber signal `up()` when they\'re ready? It\'s our second use case! In fact, we can replace both the while loop *and* the subsequent decrement with `down()`, since `down()` does both waiting and decrementing![^busy wait]\r\n\r\nLet\'s try the same situation now with our updated code:\r\n\r\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <span data-align-center>Globals</span>                                                                                                                                                                                                                                                                                                                                      |\r\n+=========================================================================================================================================================================================================+===================================================================================================================================================================+\r\n| <pre><code>int waitingCustomers = 0;<br>int freeSeats = n;<br>sem barberReady = 0;</code><pre>                                                                                                                                                                                                                                                                              |\r\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <span data-align-center>**barberThread**</span>                                                                                                                                                         | <span data-align-center>**customerThread**</span>                                                                                                                 |\r\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <pre data-col-width=\"50%\" data-align-top><code>while (true) {<br>  while (waitingCustomers < 1) {}<br>  waitingCustomers--;<br>  freeSeats++;<br>  barberReady.up();<br>  // cut hair<br>}</code></pre> | <pre><code>if (freeSeats > 0) {<br>  freeSeats--;<br>  waitingCustomers++;<br>  barberReady.down()<br>  // get haircut<br>} else {<br>  return;<br>}</code></pre> |\r\n+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n\r\n|  | <span data-col-width=\"40%\" data-align-center>Customer 1</span> | <span data-col-width=\"40%\" data-align-center>Customer 2</span> | `barberReady` |\r\n|:---:|---|---|:---:|\r\n| 0 |  |  | 1 |\r\n| 1 | `waitingCustomers++` | <span data-align-center>-</span> | 0 |\r\n| 2 | `barberReady.down()` | <span data-align-center>-</span> | 0 |\r\n| 3 | <span data-align-center>-</span> | `waitingCustomers++` | 0 |\r\n| 4 | <span data-align-center>-</span> | `barberReady.down()`—BLOCKED! | 0 |\r\n| 5 | Get haircut | <span data-align-center>- blocked -</span> | 0 |\r\n\r\nSee how this fixes the race condition? Customer 2 can no longer catch the barbershop in a moment when customer 1 has finished waiting but has not yet set `barberReady` to 0 yet, no matter how quickly they try to barge in after step 2. Instead, customer 2 will have to keep waiting, blocked and sad, until the barber finishes the haircut and eventually loops back around to `barberReady.up()`[^deadlock].\r\n\r\nAlso notice that `barberReady` is a binary semaphore here, which makes sense since there\'s only one barber resource available, so there\'s no reason for our semaphore to exceed 1 (we\'ll see later when it does need to exceed 1). In addition, it was initialized to 0 instead of 1 as a mutex would—if we had initialized to 1 and the barber thread happened to run first, we would get a value of 2 (because remember that nothing is stopping a binary semaphore from becoming a counting semaphore except our own code), which could let two customers `down()`—world war 3[^note on zero init].\r\n\r\n## Revision 2: use counting semaphore to synchronize barber with customers\r\n\r\nBut notice that the other `while` loop with `waitingCustomer` still faces the same problem, so we want to perform the same fix:\r\n\r\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <span data-align-center>Globals</span>                                                                                                                                                                                                                                                                                                         |\r\n+=========================================================================================================================================================================+======================================================================================================================================================================+\r\n| <pre><code>sem waitingCustomers = 0;<br>int freeSeats = n;<br>sem barberReady = 0;</code></pre>                                                                                                                                                                                                                                                |\r\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <span data-align-center>**barberThread**</span>                                                                                                                         | <span data-align-center>**customerThread**</span>                                                                                                                    |\r\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <pre data-col-width=\"50%\" data-align-top><code>while (true) {<br>  waitingCustomers.down();<br>  freeSeats++;<br>  barberReady.up();<br>  // cut hair<br>}</code></pre> | <pre><code>if (freeSeats > 0) {<br>  freeSeats--;<br>  waitingCustomers.up();<br>  barberReady.down()<br>  // get haircut<br>} else {<br>  return;<br>}</code></pre> |\r\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n\r\nThe only difference this time is that customers are now the resource the barber waits for, and we can have multiple customers, each of which can increment `waitingCustomers`. Thus, as a natural consequence of how our problem is set up, `waitingCustomers` is a counting semaphore, which helps us track the number of customers (resources) available.\r\n\r\nNow is a good time to summarize some concepts in a table (*do not memorize*; you will never need to actually consult arbitrary categorizations like this when you write code. This is only here to hopefully strengthen intuition and clear up any muddiness.):\r\n\r\n|  | <span data-col-width=\"40%\">Binary</span> | <span data-col-width=\"40%\">Counting</span> |\r\n|:---:|:---:|:---:|\r\n| **Case 1:<br>mutex** | Lets one set of access rights<br>be claimed; wait when<br>access rights not available<br>**Example**: every mutex ever | - |\r\n| **Case 2:<br>waiting<br>for available<br>resource(s)** | Lets a resource other than<br>access rights be claimed; wait<br>when resource not available<br>**Example**: `barberReady` lets<br>the one barber be claimed | Lets multiple resources other<br>than access rights be claimed;<br>wait when resources run out<br>**Examples**: `waitingCustomers`<br>lets multiple customers be up<br>for claiming; server lets<br>multiple worker threads<br>be claimed by connections |\r\n\r\n## Revision 3: protect shared variable with mutex\r\n\r\nOur last issue has potentially been an elephant in the room: the global `freeSeats` variable could suffer the same Assembly-level data race that `x` did at the very beginning of this blog post.\r\n\r\nQuestion: should we use a mutex, or the same \"waiting on a resource\" second case that we\'ve been using up to this point?\r\n\r\n\\dropdown\r\n\r\n\\summary\r\n\r\nDon\'t click until you\'ve chosen an answer.\r\n\r\n\\endsummary\r\n\r\nIf you answered #2, try to sketch up that same fix for `freeSeats` and teach yourself why it doesn\'t work.\r\n<br><br>\r\n~~also the answer was literally in the heading smh~~\r\n\r\n\\enddropdown\r\n\r\nWe don\'t have anything waiting on `freeSeats` to be \"available\" or anything—the customer leaves instead of waits. We just need to wait for exclusive access rights to prevent a data race, so a mutex is the way to go here:\r\n\r\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <span data-align-center>Globals</span>                                                                                                                                                                                                                                                                                                                                                                                                                             |\r\n+===================================================================================================================================================================================================================================+================================================================================================================================================================================================================================+\r\n| <pre><code>sem waitingCustomers = 0;<br>int freeSeats = n;<br>sem barberReady = 0;<br>sem freeSeatsMutex = 1;</code></pre>                                                                                                                                                                                                                                                                                                                                         |\r\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <span data-align-center>**barberThread**</span>                                                                                                                                                                                   | <span data-align-center>**customerThread**</span>                                                                                                                                                                              |\r\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <pre data-col-width=\"50%\" data-align-top><code>while (true) {<br>  waitingCustomers.down();<br>  freeSeatsMutex.down();<br>  freeSeats++;<br>  freeSeatsMutex.up();<br>  barberReady.up();<br>  // cut hair<br>}<br></code></pre> | <pre><code>if (freeSeats > 0) {<br>  freeSeatsMutex.down();<br>  freeSeats--;<br>  freeSeatsMutex.up();<br>  waitingCustomers.up();<br>  barberReady.down()<br>  // get haircut<br>} else {<br>  return;<br>}<br></code></pre> |\r\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n\r\nBut there\'s still one issue here! If the computer switches to another customer between the `if (freeSeats.value() > 0)` and the `freeSeats.down()` (another race condition!), we could have:\r\n\r\n|  | <span data-align-center>Customer 1</span> | <span data-align-center>Customer 2</span> | freeSeats |\r\n|:---:|---|---|:---:|\r\n| 0 |  |  | 1 |\r\n| 1 | `if (freeSeats > 0)` | <span data-align-center>-</span> | 1 |\r\n| 2 | <span data-align-center>-</span> | `if (freeSeats > 0)` | 1 |\r\n| 3 | <span data-align-center>-</span> | `freeSeatsMutex.down()` | 1 |\r\n| 4 | <span data-align-center>-</span> | `freeSeats--` | 0 |\r\n| 5 | <span data-align-center>-</span> | `freeSeatsMutex.up()` | 0 |\r\n| 6 | `freeSeatsMutex.down()` | <span data-align-center>-</span> | 0 |\r\n| 7 | `freeSeats--` | <span data-align-center>-</span> | -1 |\r\n| 8 | `freeSeatsMutex.up()` | <span data-align-center>-</span> | -1 |\r\n\r\n-1??? Even though we\'ve protected `freeSeats` from the Assembly-level data races in the increment/decrement, we\'re still vulnerable to switching between the `if` and the actual decrement! In order to remedy this, we have to include the `if` check within our critical region, guaranteeing that the \'if\' and the decrement finish in one go without interruption:\r\n\r\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <span data-align-center>Globals</span>                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\r\n+===================================================================================================================================================================================================================================+========================================================================================================================================================================================================================================================+\r\n| <pre><code>sem waitingCustomers = 0;<br>int freeSeats = n;<br>sem barberReady = 0;<br>sem freeSeatsMutex = 1;</code></pre>                                                                                                                                                                                                                                                                                                                                                                 |\r\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <span data-align-center>**barberThread**</span>                                                                                                                                                                                   | <span data-align-center>**customerThread**</span>                                                                                                                                                                                                      |\r\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n| <pre data-col-width=\"50%\" data-align-top><code>while (true) {<br>  waitingCustomers.down();<br>  freeSeatsMutex.down();<br>  freeSeats++;<br>  freeSeatsMutex.up();<br>  barberReady.up();<br>  // cut hair<br>}<br></code></pre> | <pre><code>freeSeatsMutex.down();<br>if (freeSeats > 0) {<br>  freeSeats--;<br>  freeSeatsMutex.up();<br>  waitingCustomers.up();<br>  barberReady.down()<br>  // get haircut<br>} else {<br>  freeSeatsMutex.up();<br>  return;<br>}<br></code></pre> |\r\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n\r\nNotice that since we `down()` before the `if`, we have to make sure our `else` case also `up()`s, or else we might end up with a critical region that never gets exited. Always keep this in the back of your mind, as well as including condition checks (`if`, `while`, even `for` in certain cases) in the critical region. It\'ll probably help you anticipate or find some synchronization bugs faster.\r\n\r\nBut that\'s it! That\'s our final sleeping barber simulation that patches all the synchronization issues[^implementing haircut]. Admittedly, this problem might\'ve been a bit contrived, because it wasn\'t designed to have every last drop of its pedagogical value milked like the United States realizing that a McDonald\'s kitchen has oil too[^more edge cases]. But I needed to prove to myself that my dozen-hour[^dozen more hours] rabbit hole for a 10-minute segment of lecture wasn\'t a waste, so I hope this was a helpful and unique insight to the world of semaphores and sleep-deprived barbers.\r\n\r\nAnd before we say goodbye, I would like to apologize for \"neuron fallout\". I hope that absolutely miserable attempt at a pun didn\'t make neurun away.\r\n\r\n[^firefox]: If you\'re using Chrome: 1. don\'t, 2. I will make your browser mine crypto (I won\'t), 3. this introduction actually doesn\'t apply to Chrome! Chrome [uses processes](../static/blogpage/3/images/98/https://levelup.gitconnected.com/how-web-browsers-use-processes-and-threads-9f8f8fa23371) instead of threads for tabs, which is like having 74 different todo lists with maybe a few items each instead of 1 list with 74 items. I won\'t go into advantages/disadvantages here.\r\n[^parallelism]: In contrast, *real*, simultaneous multitasking is called **parallelism**, for example when you have multiple CPU cores running at the same time instead of just one core switching back and forth. Most modern devices do both, but I will only talk about concurrency here.\r\n[^assembly]: By the way, this Assembly would be analogous to taking a container out of a fridge (memory) onto the countertop (temp storage), adding food into it, and then putting it back into the fridge.\r\n[^data race with read]: They don\'t have to be both writes. For example, thread 2 might try to read in the middle of thread 1\'s write. Maybe thread 2 will get the old value, maybe it\'ll get the new value, maybe it\'ll even get half the bits from the old value and half from the new…and the mere *possibility* for a value different than what we\'re expecting makes this a data race.\r\n[^more synchronization tools]: If you\'re curious, things like condition variables/[monitors](https://en.wikipedia.org/wiki/Monitor_(synchronization)) also exist for synchronization. I might cover them someday, but they\'re probably more complicated than semaphores.\r\n[^other names for up/down]: Sometimes `down()` is referred to as `wait()` and `up()` as `post()`/`signal()`. The original names were `p()` and `v()` respectively, named after Dutch *prolaag* and *verhogen* (the inventor, Dijkstra, was Dutch). But because computer scientists can never agree on things, there are a few more candidates for what these stand for [here](https://en.wikipedia.org/wiki/Semaphore_(programming)#Operation_names).\r\n[^atomicity etymology]: Possibly [named](https://cs.stackexchange.com/a/121464) after the fact that atoms are (almost) inseparable, just how like atomic blocks of code are uninterruptible—don\'t tell them about nuclear fission!\r\n[^semaphores are atomic]: `sem.down()` and `sem.up()` are also atomic.\r\n[^modified problem]: This is the most popular variant of the [original problem](https://www.cs.utexas.edu/users/EWD/transcriptions/EWD01xx/EWD123.html#4.2.%20The%20Superfluity%20of%20the%20General%20Semaphore.). Ironically, Djikstra originally used the sleeping barber to be like \"you mortals, I can do all that with just binary semaphores\", but it seems like textbook writers (and me) were like \"hippity hoppity your problem is now my property\" and turned it into teaching material for semaphores in general.\r\n[^universe simulation]: The next time someone tells you the universe is a simulation, ask them how fast it context switches.\r\n[^implementation may vary]: The specific implementation of this is up to debate, but remember that this is not a C programming assignment. Unfortunately, I have to insist that this is the code that works best for our walkthrough, and hopefully you can make sense of it.\r\n[^c booleans]: Also, I know C doesn\'t have booleans by default. Please stop screaming at me.\r\n[^busy wait]: Another advantage of this substitution besides fixing the WW3 issue is that semaphores wait much more \"passively\" than while loops—`sem.down()` puts that thread to sleep until it receives a `sem.up()` somewhere, while `while` loops are like setting an alarm every millisecond to see if the `barberReady` has changed. This latter situation is called a **busy wait**, and it uses an unnecessary amount of CPU by constantly switching back to run the while loop again.\r\n[^deadlock]: Also notice that if we had put `waitingCustomer++` *after* `barberReady.down()` instead, the customer would wait for the barber to `barberReady.up()` while the barber waits for the customer to `waitingCustomer++`—they will wait for each other, forever. This situation is called a **deadlock**, and it\'s good to be mindful of them when you\'re debugging a program that is stuck somewhere.\r\n[^note on zero init]: In case you\'re wondering, even if the customer thread started first with the semaphore initialized to 0, they would just have to wait at `down()` for the barber thread to start, i.e. for the barbershop to open.\r\n[^implementing haircut]: Implementing the actual haircut is left as an exercise to the reader.\r\n[^more edge cases]: Some of the things I considered didn\'t even show up here, like what happens if the `freeSeatsMutex.up()`s were placed differently like some sources do. I *believe* this shouldn\'t affect anything, but if any of you happen to be an expert and are reading this for some reason, please feel free to correct me in the comments.\r\n[^dozen more hours]: I wouldn\'t be surprised if I\'ve spent another dozen hours writing this—I must\'ve revised it at least a hundred times.',NULL,1,3),(101,'2024-05-09 07:13:30','The Airport','the-airport',NULL,'The Airport is a place where dreams are born and dreams go to die. My parents met at an Airport, and I leave them at an Airport.\r\n\r\nWe fly out in pursuit of a new life, and simultaneously say goodbye to our old one. Some are forced to leave. Others, more optimistic or more fortunate, escape towards a better path.\r\n\r\nThe security check holds the power of separation. Some families part for fathers to find work or adult children to find education, because they were unable to succeed at home. Some people never return. Some people can\'t. Regardless, they hug and kiss and cry at the entrance to the security line, believing that beyond the X-ray machines lies the best, or only chance of a better life for all.\r\n\r\nBut beyond those machines, the whisper of a better life settles into the dust beneath the lone desk at the gates, waiting to be stirred up by the winds of fate. A passerby brings through a small breeze; the dust might rise up an inch, then settle back down into the pile it is forever destined to. Millions of dust particles sit in the pile, and the ones drifting through the air are far, few, and temporary.\r\n\r\nFor every person that makes it onto a plane, a dream is hidden within their hearts. Some dream of their families. Some dream of a better life.\r\n\r\nSome dream of not leaving at all.\r\n\r\nAnd it might be a young adult\'s first time in a plane by themselves, or a working adult\'s last time in a plane at all. But whatever the case, they are flying alone.\r\n\r\n---\r\n\r\n*Originally written at an Airport.*\r\n\r\n*Yes, I know vacations exist.*',NULL,1,7),(102,'2024-05-09 07:13:55','Spectator of my Life','spectator-of-my-life',NULL,'There was once a boy\r\n<br>\r\nneither friend nor foe\r\n<br>\r\nwho watched me from afar\r\n\r\nHe would sit idly in the shade\r\n<br>\r\nreading a book, playing a game\r\n<br>\r\nlooking up once in a while to see if the sun had set\r\n\r\nI knew the boy, I trusted him\r\n<br>\r\nI knew he would guide my journey ahead\r\n<br>\r\nknew that he always had my back\r\n\r\nYet when I thought I was on top of the world \r\n<br>\r\nhe would see everyone ahead, too far for me to see\r\n<br>\r\nhe would not realize that letting me know would mean the world to me\r\n\r\nYet when I took a wrong turn and noticed a dead end\r\n<br>\r\nand I convinced myself that it was a trick of the light\r\n<br>\r\nhe offered no rebuke, nothing to stifle my ego\r\n\r\nYet when I became the hare to the tortoise\r\n<br>\r\nhe\'d seen me do better, outrun the rest\r\n<br>\r\nbut he refused to leave his comfortable spot beneath the trees\r\n\r\nspectating me\r\n<br>\r\nwatching me fall behind\r\n<br>\r\nwatching me waste time.\r\n\r\nOne day I finally strolled around the corner and saw the finish line\r\n<br>\r\neveryone was already there, rejoicing together in the fruits of their labor\r\n<br>\r\nI looked over; the boy was humming a tune to himself\r\n\r\nAt the end, I finally saw what could\'ve been\r\n<br>\r\nif he had stopped me from that break I thought I could take\r\n<br>\r\nif he had just reminded me of the flame that once blazed within\r\n\r\nI showed him the damage he\'d done\r\n<br>\r\nthe scars he\'d left, never to heal\r\n<br>\r\ntold him that he had let me down\r\n\r\nAnd finally\r\n<br>\r\ntoo late\r\n<br>\r\nthe boy took it unto himself to be more than just a bystander\r\n\r\nthen I realized\r\n<br>\r\nthe boy was me.\r\n\r\n---\r\n\r\n*Originally written Apr 17, 2024.*',NULL,1,7),(103,'2024-05-09 07:13:13','Those Kinds of Change','those-kinds-of-change',NULL,'those kinds of change\r\n<br>\r\nthey\'re exciting\r\n<br>\r\nlets you see what\'s out there\r\n\r\nthose kinds of change\r\n<br>\r\nthey\'re generous\r\n<br>\r\nshows you a new warmth to keep you going\r\n\r\nthose kinds of change\r\n<br>\r\nthey\'re addicting\r\n<br>\r\nbrings you on an adventure to make you feel something new\r\n\r\nthose kinds of change\r\n<br>\r\nthey\'re scary\r\n<br>\r\nlets you see what\'s out there, that what you currently have is worthless\r\n<br>\r\nthat everything you\'ve worked to build up is nothing\r\n\r\nthose kinds of change\r\n<br>\r\nthey\'re sadistic\r\n<br>\r\nshows you a new warmth but strips you of your old one\r\n<br>\r\nexposes you to the barren world as you struggle to get there\r\n\r\nthose kinds of change\r\n<br>\r\nthey\'re insidious\r\n<br>\r\nbrings you on an adventure, but adventures don\'t last forever\r\n<br>\r\nhow do you fill the hole with what you\'ve lost?\r\n\r\nyou have nothing.\r\n\r\n---\r\n\r\n*Originally written Apr 20, 2024.*',NULL,1,7),(104,'2024-05-09 07:12:51','Memories.','memories',NULL,'Time.\r\n\r\nIn a universe where each fading star could be a brief conflict, a passing inconvenience…time is our only immortal enemy.\r\n\r\nBut—time is an illusion. An illusion of an unstoppable flow, a bottomless ocean, a suffocating force slowly crushing our life away…\r\n\r\nThe illusion can be broken.\r\n\r\nA single window to the past, seeing through the deception of time, defeats the illusion, even if for just a moment…\r\n\r\nThose windows are called memories.\r\n\r\n<br>\r\n\r\nMemories.\r\n\r\nIn a world of darkness, memories are our light.\r\n\r\nIt is a light that rekindles the flames of hope and the ashes of sorrow. It is a light that pierces through the cosmos to deliver a vision, a *dream*—a wormhole back to when all was well and good.\r\n\r\nIt is a light that shines brighter than stars.\r\n\r\n<br>\r\n\r\nMy past.\r\n\r\nIt is gone forever. I know that.\r\n\r\nBut it isn\'t. It lives inside me. Inside all of us.\r\n\r\nI *am* my past.\r\n\r\n<br>\r\n\r\nThe universe.\r\n\r\nThe vast expanse of stars, the endless fields of glimmering galaxies, the oceans of bright, beautiful nebulae, floating through a cold and empty void…\r\n\r\nThe thousands of colorful flickers, small or large, bright or dim, flickers of my past…\r\n\r\nThey give meaning to the void that is life.\r\n\r\n<br>\r\n\r\nLife.\r\n\r\nOne blink of an eye and it\'s gone.\r\n\r\nSome people tell me to not look back.\r\n\r\nBut sometimes looking back is the only way we can move on.\r\n\r\n<br>\r\n\r\nA life, a journey, a game…a momentary flash quickly lost in the eternal darkness of the universe…\r\n\r\nBut it\'s a life nonetheless.\r\n\r\nOne day my bones will grow weak and my joints will become rickety.\r\n\r\nThat day, I want to look back through the windows of time, on years upon years of memories, of my past, of my universe, of my life, of *me*—and be proud. Proud, and happy.\r\n\r\nBecause no matter how much I\'ve been battered and beaten, torn to pieces, disintegrated into stardust, tossed around in this chaotic world, lost in the vast chasm of life—I\'m still me.\r\n\r\n<br>\r\n\r\nAnd as the sun sets, I will have conquered my world.\r\n\r\n---\r\n\r\n*Originally written Apr 4, 2022.*',NULL,1,7),(105,'2024-05-09 07:14:15','Some random chapter title ideas from a while ago','some-random-chapter-title-ideas-from-a-while-ago',NULL,'__**Chapter 1\r\n<br>\r\nDawn**__\r\n\r\n*The first light peeks above the horizon, bringing with it a new beginning.*\r\n\r\n*Dawn.*\r\n\r\n*Every morning, as the sun bathes the serene meadows in a soft orange glow and the dew glistens in the warm light, a bird chirps hello to a new day, bringing in a fresh chorus of cheerful responses. Every day is unique, and every day is special.*\r\n\r\n*Every dawn promises a new day.*\r\n\r\n<br>\r\n\r\n__**Chapter 2\r\n<br>\r\nRain**__\r\n\r\n*My path forward in the day of dawn is unclear, obscured by sheets of rain.*\r\n\r\n*The rain reminisces of night. Of darkness.*\r\n\r\n*It reminisces of my past.*\r\n\r\n<br>\r\n\r\n__**Chapter 3\r\n<br>\r\nSprout**__\r\n\r\n*The rain reminisces of night, of darkness.*\r\n\r\n*But with every rain, hidden seeds begin to sprout.*\r\n\r\n*And slowly, these sprouts begin to bear fruit.*\r\n\r\n<br>\r\n\r\n__**Chapter 4\r\n<br>\r\nHorizon**__\r\n\r\n*As the rain clears and the sprouts bear fruit, the horizon emerges…an endless field of shimmering light, at the place where our dreams lie.*\r\n\r\n*But as I look towards the horizon in front, the hopes of my future fade into the distance, too far away for me to catch up.*\r\n\r\n*And as I look towards the horizon behind, the blunders of my past vanish into the unreachable, too late for me to go back.*\r\n\r\n*You can run, you can seek…but you will never reach the horizon.*\r\n\r\n*Where your dreams lie.*\r\n\r\n<br>\r\n\r\n__**Chapter 5\r\n<br>\r\nSunshine**__\r\n\r\n*I may never reach the horizon, but the sun will.*\r\n\r\n*The sun hugs me with its beaming rays and pulls me within the horizon\'s reach.*\r\n\r\n*The sun reminds me that there is still hope, that there is still happiness, that there is still light, at the place where my dreams lie.*\r\n\r\n*The sun casts its brightest beams upon me for this special hour, the golden hour of my life.*\r\n\r\n*The sun loves me, and I love the sun.*\r\n\r\n<br>\r\n\r\n__**Chapter 6\r\n<br>\r\nEvening**__\r\n\r\n*Sunshine can bring me to the place where my dreams lie.*\r\n\r\n*But by the time the sun reaches the horizon, as the day reaches the peak of its beauty, the light is already fading…*\r\n\r\n*The dawn promised a unique day, but sometimes that\'s a curse: this day will never return again.*\r\n\r\n*And as short-lived beauty wanes blue, night begins to fall.*\r\n\r\n<br>\r\n\r\n__**Chapter 7\r\n<br>\r\nSunset**__\r\n\r\n*The last light fades into mist, casting long shadows as we stand in the vast fields of life. Shadows, imprints of us, memories…cast only by the light of the past, but reminding us of the darkness of the present…*\r\n\r\n*Leaves gently dust the roadside with colors of autumn, lined with thickets of shade in the fading light. The setting sun spills gold onto the spindly trees, dazzling the red and gray of the trunks in harmony…the avenue of dreams melts into the golden haze, blurring into the passage of time…the final glimmer vanishes behind the misty peaks, and the bright pink splashes of rosy clouds fade into cool blue like distant memories…a burst of cold air swoops in, noisily picking up the heaps of fallen autumn leaves…pure silver moonlight spills across the meadows, illuminating the night sky just like the sun, providing comfort, vanishing behind turbulent clouds…the first pitter-pattering of raindrops on cold soil, punctuating the dying rhythm of chirping birds returning to their nests…the howling of the wind, narrating the uprooting of the trees, the scouring of the fields…and the flowers and the birds, having just gone to sleep for the last time…*\r\n\r\n<br>\r\n\r\n__**Lead-in to Epilogue**__\r\n\r\nBut all that is the past.\r\n\r\nI turn to face the future.\r\n\r\nThe golden radiance of the setting sun dazzles me, blinding me with its beams of light. The distant peaks are shrouded in fog, hiding what is beyond. The cold breeze of the night blows in, bringing the beautiful day that has blossomed to a close.\r\n\r\n*But even in the darkest of nights, I must dream of dawn.*\r\n\r\nTurning back, I take one last look at the past, at everything…\r\n\r\nThen I walk into the night, towards the setting sun.\r\n\r\n<br>\r\n\r\n__**Epilogue\r\n<br>\r\nNight**__\r\n\r\n*The night is cold, and it is unforgiving.*\r\n\r\n*It drives away warmth. It takes away hope. It strips away light and leaves empty cold where dreams once danced.*\r\n\r\n*But it doesn\'t last forever.*\r\n\r\n*With enough patience, every sunset brings a new dawn.*\r\n\r\n---\r\n\r\n*Originally written [redacted].*\r\n\r\n*Parts of the Lead-in to Epilogue are pretty much pulled from Matthew Stover\'s Revenge of the Sith, so credits to him.*\r\n\r\n*Also, I know that birbs aren\'t real, but \"punctuating the dying rhythm of chirping government spy drones\" doesn\'t hit as hard.*',NULL,1,7),(106,'2024-05-09 07:13:42','The Mask','the-mask',NULL,'I\'m an idiot.\r\n<br>\r\nI shouldn\'t be struggling.\r\n<br>\r\nThere\'s nothing hard about it.\r\n<br>\r\nWhy can\'t you see that?\r\n\r\n*Why can\'t you see me?*\r\n\r\nWhat works for you doesn\'t work for me.\r\n<br>\r\nBut if I say that, I hurt your feelings.\r\n<br>\r\nYou want to feel like you care about me\r\n<br>\r\nbut my awareness insults your comfortable illusion.\r\n\r\nToo nice and you don\'t get it.\r\n<br>\r\nToo honest and I\'m making excuses.\r\n<br>\r\nI spend hours fighting my own brain every day\r\n<br>\r\nyet you cannot give me ten minutes to let me take off my mask.\r\n\r\nIt\'s always \"try harder\"\r\n<br>\r\n\"there\'s no reason you can\'t do better\"\r\n<br>\r\nbut not a single one of these hasn\'t already been said by myself\r\n\r\nit just hurts a bit more when it comes from you.\r\n\r\n---\r\n\r\n*Originally written Apr 22, 2024.*',NULL,1,7),(126,'2024-05-09 07:14:23','The Glass Sheep','the-glass-sheep',NULL,'a sheep wanders alone upon a vast plain\r\n<br>\r\nthe wind rustles quietly; the sun beams down tirelessly\r\n<br>\r\nbright green rolling hills with no end in sight\r\n<br>\r\njust the sheep under the sun’s serene light\r\n\r\nbut on this grassland lives another sheep of glass\r\n<br>\r\nblending in perfectly to the background behind\r\n<br>\r\nit has no predator, for it can\'t be seen\r\n<br>\r\non the quiet grassland, all roam free\r\n\r\none day the glass sheep is a bit careless\r\n<br>\r\nbumps into the other, gives it quite a bit of shock\r\n<br>\r\nbut the other became curious, for it could get rid of its fleas\r\n<br>\r\nso many ideas for what it could do as one with the green\r\n\r\nbut dark clouds loom, and night is falling\r\n<br>\r\nthe glass sheep decides to teach the other next morning\r\n<br>\r\nthe other, fuming, is forced to wait patiently\r\n<br>\r\nwith no other choice, colorless green ideas sleep furiously',NULL,1,7),(133,'2024-07-29 19:14:49','Linear algebra in __ words','linear-algebra-in--words','WHY NOT GOING TO CLASS MADE ME LIKE MATH MORE','*deep breath\\*\r\n\r\n\r\n\r\n\r\n*passes out\\*',NULL,0,-3),(138,'2024-05-09 07:14:09','She','she',NULL,'She\'s there without fail, every single day\r\n<br>\r\nbut I\'m never brave enough to talk to her\r\n<br>\r\nHer back is turned, lonely, every time I glance\r\n<br>\r\nalmost like she\'s inviting me to go over\r\n\r\nShe\'s always at the same place\r\n<br>\r\nboth in person and in my heart\r\n<br>\r\nI try to smile every time\r\n<br>\r\nbut I can\'t always tell if she saw\r\n\r\nI always show my best to her\r\n<br>\r\nhoping she\'ll appreciate my effort\r\n<br>\r\nBut it\'s starting to become clear to me\r\n<br>\r\nthat I\'m going to have to do something more\r\n\r\nOther people talk to her sometimes\r\n<br>\r\nit makes her happy, like sunshine\r\n<br>\r\nAnd I can\'t help but bask in the warmth of her smile\r\n<br>\r\nbut I\'m always disappointed with myself in the end\r\n\r\nEvery day, time dwindles away\r\n<br>\r\nevery day, I long for that smile like sunshine\r\n<br>\r\nIt\'s just a conversation, they always say\r\n<br>\r\nhow hard could it possibly be?\r\n\r\nI guess, that in this world\r\n<br>\r\ntrivial for one might be unfairly hard for another\r\n<br>\r\nI guess, that in this world\r\n<br>\r\nsome just can\'t get what they deserve\r\n\r\nBecause what kind of world do we live in\r\n<br>\r\nwhere the old lady still works at the dining hall?\r\n\r\n---\r\n\r\n*If this confused you, or if you still think I\'m in love with my dining hall staff (<3), please read again, and pay special attention to the penultimate paragraph.*\r\n\r\n*(or maybe I\'m just a bad writer idk)*',NULL,1,7),(144,'2024-05-10 03:04:13','Hide and Seek','hide-and-seek',NULL,'I\'m the master of the game of hide and seek\r\n<br>\r\nno one has ever been able to find me\r\n<br>\r\nI guard myself with the darkness of shadows\r\n<br>\r\nI vanish behind a statue of a faceless smile\r\n\r\nBut after playing the game for too long\r\n<br>\r\nhiding started to feel like where I belonged\r\n<br>\r\nand when I realized the game had ended, to my horror\r\n<br>\r\nI no longer remembered how to be found\r\n\r\nNo matter how warm the light felt all around\r\n<br>\r\nI had taught myself to fear being found\r\n<br>\r\nI could no longer bring myself to step out from\r\n<br>\r\nthe darkness and pain I had come to love\r\n\r\nI will always be that statue of the faceless smile\r\n<br>\r\nand they will never know.',NULL,1,7),(150,'2024-05-13 00:59:53','4am.','4am',NULL,'It\'s 4am.\r\n\r\nOn this particularly foggy night in the middle of May, you step outside. The air is quiet and thick with moisture. A distant, eerie hum trembles through the air.\r\n\r\nAlone.\r\n\r\nYou choose a direction. North. Step by step, you leave the warm lights of home and stray into the unknown. You turn a corner, and are momentarily blinded by the orange blaze of a streetlight. Heading the other way, the path squeezes between two huge trees, disappearing upwards into the dark night sky. A wooden bridge lies ahead, lights melting into the fog.\r\n\r\nYou take your first step onto the bridge. You hear the railings rattle with every step you take, and the tiny squeaks of your shoes on the damp, cold wood. The bridge creaks slightly, echoing faintly through the woods. Your pace quickens. Almost there…a small uphill path leads forward towards an empty road. A single light illuminates the pavement with a hazy orange glow.\r\n\r\nYou cross the road. It has never been this quiet. The ominous rumble of machinery draws near. The cold, wet air stings your skin. Behind you, someone seems to open a door, but you cannot see.\r\n\r\nAnother bridge lies ahead, longer. The foot of the bridge on your side is splattered with isolated drops of water. It is foggy, not rainy. You continue forward. A light flickers on to your left unexpectedly with a loud click, then fades away as you pass. Your pace quickens. With every step, your cheeks feel the sharp impact of icy cold mist. A freezing wind picks up. An orange glow enters your vision, then disappears. A mass of dark wet spots stares up at you. Your pace quickens. A light doesn\'t turn on. A shadow flickers behind you. A sudden draft chills your back. Freezing rain slices through your skin. Your pace quickens. Something brushes against your shoulder. The lights disappear behind you. Heavy splattering pounds your eardrums. The piercing wind is relentless. The roar is suffocating. The bridge screams. You turn around. A dark flash fills your vision, and you fall, fall…',NULL,1,7),(151,'2024-05-16 08:48:01','Stack Overflow gave me trust issues','stack-overflow-gave-me-trust-issues','HOW ONE INNOCENT COPY-PASTE ENDED TWO MACHINES','This is a tale about making a mistake. It is a tale I was almost too embarrassed to tell. It is a tale of a terrible failure, and of climbing back up.\r\n\r\nBut above all, it is a tale of betrayal.\r\n\r\n# The Beginning\r\n\r\nTwo months ago, in my innocent world of making the backend for this website, I was putting up the final touches on Operation Don\'t Lose My Data: I had just gotten my database to back up to another machine, and I just needed to periodically clear the old backups.\r\n\r\nJust like any good developer, automation is my oxygen, so I sought a Bash script to do this work for me. And, just like any good developer, a three-minute trip to Stack Overflow made me the proud new owner of a `remove_old_backups.sh`[^copy]:\r\n\r\n\\textbox\r\n\r\n<pre><code>#!/bin/bash<br><br>max_num_backups=10<br><br>cd /home/user/backups/<br>num_backups=$(( \"$(ls -1q | wc -l)\" - 1))<br>if [[ \"$num_backups\" -gt \"$max_num_backups\" ]]; then<br>    ls --ignore=\"$(basename \"$0\")\" -t \\<br>            | tail --lines=+\"$(expr \"$max_num_backups\" + 1)\" \\<br>            | xargs -d \'\\n\' rm<br>fi</code></pre>\r\n\r\n\\endtextbox\r\n\r\nFor my fellow mortals out there, let me explain what this does. First, it navigates to the directory where I stored my backups, and counts the number of files there:\r\n\r\n\\thm\r\n\r\n`cd /home/user/backups/`<br>\r\n`num_backups=$(( \"$(ls -1q | wc -l)\" - 1))`\r\n\r\n\\endthm\r\n\r\nIf that exceeds `max_num_backups`, it will then list all the files (excluding the script itself) by date:\r\n\r\n\\thm\r\n\r\n`ls --ignore=\"$(basename \"$0\")\" -t`\r\n\r\n\\endthm\r\n\r\nthen pipe that list to `tail` which returns the older files that exceed the limit:\r\n\r\n\\thm\r\n\r\n`tail --lines=+\"$(expr \"$max_num_backups\" + 1)\"`\r\n\r\n\\endthm\r\n\r\nand finally feed those older files via `xargs` to `rm`, which, you know, deletes them:\r\n\r\n\\thm\r\n\r\n`xargs -d \'\\n\' rm`\r\n\r\n\\endthm\r\n\r\nSome of you may already have an inkling of the horrors this script could unleash: lay back and bask within the dramatic irony that is about to come. And if you are as clueless as I was, then you will get to experience the same journey I went through on the night of May 14th, 2024.\r\n\r\nAnyway, I then set up a `systemd` service and timer to automatically run this script periodically, and that was it. All hail this clever string of commands from a generous Stack Overflow user.\r\n\r\nRight?\r\n\r\n# The Reckoning\r\n\r\nFast forward to May 14th. I had already fought several battles earlier that day with my machines—figuring out why `ufw` didn\'t work behind Oracle Cloud\'s firewall, why Docker kept breaking on boot, why a separate file server of mine was giving `523 Origin Unreachable`, why `rsync` over SSH worked for one target machine but not another[^rsync battle]—but nothing could\'ve prepared me for the ticking time bomb that was about to go off.\r\n\r\nI had just gotten another Oracle machine  and set up a second database backup onto it, along with the same `remove_old_backups.sh` and service. In a moment of arbitrary impulse, I also decided to rename my backup folders on both machines by appending a \"-1\" or a \"-2\" to them respectively. This required the `systemd` service files to be updated with these new paths, since the `remove_old_backups.sh` scripts they ran were stored within the renamed backup folders themselves. Finally, I ran `sudo systemctl daemon-reload` to refresh these services; and as a habit lingering from the days when I\'d never know when to `daemon-reload` and when to `restart`, I ran `sudo systemctl restart` as well.\r\n\r\n\\textbox\r\n\r\n`ubuntu@server-1:~$ sudo systemctl restart remove-old-backups.service`<br>\r\n\'\'\'Job for remove-old-backups.service failed because the control process exited with error code.\'\'\'<br>\'\'\'See \"systemctl status remove-old-backups.service\" and \"journalctl -xeu remove-old-backups.service\" for details.\'\'\'\r\n\r\n\\endtextbox\r\n\r\nI literally just updated the script\'s path in the service file—how did that break it? I tried this sequence on the other machine, with the exact same result. Baffled, I decided to `cd /etc/systemd/system/` to take a look at the service file:\r\n\r\n\\textbox\r\n\r\n`ubuntu@server-1:/etc/systemd/system$ ls`<br>\r\n\'\'\'-bash: /usr/bin/ls: No such file or directory\'\'\'\r\n\r\n\\endtextbox\r\n\r\nNo—*what?* ????\r\n\r\n\\textbox\r\n\r\n`ubuntu@server-1:/etc/systemd/system$ sudo su`<br>\r\n\'\'\'-bash: /usr/bin/sudo: No such file or directory\'\'\'\r\n\r\n\\endtextbox\r\n\r\nI tried, and I tried, one after another…`cat` had left me too, as had `bash`, `source`, `chmod`, `top`, `fsck`, `apt`, `vim`, `nano`…even the program that was supposed to yell at me when I entered an unknown command had given up:\r\n\r\n\\textbox\r\n\r\n`ubuntu@server-1:/etc/systemd/system$ lss`<br>\r\n\'\'\'-bash: /usr/lib/command-not-found: /usr/bin/python3: bad interpreter: No such file or directory\'\'\'\r\n\r\n\\endtextbox\r\n\r\nBut with the meager tools I had left in my arsenal (mainly `cd` and `echo *`), I was extremely disappointed to learn that all these commands—`ls`, `sudo`, etc.—were all still in `/usr/bin/`, despite what my terminal was telling me. In addition, `$PATH` was gone on one of the machines but not the other; and both had stopped accepting new SSH connections, but neither had terminated my existing ones.\r\n\r\nIn my immense bewilderment, I considered the possibility that both machines had somehow been hacked at the same time. However, this was extraordinarily unlikely, especially considering that Oracle Cloud\'s metrics showed nothing amiss when it came to disk/CPU usage or anything like that. My only remaining conclusion was that Oracle had corrupted both disks in one fell swoop, so my panicky scuffles became punctuated with frantic email refreshes, praying for a service outage notification while cursing the lineages of Oracle\'s poor employees[^disk backups].\r\n\r\nAfter an hour I was ready to go to bed and call customer support the next day—it was almost 4am and I had two midterms in the next two days, neither of which I had studied for yet[^midterms]. But then something on the Oracle Cloud dashboard caught my eye: the two machines that had tragically fallen within seconds of each other were on different fault domains, so it simply didn\'t make sense for the disk corruption to be Oracle\'s fault.\r\n\r\nSlowly, the realization began to hit: all this time, *I* might\'ve been the God to the animals not on the ark. With my breath trapped in my lungs, I dug through my now cosmetic terminal windows, scouring my command history for any explanation of the similarity in timing. Rename, daemon-reload, restart. Rename, daemon-reload, restart. Both of them broke after the same command, `sudo systemctl daemon-reload`…but what could I have possibly changed in my service files that would\'ve brought the literal apocalypse upon these poor machines? I only edited the filepath…\r\n\r\nWait…`daemon-reload` reruns the service, does it not? `remove_old_backups.sh` would\'ve been run…wait…I didn\'t update the filepath there…`cd /home/user/backups/` should\'ve been `cd /home/user/backups-1/`…\r\n\r\nMy chest twists up in a tight knot. What happens if the script can\'t find the directory to `cd` to? I recreate it on my local machine, piping the files to `ls` instead of `rm`. What does it output?\r\n\r\n\\textbox\r\n\r\n`among@us:~$ ./test.sh`<br>\r\n\'\'\'lib\'\'\'<br>\r\n\'\'\'local\'\'\'<br>\r\n\'\'\'lock\'\'\'<br>\r\n\'\'\'log\'\'\'<br>\r\n\'\'\'mail\'\'\'<br>\r\n\'\'\'opt\'\'\'<br>\r\n\'\'\'run\'\'\'<br>\r\n\'\'\'snap\'\'\'<br>\r\n\'\'\'spool\'\'\'<br>\r\n\'\'\'tmp\'\'\'\r\n\r\n\\endtextbox\r\n\r\nMy eyes narrow. `ls /var/`.\r\n\r\n*`lib`.*\r\n\r\n*`local`.*\r\n\r\n*`lock`.*\r\n\r\n*`log`.*\r\n\r\n*`mail`.*\r\n\r\n*`opt`.*\r\n\r\n*`run`.*\r\n\r\n*`snap`.*\r\n\r\n*`spool`.*\r\n\r\n*`tmp`.*\r\n\r\nThe service runs as root.\r\n\r\n`xargs -d \'\\n\' rm`.\r\n\r\n***`rm`***.\r\n\r\nI have just deleted part of my operating system.\r\n\r\nI had trusted my beloved Stack Overflow too blindly, and now I fall to the poisoned dagger of `rm` concealed behind its back.\r\n\r\n# The Wake of the Apocalypse\r\n\r\nThe machines have been terminated[^what did i delete], the Bash script turned into more careful Python, the divorce papers with Stack Overflow signed. The sun rises over what is left of the barren land, wisps of smoke drifting through the hazy, acrid air. The days of copying mindlessly from Stack Overflow are over, and I\'m glad I\'ve learned my lesson and set off this time bomb of a script sooner rather than later.\r\n\r\nBut within my heart, the wound of betrayal bleeds forever.\r\n\r\n[^copy]: Ok I didn\'t copy the whole thing, but the *critical part* was unfortunately let through my edits, shall we say.\r\n[^rsync battle]: Apparently you have to `rsync` manually first *as sudo* in order for the host to be verifiable during the script run. I assumed this had something to do with the root-level `GlobalKnownHostsFile`, but that file didn\'t even exist after `rsync`ing as root…\r\n[^disk backups]: And, in case you\'re wondering, backing up my disks on Oracle Cloud was quite literally the next item on my todo list. And, in case you\'re wondering, dockerizing everything, or at least this website, is also on a (different) todo list.<br><br>Can you tell I\'m very organized?\r\n[^midterms]: Yes, I am writing this when I should be studying.\r\n[^what did i delete]: I don\'t actually know what I deleted on those machines; the script targets all the stuff inside the least recently used directories in `/` as a consequence of `ls -t` and `tail`. I had, in essence, applied a page replacement algorithm to my root directory. It just happened that my local machine hadn\'t touched `/var/` for the longest (quite strange, considering the whole point of `/var/` is to be…variable).',NULL,1,2),(157,'2024-06-01 08:09:54','The surprising beauty of factorizing numbers, part 1: Pollard\'s rho','the-surprising-beauty-of-factorizing-numbers-part-1-pollards-rho','OK HEAR ME OUT','For something as dramatic as \"The Fundamental Theorem of Arithmetic\", you\'d probably expect something a bit more exciting than \"every integer greater than 1 can be prime factorized\". Unfortunately, the ancient Greeks put all their drama points into mythology, so here we are.\r\n\r\nLuckily, Rivest, Shamir, and Adleman quite literally had drama points to spare. Having struggled for a year to find a one-way function suitable for encryption, Rivest was staring at a math textbook in the middle of a particularly drunk night when an idea popped into his head[^rsa invention source]. This idea was the fact that multiplying together two large primes was easy, but prime factorizing them back was extremely hard. By daybreak, Rivest had given birth to perhaps the most famous cryptosystem of all time—as well as my *second* educational post that has something to do with RSA.\r\n\r\n\\dropdown\r\n\r\n\\summary\r\n\r\nPrerequisites:\r\n\r\n\\endsummary\r\n\r\n- Number theory: modular arithmetic, prime factorization\r\n\r\n\\enddropdown\r\n\r\n# Why cracking RSA needs factorization\r\n\r\nFeel free to skip this section if you don\'t want or need a rundown on RSA.\r\n\r\nIn RSA[^textbook rsa], the receiver generates a public key, which the sender will use to encrypt a message, and a private key, which the receiver will use to decrypt the message. In a two-way conversation, each side would generate a private and a public key, making RSA an asymmetric cryptosystem.\r\n\r\nThe receiver (Alice) chooses two ginormous prime numbers[^how primes are generated] \\\\(p\\\\) and \\\\(q\\\\) in secret, and computes the Euler totient of \\\\(N = pq\\\\):\r\n\r\n\\\\[\r\n\\phi(N) = (p - 1)(q - 1).\r\n\\\\]\r\n\r\nShe then chooses another integer \\\\(e\\\\) (no, not Euler\'s number) which is coprime with \\\\(\\phi(N)\\\\) and computes:\r\n\r\n\\\\[\r\nd \\equiv e^{-1} \\mod \\phi(N),\r\n\\\\]\r\n\r\nthe multiplicative inverse (you don\'t *have* to know what these are). Then, she shares her public key, made up of \\\\(e\\\\) and \\\\(N\\\\), with the sender (Bob), while keeping her private key \\\\(d\\\\) safe. This way, she gives Bob just enough information to encrypt messages for her, while not giving enough information for him or any third party to decrypt that same message.\r\n\r\nBob encrypts a message \\\\(m < N\\\\) using Alice\'s public key by computing\r\n\r\n\\\\[\r\nc \\equiv m^e \\mod N,\r\n\\\\]\r\n\r\nwhile Alice decrypts that message using her private key[^proof]\r\n\r\n\\\\[\r\nm \\equiv c^d \\mod N.\r\n\\\\]\r\n\r\nA third party like Eve will be able to see Alice\'s public key, \\\\(N\\\\) and \\\\(e\\\\). But wait! Couldn\'t she find the private key \\\\(d\\\\) from this information, since \\\\(e\\\\) itself is calculated from \\\\(d\\\\)? She could just reverse the calculation, and then it\'ll all be over…she\'ll have Alice\'s private decryption key…\r\n\r\nThis is where the infamous difficulty of factorizing large numbers comes in. Eve will have to reverse the calculation for \\\\(e\\\\), which was \\\\(d \\equiv e^{-1} \\mod \\phi(N)\\\\). But the only way she can find the \\\\(\\phi(N)\\\\) here is to calculate \\\\((p - 1)(q - 1)\\\\), meaning she\'d need \\\\(p\\\\) and \\\\(q\\\\), which Alice has dutifully kept secret. And remember, \\\\(N = pq\\\\): Eve has \\\\(N\\\\) from the public key, so in order to find \\\\(p\\\\) and \\\\(q\\\\), she\'d have to prime factorize \\\\(N\\\\).\r\n\r\nAnd that\'s no easy task.\r\n\r\n# Pollard\'s rho\r\n\r\nThis is a method of prime factorization that is relatively fast for moderately-sized \\\\(N\\\\)s (by \"moderately-sized\", I mean roughly around a billion trillion or so. For comparison, 2048-bit RSA keys are somewhere in the vicinity of a googol googol googol googol googol googol.). You\'ll see at the very end *why* it\'s called \"rho\"—it does not happen to be someone\'s last name this time. Somehow it all goes back to Greek…it\'s like poetry, it rhymes[^poetry rhymes]…\r\n\r\nAnyways, Pollard\'s rho uses a polynomial \\\\(f\\\\), often something like \\\\(x^2 + 1\\\\), and a starting value \\\\(x_0\\\\) to continuously generate a sequence of random-ish numbers, which we can call \\\\(x_i\\\\):\r\n\r\n\\\\[\r\n\\tag{Seq 1} \\begin{alignat\\*}{1}\r\nx_1 &\\equiv f(x_0) \\mod N \\\\\\\\\r\nx_2 &\\equiv f(x_1) \\mod N \\\\\\\\\r\nx_3 &\\equiv f(x_2) \\mod N \\\\\\\\\r\n&\\vdots\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nSince this sequence\'s outputs are limited by the modulus, eventually it\'ll come upon a duplicate output, after which it will start looping (since each next output depends completely and deterministically on the current one). This is where the heart of the algorithm lies: we imagine a *second* sequence by taking this first sequence modulo \\\\(p\\\\), where \\\\(p\\\\) is one of the (nontrivial, or not \\\\(1\\\\) or \\\\(N\\\\)) prime factors of \\\\(N\\\\), and detect a loop there (we have to imagine it because we don\'t actually know \\\\(p\\\\); you\'ll see soon how this still works out). This is because a loop in that second sequence happens when\r\n\r\n\\\\[\r\n\\tag{1} x_{i_1} \\equiv x_{i_2} \\mod p \\t{ AND } p > 1\r\n\\\\]\r\n\r\n(\\\\(p > 1\\\\), otherwise this equation will always be true and it won\'t actually detect loops), meaning \\\\(x_{i_2} - x_{i_1} \\equiv 0 \\mod p\\\\). Here, \\\\(x_{i_2} - x_{i_1}\\\\) is the size of this loop, and it turns out this must be a multiple of \\\\(p\\\\)! That\'s the crucial hint: if we find a loop in the second sequence, then its size \\\\(x_{i_2} - x_{i_1}\\\\) and \\\\(N\\\\) are both multiples of \\\\(p\\\\), so we can formulate the equivalent expression\r\n\r\n\\\\[\r\n\\tag{2} p = \\gcd(x_{i_2} - x_{i_1} \\c N),\r\n\\\\]\r\n\r\nand thus we have \\\\(p\\\\)! In other words, if\r\n\r\n\\\\[\r\n\\tag{3} \\gcd(x_{i_2} - x_{i_1} \\c N) > 1,\r\n\\\\]\r\n\r\nthen both parts of \\\\((1)\\\\) hold, we have a loop, and \\\\(p = \\gcd(x_{i_2} - x_{i_1} \\c N)\\\\). Notice how this final equation cleverly detects loops in the second sequence without actually having to build the sequence, hence why we can get away with just imagining it. And the cherry on top is that since \\\\(p < N\\\\), chances are we haven\'t hit a loop in the first sequence yet when the second loops, so \\\\(x_{i_2} \\nequiv x_{i_1} \\mod N\\\\) at the loop and thus our \\\\(\\gcd\\\\) will work out correctly[^chance for gcd to be N].\r\n\r\n## Floyd\'s cycle-finding algorithm\r\n\r\nBut the bird dropping on the bottom is the realization that we don\'t know how to choose \\\\(x_{i_2}\\\\) so that we can efficiently find the loop that we so desperately crave. We could have \\\\(x_{i_1}\\\\) just be the outputs of the the first sequence, but it probably wouldn\'t work very well if \\\\(i_2\\\\) was always the same number, for example.\r\n\r\nPerhaps the most intuitive method for loop-finding here is Floyd\'s cycle-finding algorithm: we start two \"pointers\" (or race cars, or Mario Kart karts, or whatever) at \\\\(x_0\\\\), and simply have one pointer move two steps at a time while the other moves one step at a time. If they meet again, then the faster one has lapped the slower one, and thus we know there has to be a loop[^brent\'s algorithm].\r\n\r\nSo in this math version of Mario Kart, we will simply have \\\\(x_{i_2}\\\\) be the faster kart, i.e. \\\\(i_2 = 2i_1\\\\). Every step of \\\\(i\\\\) (every frame?), we check \\\\((3)\\\\): if \\\\(\\gcd(x_{2i} - x_i \\c N) \\neq 1\\\\). If so, we\'ve been lapped and we\'ve found a loop in the second sequence; the whole thing about its size being a multiple of \\\\(p\\\\) falls into place, and \\\\(p\\\\) will be equal to this \\\\(\\gcd\\\\).\r\n\r\n# Pollard\'s rho: example\r\n\r\nThe algorithm feels much simpler when it\'s actually being run—it\'s just the explanation that could be kinda complicated (but surely that\'s what you were here for, right?). Let\'s say we are trying to factorize \\\\(N = 8051\\\\), using the common starting value \\\\(x_0 = 2\\\\) and the pseudorandom-generating polynomial \\\\(f(x_i) = (x_{i - 1})^2 + 1\\\\), which gives us the first sequence\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{3}\r\nx_0 &&&= 2 &&\\mod 8051 \\\\\\\\\r\nx_1 &= x_0^2 + 1 &&= 5 &&\\mod 8051 \\\\\\\\\r\nx_2 &= x_1^2 + 1 &&= 26 &&\\mod 8051. \\\\\\\\\r\n&\\vdots\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nWhile we build this sequence, all we have left to do is to check equation \\\\((3)\\\\) at every step:\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{6}\r\n&i = 1&&: \\gcd(x_2 - x_1 \\c 8051) &&= \\gcd(26 &&- 5 &&\\c 8051) &&= 1 \\\\\\\\[3pt]\r\n&i = 2&&: \\gcd(x_4 - x_2 \\c 8051) &&= \\gcd(7474 &&- 26 &&\\c 8051) &&= 1 \\\\\\\\[3pt]\r\n&i = 3&&: \\gcd(x_6 - x_3 \\c 8051) &&= \\gcd(871 &&- 677 &&\\c 8051) &&= 97.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nWe can stop here since we found our first non-\\\\(1\\\\) value, thus \\\\(p = 97\\\\). Connecting this to earlier, there would be a loop in our second imaginary sequence at step \\\\(i = 3\\\\), where \\\\(x_6 = 871 \\equiv x_3 = 677 \\mod p\\\\) (\\\\(x_3\\\\) got lapped by \\\\(x_6\\\\)!). Thus, following the same logic we used to evolve \\\\((1)\\\\) to \\\\((2)\\\\): \\\\(871 - 677 = 194 \\equiv 0 \\mod p\\\\), so we find that the size of this loop, \\\\(194\\\\), must be a multiple of \\\\(p\\\\). And from that massive hint, the \\\\(\\gcd\\\\) is all we need to do to find \\\\(p\\\\).\r\n\r\nNow, grinning at Alice\'s use of an RSA key about a googol googol googol googol googol googol times smaller than recommended, Eve simply divides to get the other prime factor, \\\\(83\\\\). Armed with \\\\(\\phi(N = 8051) = (97 - 1)(83 - 1)\\\\), she will make quick work of Alice\'s private key.\r\n\r\n\\dropdown\r\n\r\n\\summary\r\n\r\nAnd, before I forget, this is why it\'s called \"rho\"…\r\n\r\n\\endsummary\r\n\r\n![<span data-width=\"60%\">&rho; _ &rho;</span>](../static/blogpage/3/images/157/pollard_rho_shape.svg)\r\n\r\nSee the resemblance with the loop? Rho, the Greek letter \'\\\\(\\rho\\\\)\'…\r\n\r\n\\enddropdown\r\n\r\n[^rsa invention source]: According to [Wikipedia](https://en.wikipedia.org/wiki/RSA_(cryptosystem)#History) (and the [original source](http://www.math.uchicago.edu/~may/VIGRE/VIGRE2007/REUPapers/FINALAPP/Calderbank.pdf)), at least.\r\n[^textbook rsa]: This demonstration follows what is known as \"textbook RSA\". In reality, messages are split into blocks to ensure they are smaller than the public key, and other additional security measures are used, such as padding to prevent chosen plaintext attacks. However, those are all ideas that do not need to be discussed at the moment (hence why textbook RSA is so popular in, you know, textbooks).\r\n[^how primes are generated]: If you\'re curious, the computer uses a fast primality test, like [Miller-Rabin](https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test), to choose numbers that are extraordinarily likely to be prime. The chance that they aren\'t is so negligible that it just isn\'t worth the effort to brute-force RSA by hoping they aren\'t prime.\r\n[^proof]: I have a pretty banger proof for why this works, for both cases of \\\\(m\\\\) is/isn\'t coprime with \\\\(N\\\\); but \\*ahem\\* the tooltips are a bit small to contain my proof.\r\n[^poetry rhymes]: Well, except for most of [my \"poetry\"](https://blog.anonymousrand.xyz/writers-unblock/), I guess.\r\n[^chance for gcd to be N]: It is also rare but possible for the \\\\(\\gcd\\\\) to just be \\\\(n\\\\), meaning both sequences did end up looping at the same time. In this unlucky scenario, we have to generate a new sequence using a different polynomial and starting value \\\\(x_0\\\\).\r\n[^brent\'s algorithm]: Nowadays, it\'s probably more common to see Brent\'s faster cycle-finding algorithm: you and your opponent are evenly matched, and you both speed up *exponentially*. But you\'re on school Wi-Fi, so you lag out for 1 second, then teleport to them, then lag out for 2 seconds, teleport, 4 seconds, etc. until they manage to pull ahead an entire lap while you\'re still lagged out. Since they are much faster than in Floyd, you get lapped much sooner.',NULL,1,3),(159,'2024-06-05 10:17:19','The nightmare of \"straight\" vs. “curly” quotes','the-nightmare-of-straight-vs-curly-quotes','A DEEPLY OPINIONATED AND HIGHLY USELESS DISCUSSION ABOUT A PUNCTUATION MARK','Here’s a quote, in quotes, typed from my computer:\r\n\r\n> \"i would gladly trade a kid for 0.0001 bitcoin\"<br>\r\n> — me\r\n\r\nAnd here’s a quote, in quotes, typed from my phone:\r\n\r\n> “*blows apart intestines, but in a cute way*”<br>\r\n> — me\r\n\r\nNotice anything fishy? If the title hadn’t already spoiled it for you, the quotation marks are different. The first pair is straight, the second pair is curly.\r\n\r\nI hate inconsistencies.\r\n\r\nWhen I first noticed many days ago, I immediately went through all my posts, stamping out any cases of quote heterogeneity I could find. Admittedly, Google Docs’ find and replace helped a lot, but 244 single quotes and 76 double quotes across 15 posts (as of drafting this) was still no quick feat, because Google Docs decided to break a bunch of my tables.\r\n\r\nI standardized everything to straight quotes since I’ve always typed my posts mostly from my computer, and because that’s consistent with all the code snippets I copy in (for the uninitiated, code usually only accepts straight quotes—curly ones create widespread pandemonium). Straight quotes also just look better: curly ones are too big and intrusive in my visual field, and I don’t want to be noticing quotes and apostrophes when I’m trying to read fast.\r\n\r\nI know that’s probably a very unpopular opinion. Actual writers, typographers, and editors will definitely want my head on a platter; but people said that about Robespierre too. At least [Wikipedia](https://en.wikipedia.org/w/index.php?oldid=898608717&title=Wikipedia:Manual_of_Style#cite_note-curlyq-5) agrees with me—did Robespierre ever have Wikipedia\'s support?\r\n\r\nBut all this got me really curious: why *are* there two types of quotes?\r\n\r\n# The Advent of quotes\r\n\r\n4chan and ancient Christianity have one thing in common.\r\n\r\nThey both use the ‘>’ mark to emphasize text.\r\n\r\nThis symbol, originally called a “diple”, was first used by ancient Greeks to draw emphasis to a line of text. Eventually, the Christians decided that the word of God deserved such emphasis, and began to use it to indicate quotes from the Bible. And, two thousand years later, anons on 4chan use it for the highest peaks of comedy, the deepest pits of human civilization, and sometimes the most tragically wholesome stories ever penned.\r\n\r\nMany centuries of inconsistent punctuation followed as the diple apparently 4chan-ified, and it wasn’t until around the 16th century that the modern quotation mark began to emerge. The oldest known usage is probably Flavius Philostratus’ “De Vitis Sophistarum” from 1516. These quotation marks, similar to diples, were placed at the start of lines to indicated a quoted passage:\r\n\r\n![From https://aphelis.net/origin-development-quotation-mark/ (“History 2” source in footnotes)](../static/blogpage/2/images/159/de_vitis_sophistarum_quotes.jpg)\r\n\r\nEvidently, early quotes were *very* curly[^amongi]. The comma, obviously curly too[^straight commas], had become standardized in the late 15th century by (probably) Aldus Manutius, and quotes were modeled after them. But while occasionally we’d have the quotation marks be flipped on left-hand pages for some reason, there was still no concept of the opening vs. closing quote.\r\n\r\nLater in the 18th century, a Bach doppelgänger called Samuel Richardson started making his quotes more intimate with the text they were quoting, instead of leaving them lonely in the margins. It took two centuries, but the distinction between opening and closing quotes was finally born.\r\n\r\nBut everything changed when the typewriter nation attacked.\r\n\r\n# The dawn of the straight quote\r\n\r\nTypewriters had to be very picky about which characters they had. The typical typewriter has 44 keys, barely enough for just the English alphabet and ten numbers. So somewhere along the way, the typewriter gods decided that having two types of quotes—opening and closing—was a very inefficient use of space. Instead, they replaced both of them with a symmetrical straight quote, which was the same regardless of if it was opening or closing.\r\n\r\nAnd as far as I can tell, this replacement was a resounding success: literacy rates continued to rise, obviously implying that the visual difference between curly and straight quotes was not enough to impact people’s ability to read.\r\n\r\nThen computers came around, and while keyboard space wasn’t as limited with the development of more compact key-pressing hardware, memory was. Engineers had to standardize how printed characters were represented internally in binary, with the least number of bits possible.\r\n\r\nOne of the most popular ways was 7-bit ASCII: each character was represented by a unique combination of 7 ones and zeros. This meant that there were only \\\\(2^7 = 128\\\\) characters that could be processed and printed by computers, 33 of which were hidden control characters. While that was certainly a lot more than typewriters, ASCII had to actually support lowercase letters, and it didn’t have a shift key to double up the characters. So once again, curly quotes were ditched for the far superior straight quote.\r\n\r\n# How curly quotes stayed alive\r\n\r\nStraight quotes have had over a century to gain traction in some of the world\'s most widely-used technologies—so how are curly quotes still relevant, then? Why is it that despite most keyboards only having straight quotes, every writer’s advice website still seems to advocate for curly quotes (or even call straight ones \"one of the most grievous and inept typographic errors\"[^typographic error source])? Why does my phone still *insist* on inserting the ugliest combination of pixels to ever exist onto my screen? Why is every book, every document, every news article you read absolutely *infested* with those little worm-like blemishes called curly quotes?\r\n\r\nSmart quotes.\r\n\r\nSmart quotes are poisoning the world.\r\n\r\nIf you open a Google Doc (or Word document, or LibreOffice document, depending on your political leaning) and type in a quote, single or double, chances are it shows up as curly, unless you’re based. Most word processors nowadays have smart quotes on by default, which automatically converts the straight quotes from your keyboard into curly ones. Same thing on phones—on iPhones, for example, the setting is called “Smart Punctuation”, and it is also enabled by default for some godforsaken reason.\r\n\r\nSmart quotes. Smart quotes. I’d rather have Elon Musk’s moldy fingernails soaked in cow urine on my screen.\r\n\r\nSeveral times already I’ve had to suppress my urge to put “smart” itself in (straight) quotes, because there is absolutely nothing smart about “smart” quotes. Just because we have the memory now to store both opening and closing curly quotes doesn’t mean we should. They are an excuse for Microsoft and Google to advertise “new” features. They are designed by IDE companies to discourage you from coding in Word. They should simply not exist.\r\n\r\n# There is no war in this post\r\n\r\nWhere was I?\r\n\r\nOh.\r\n\r\nTL;DR straight quotes good, curly quotes bad.\r\n\r\nThis post was not supposed to be this unhinged, especially if you look back at the title:\r\n\r\n> The nightmare of \"straight\" vs. “curly” quotes\r\n\r\nIt was supposed to just be a deeper dive into history, a simple rant about there being two types of quotes. I never expected to fall madly in love with one of them.\r\n\r\nThank you for bearing with me as I progressively lost my mind. If you’ve gotten this far, chances are you’re also pretty passionate about quotes. If you agree with me, I love you. If you don’t, I have a wife and forty-eight kids.\r\n\r\nIn all seriousness though, I won’t come after you in the middle of the night with a knife if you like curly quotes, or immediately propose marriage if you like straight ones. With a lot of things, like coding conventions—and oh god I can’t wait to publish a 15,000 word post defending my coding conventions—all I can really say is\r\n\r\njust—*keep it consistent*.\r\n\r\n---\r\n\r\nAnd yes, those quotes (in quotes) at the beginning are real quotes. They were some of the most mild ones I could find.\r\n\r\n> “i’m so glad [redacted] agreed…now i won’t be alone when i go to prison\"<br>\r\n> — me\r\n\r\n[^amongi]: If you look at these upside down, you might even be able to see amongi.\r\n[^straight commas]: Luckily, the world has yet to see a straight vs. curly comma debate. It would be a funny joke，though.\r\n[^typographic error source]: [I hate you.](https://typographyforlawyers.com/straight-and-curly-quotes.html)\r\n[^nofootnote legalreasons]: A voice told me in the middle of the night that I should specify I was joking in all these quotes.\r\n[^nofootnote all sources]: Sources: [History (1)](https://slate.com/human-interest/2015/01/quotation-marks-long-and-fascinating-history-includes-arrows-diples-and-inverted-commas.html) | [History (2)](https://aphelis.net/origin-development-quotation-mark/) | [Referenced by history sources (I’m so glad there are people that actually research this)](https://www.openbookpublishers.com/books/10.11647/obp.0012) | [Typewriters](https://typographyforlawyers.com/straight-and-curly-quotes.html) | [Typewriters + ASCII](https://themillions.com/2019/03/how-do-you-like-your-quotes-straight-or-curly.html) | [Commas (1)](https://en.wikipedia.org/wiki/Serial_comma) | [Commas (2)](https://medium.com/@jonhudson.main/from-where-did-we-get-the-comma-d15fcd9839bb)',NULL,1,2),(161,'2024-06-04 06:22:32','Have websites really become more minimalistic over time?','have-websites-really-become-more-minimalistic-over-time','BACKED UP WITH *NUMBERS* AND *AI* AND ONLY SLIGHTLY QUESTIONABLE SCIENTIFIC PRACTICES','font size?\r\n\r\nBack when websites were Times New Roman with an offensively bright blue background, everything always looked a lot more dense.\r\n\r\na bit about modern minimalism\r\n\r\nOne reason is undoubtedly readability. The content of this blog (as of writing this) is 648 pixels wide on a computer screen, which should be about the width of 41 \'M\'s, or ~85 characters on average.\r\n\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n\r\nToo narrow and it\'s annoying flickering your eyes back to the front constantly. Too wide and you lose track of where you\'re reading. something about mine being slightly above average?\r\n\r\nAs web-based content became more widespread, so did guides for optimal readability, frontend design, and—oh god—SEO. Text became bigger, line spacing became wider, reading flow became more linear. Colors became stronger, things became rounder (like this font), and margins became emptier (or full of ads). \r\n\r\n# Planning the project\r\n\r\nOne day while pondering this, probably after watching [Answer in Progress\' video about Japanese web design](https://www.youtube.com/watch?v=z6ep308goxQ), I had an idea. Instead of tracking web design across regions of the world, as they had done, I could track web design over time. I could scrape websites off of the [Wayback Machine](https://wayback-api.archive.org/), a place where you can see historical versions of sites, and track the average amount of empty space they had.\r\n\r\nIn that video, they used a [ResNet computer vision model](https://learnopencv.com/t-sne-for-feature-visualization/) to group websites into a plot of empty/dense and light/dark. Computer vision was perfect for this—how did I not think of that earlier? It\'s a very difficult-to-quantify metric with pure code, so naturally the answer should\'ve been AI with its billions of quantifying parameters.\r\n\r\nEven better, the empty/dense spectrum shown in the video was *exactly* what I wanted. I just needed to turn the other light/dark axis into time instead.\r\n\r\nThen I scrolled down and expanded the description. Buried deep in there was a link: <https://sabrinas.space/>.\r\n\r\n![](../static/blogpage/-2/images/161/sabrinas_pseudocode.png)\r\n\r\nCode to copy? Perfect.\r\n\r\nThe decision was made. I will track two metrics over time with the Wayback Machine: visual density (by ~~stealing~~ adapting this code) and color palettes (using [Colorfy It](https://colorfyit.com)\'s API and actually original code).\r\n\r\n# Visual density analysis\r\n\r\nwill be following similar outline at aip? need more than just the same thing though\r\n\r\n## Getting websites and their historical versions\r\n\r\nThere was only one small problem though…\r\n\r\n![](../static/blogpage/-2/images/161/cookies_problem.png)\r\n\r\n## Exterminating cookie popups &#x1f36a;\r\n\r\nWhile normal web scraping typically worked just fine if you ignored the cookie popup, I wasn\'t scraping the HTML—I needed a screenshot of the page itself. In other words, the popup *does* matter.\r\n\r\nI initially thought that using a crawler user agent like Googlebot\'s would solve the problem, but that wasn\'t gonna work—cookie popups aren\'t coded with specific user agents in mind. A quick search confirmed the futility of this method.\r\n\r\nhttps://stackoverflow.com/questions/69330384/how-can-i-eliminate-the-accept-cookies-popup-that-blocking-the-content-of-webp\r\n\r\nhttps://stackoverflow.com/questions/64032271/handling-accept-cookies-popup-with-selenium-in-python\r\n\r\n# Color palette analysis\r\n\r\nnumber of colors, frequency of approx color groupings, saturation value of hsv?\r\n\r\n# Analysis results\r\n\r\n## Visual density over time\r\n\r\n## Color palettes over time\r\n\r\n\\dropdown\r\n\r\n\\summary\r\n\r\nAnd, always remember: if you\'re ever nostalgic for a time when websites were dense and cluttered\r\n\r\n\\endsummary\r\n\r\njust turn off the adblocker.\r\n\r\nbuzzfeed screenshot? or like dailymail or some questionable news/boredpanda/\"health\" site\r\n\r\ngreasynews.com\r\n\r\n\\enddropdown',NULL,0,-2),(162,'2024-06-03 02:15:58','The surprising beauty of factorizing numbers, part 2: the quadratic sieve','the-surprising-beauty-of-factorizing-numbers-part-2-the-quadratic-sieve','(BEAUTY, AND PAIN)','This was originally in the same post as Pollard\'s rho, but eventually I realized that the quadratic sieve is more than worthy of its own spotlight—heck, the quadratic sieve could be *two* posts on its own. There is a reason Professor William Gasarch has over *two hundred slides* on it [here](https://www.cs.umd.edu/users/gasarch/COURSES/456/F19/lecqs/lecqs.pdf)[^Gasarch cite].\r\n\r\nThe quadratic sieve is much faster than Pollard\'s rho for numbers closer to a googol, which would only be like 500 digits less than a real key instead of 600 (in base 10). But with this speed comes much more complexity, and endless optimizations…\r\n\r\n\\dropdown\r\n\r\n\\summary\r\n\r\nWarning & Prerequisites:\r\n\r\n\\endsummary\r\n\r\nIf you are feeling a bit tired, or are still processing Pollard\'s rho, *please rest*. Quadratic sieve is an eight-course meal served at double portion sizes, and it took me multiple days (and a *lot* of Haribo sugar-free gummies) to digest.\r\n\r\nPrerequisites:\r\n\r\n- Number theory: modular arithmetic, prime factorization\r\n- Linear algebra: Gaussian elimination/row reduction, matrix equations, linear combinations, matrix transposition\r\n- At least 1 GB free space in brain\r\n\r\n\\enddropdown\r\n\r\n# Fermat\'s idea\r\n\r\nObserve that if we can find some \\\\(x\\\\) and \\\\(y\\\\) such that \\\\(x^2 - y^2 = N\\\\), then both the left-hand side (\"LHS\") and \\\\(N\\\\) are multiples of \\\\(p\\\\), similar to how \\\\(x_{2i} - x_i\\\\) and \\\\(N\\\\) were both multiples of \\\\(p\\\\) in Pollard\'s rho. Following the same logic, then\r\n\r\n\\\\[\r\np = \\gcd(x^2 - y^2 \\c N).\r\n\\\\]\r\n\r\nBut we can go even further! The only divisors of \\\\(x^2 - y^2\\\\) are \\\\(x + y\\\\) and \\\\(x - y\\\\), following from that one formula you probably never thought you\'d see again. This means that \\\\(p = x + y\\\\) or \\\\(p = x - y\\\\)! This idea is known as Fermat\'s factorization method, and it is the basis on which quadratic sieve was developed.\r\n\r\nMore generally, if we let \\\\(x^2 \\equiv y^2 \\mod N\\\\) (any *multiple* of \\\\(N\\\\)), then we have:\r\n\r\n\\\\[\r\n\\tag{1} \\begin{alignat\\*}{1}\r\np &= \\gcd(x + y \\c N) \\cor \\\\\\\\\r\np &= \\gcd(x - y \\c N).\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\n\\dropdown\r\n\r\n\\summary\r\n\r\nIf you want an intuitive \"proof\" of why this generalization works…\r\n\r\n\\endsummary\r\n\r\nLet\'s say \\\\(k = ab\\\\) is its prime factorization, and \\\\(N = pq\\\\). Then, let\'s list out every single possible way to distribute the RHS factors of \\\\((x + y)(x - y) = abpq\\\\) between the two LHS factors:\r\n\r\nr\n| <span data-align-center>\\\\(\\boldsymbol{x + y}\\\\):</span> | <span data-align-center>\\\\(a\\\\)</span>               | <span data-align-center>\\\\(b\\\\)</span>               | <span class=\"red\" data-align-center>\\\\(p\\\\)</span>   | <span class=\"red\" data-align-center>\\\\(q\\\\)</span>   | <span data-align-center>\\\\(ab\\\\)</span>             | <span class=\"red\" data-align-center>\\\\(bp\\\\)</span> | <span class=\"red\" data-align-center>\\\\(pq\\\\)</span> | <span class=\"red\" data-align-center>\\\\(ap\\\\)</span> | <span class=\"red\" data-align-center>\\\\(bq\\\\)</span> | <span class=\"red\" data-align-center>\\\\(aq\\\\)</span> | <span class=\"red\" data-align-center>\\\\(abp\\\\)</span> | <span class=\"red\" data-align-center>\\\\(abq\\\\)</span> | <span class=\"red\" data-align-center>\\\\(apq\\\\)</span> | <span class=\"red\" data-align-center>\\\\(bpq\\\\)</span> |\r\nr\n| <span data-align-center>\\\\(\\boldsymbol{x - y}\\\\):</span> | <span class=\"red\" data-align-center>\\\\(bpq\\\\)</span> | <span class=\"red\" data-align-center>\\\\(apq\\\\)</span> | <span class=\"red\" data-align-center>\\\\(abq\\\\)</span> | <span class=\"red\" data-align-center>\\\\(abp\\\\)</span> | <span class=\"red\" data-align-center>\\\\(pq\\\\)</span> | <span class=\"red\" data-align-center>\\\\(aq\\\\)</span> | <span data-align-center>\\\\(ab\\\\)</span>             | <span class=\"red\" data-align-center>\\\\(bq\\\\)</span> | <span class=\"red\" data-align-center>\\\\(ap\\\\)</span> | <span class=\"red\" data-align-center>\\\\(bp\\\\)</span> | <span class=\"red\" data-align-center>\\\\(q\\\\)</span>   | <span class=\"red\" data-align-center>\\\\(p\\\\)</span>   | <span data-align-center>\\\\(b\\\\)</span>               | <span data-align-center>\\\\(a\\\\)</span>               |\r\nr\n\r\nYou can see that in every case, either one or both of the LHS factors will contain \\\\(p\\\\) or \\\\(q\\\\) in the output (the red-colored ones), meaning at least one of them will give us a factor of \\\\(N\\\\) when we take the generalized \\\\(\\gcd\\\\) step.\r\n\r\nThis intuition generally continues to hold when \\\\(k\\\\) can be factorized into more than 2 terms, although it seems that occasionally we will end up with a situation where both \\\\(\\gcd\\\\)s will fail to give us a useful answer (they are either \\\\(1\\\\) or \\\\(N\\\\)). These cases are rare, however, if the algorithm is performed correctly; and there are ways to [increase](https://crypto.stackexchange.com/a/93504) the chances of the algorithm succeeding (you won\'t understand this Stack Exchange answer until you read more of this post).\r\n\r\n\\enddropdown\r\n\r\nThus our overall goal with quadratic sieve is to find \\\\(x\\\\) and \\\\(y\\\\) such that \\\\(x^2 \\equiv y^2 \\mod N\\\\). But how *do* we find \\\\(x\\\\) and \\\\(y\\\\) efficiently?\r\n\r\nUnfortunately, that part is the five entreés of the meal.\r\n\r\n# Part 1: overview of the basic method\r\n\r\nFor starters, we can begin considering \\\\(x\\\\) at \\\\(\\ceil{\\sqrt{N}}\\\\). Recall that \\\\(x^2 - y^2 = kN\\\\), and we will only deal with positive integers \\\\(x\\\\), \\\\(y\\\\), and \\\\(k\\\\). Thus, \\\\(x^2 > kN \\ge N\\\\) and \\\\(x \\ge \\ceil{\\sqrt{N}}\\\\).\r\n\r\nOnce we start checking \\\\(x\\\\)s, we need to somehow figure out if there is a \\\\(y\\\\) such that \\\\(x^2 \\equiv y^2 \\mod N\\\\). Let\'s actually look at an example to see how we might do this: let\'s try and factor \\\\(N = 1649\\\\). \\\\(\\ceil{\\sqrt{1649}} = 41\\\\), so we\'ll start there:\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{2}\r\n41^2 &\\equiv 32 &&\\mod 1649 \\\\\\\\\r\n42^2 &\\equiv 115 &&\\mod 1649 \\\\\\\\\r\n43^2 &\\equiv 200 &&\\mod 1649 \\\\\\\\\r\n44^2 &\\equiv 287 &&\\mod 1649. \\\\\\\\\r\n&\\vdots\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nNone of these equations (\"**relations**\") have produced a second perfect square on the right-hand side (\"RHS\"), so we don\'t have \\\\(y\\\\) yet.\r\n\r\nOr *do* we…?\r\n\r\nIf we prime factorize each of those numbers on the RHS, we are lucky enough to find that\r\n\r\n\\\\[\r\n41^2 \\cdot 43^2 \\equiv 32 \\cdot 200 \\equiv (2^5)(2^3 \\cdot 5^2) \\equiv (2^4 \\cdot 5)^2  \\equiv 80^2 \\mod 1649.\r\n\\\\]\r\n\r\nThat might seem arbitrary and useless, but now realize that\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{2}\r\n(41 \\cdot 43)^2 &\\equiv 80^2 \\mod 1649 \\\\\\\\\r\n1763^2 &\\equiv 80^2 \\mod 1649 \\\\\\\\\r\n114^2 &\\equiv 80^2 \\mod 1649.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nLook familiar? \\\\(x^2 \\equiv y^2 \\mod N\\\\)—that\'s \\\\(x\\\\) and \\\\(y\\\\)! We can now invoke equation \\\\((1)\\\\): \\\\(\\gcd(114 + 80 \\c 1649) = 97\\\\) and \\\\(\\gcd(114 - 80 \\c 1649) = 17\\\\), thus \\\\(1649 = 17 \\cdot 97\\\\).\r\n\r\nThe magic here is the lucky fact that when we multiplied \\\\(41\\\\) and \\\\(43\\\\) together, the prime factorization of the corresponding RHS/reduction \\\\(\\t{mod } 1649\\\\) had all even exponents. This allowed the RHS to form a perfect square, which is then our \\\\(y^2\\\\). To mathematicize this idea, we find one or more values on the LHS, \\\\(L\\\\), such that\r\n\r\n\\\\[\r\n\\tag{2} \\begin{alignat\\*}{1}\r\n(L_1 L_2 \\dots)^2 &\\equiv q_1^{2e_1} q_2^{2e_2} \\dots \\\\\\\\[5pt]\r\n&\\equiv (q_1^{e_1} q_2^{e_2} \\dots)^2 \\mod N.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nThe LHS is then \\\\(x^2\\\\), and the RHS \\\\(y^2\\\\). In our \\\\(41 \\cdot 43\\\\) example, \\\\(L_1 = 41\\\\) and \\\\(L_2 = 43\\\\).\r\n\r\nAlso, notice how the LHS being a perfect square is guaranteed, since we are only checking perfect squares on the LHS in the first place. *Thus, the goal now is to find a combination of LHS values that multiply together to form a perfect square on the RHS.*\r\n\r\n# Part 2: optimizing RHS prime factorization using a factor base\r\n\r\nYou might\'ve realized that in order to get our solution there, we needed to prime factorize the RHS. And since it\'s \\\\(\\t{mod } N\\\\), the RHS has the potential to be pretty much as large as \\\\(N\\\\)! If we can\'t optimize this, we\'d have to ditch this method!\r\n\r\nLuckily, I would never waste your time, so an optimization is available. If we limit the numbers that \\\\(q\\\\) could be in equation \\\\((2)\\\\) into a set called a **factor base** (usually the smallest several primes), we will not need to fully factorize the RHS. Instead, we can just divide it by each prime in the factor base, which is astronomically faster, and throw away the RHS if it doesn\'t fully factorize by the end.\r\n\r\nWhile we do lose out on the more exotic RHS values that have larger prime factors, those are usually the super huge numbers that cost us a lot of time factorizing yet provide the least value. It is highly unlikely that they will have even exponents on their prime factors (beyond the small primes, which are found aplenty in other RHS values), and it is also unlikely for another RHS to share one of these large factors and make the exponent even. Thus, it is a sacrifice we are willing to make.\r\n\r\nA RHS that does make it through is called **\\\\(\\boldsymbol{B}\\\\)-smooth**, where \\\\(B\\\\), the **smoothness bound**, is the largest prime in our factor base. This smoothness bound is chosen by us, and in real implementations, it will still be a number with many digits[^factor base size source]. Thus we usually use another method like the [Sieve of Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes), which works well for smaller numbers, to generate our factor base from our chosen \\\\(B\\\\).\r\n\r\nWe will also find at least \\\\((\\pi(B) + 1)\\\\) \\\\(B\\\\)-smooth RHS that make it through before we start checking for even exponents. Here, \\\\(\\pi(B)\\\\) (not related to \\\\(3.14\\\\)…just [standard notation](https://en.wikipedia.org/wiki/Prime-counting_function)) is the number of primes less than or equal to \\\\(B\\\\), aka the number of primes in our factor base. You will see why we do this later.\r\n\r\n## Part 2: example\r\n\r\nLet\'s try an example with this optimization: \\\\(N = 539873\\\\), choosing \\\\(B = 17\\\\). \\\\(\\pi(B) = 7\\\\), so we want to generate eight \\\\(17\\\\)-smooth RHS values. As usual, we start our LHS with the square of \\\\(\\ceil{\\sqrt{N}} = 735\\\\), so:\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{3}\r\n735^2 &\\equiv 352 &&\\equiv 2^5 \\cdot 11 &&\\mod 539873 \\\\\\\\\r\n750^2 &\\equiv 22627 &&\\equiv 11^3 \\cdot 17 &&\\mod 539873 \\\\\\\\\r\n783^2 &\\equiv 73216 &&\\equiv 2^9 \\cdot 11 \\cdot 13 &&\\mod 539873 \\\\\\\\\r\n801^2 &\\equiv 101728 &&\\equiv 2^5 \\cdot 11 \\cdot 17^2 &&\\mod 539873 \\\\\\\\\r\n933^2 &\\equiv 330616 &&\\equiv 2^3 \\cdot 11 \\cdot 13 \\cdot 17^2 &&\\mod 539873 \\\\\\\\\r\n1049^2 &\\equiv 20655 &&\\equiv 3^5 \\cdot 5 \\cdot 17 &&\\mod 539873 \\\\\\\\\r\n1076^2 &\\equiv 78030 &&\\equiv 2 \\cdot 3^3 \\cdot 5 \\cdot 17^2 &&\\mod 539873 \\\\\\\\\r\n1273^2 &\\equiv 910 &&\\equiv 2 \\cdot 5 \\cdot 7 \\cdot 13 &&\\mod 539873.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nAs a reminder, the other LHS values were thrown away because they did not generate a \\\\(17\\\\)-smooth RHS, i.e. the RHS\'s prime factorization involved primes larger than \\\\(17\\\\) and were thus not in our factor base. If we play around with multiplying these values together to get a perfect square on the RHS, as we did earlier with equation \\\\((2)\\\\), we find a working solution:\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{2}\r\n(735 \\cdot 801)^2 &\\equiv 2^{10} \\cdot 11^2 \\cdot 17^2 &&\\mod 539873 \\\\\\\\[3pt]\r\n588735^2 &\\equiv (2^5 \\cdot 11 \\cdot 17)^2 &&\\mod 539873 \\\\\\\\[3pt]\r\n48862^2 &\\equiv 5984^2 &&\\mod 539873.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nThis is then our \\\\(x^2 \\equiv y^2 \\mod N\\\\), so using equation \\\\((1)\\\\), we have \\\\(\\gcd(48862 + 5984 \\c 539873) = 277\\\\) and \\\\(\\gcd(48862 - 5984 \\c 539873) = 1949\\\\). Thus, \\\\(539873 = 277 \\cdot 1949\\\\).\r\n\r\n# Part 3: optimizing smoothness detection, the core of quadratic sieve\r\n\r\nI said this in the last section:\r\n\r\n> Instead, we can just divide it by each prime in the factor base, which is astronomically faster, and throw away the RHS if it doesn\'t fully factorize by the end.\r\n\r\nI kinda just glossed over this process of checking if a number is \\\\(B\\\\)-smooth, especially when I ignored all the non-\\\\(B\\\\)-smooth numbers in the example as if it was a trivial matter. However, with \\\\(B\\\\) itself being of a considerable size in real implementations, we need a better strategy than just dividing many millions of options with millions of primes each. In fact, optimizing this is *the* key step of the quadratic sieve—the biggest thing that earlier methods like Fermat\'s lacked.\r\n\r\nIn the example earlier with our old method, we were generating\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{2}\r\n(735 + 0)^2 &\\equiv 352 &&\\mod 539873 \\\\\\\\\r\n(735 + 1)^2 &\\equiv 1823 &&\\mod 539873 \\\\\\\\\r\n(735 + 2)^2 &\\equiv 3296 &&\\mod 539873 \\\\\\\\\r\n(735 + 3)^2 &\\equiv 4771 &&\\mod 539873 \\\\\\\\\r\n&\\vdots\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nand trying to divide each of those with all the primes in our factor base, throwing away all those that were not fully factorized by the end. However, what if we could save time by figuring out ahead of time which numbers were divisible by which primes? For instance, if we had been able to tell that \\\\(736^2 \\equiv 1823\\\\) was not divisible by \\\\(2\\\\), we wouldn\'t need to waste time dividing it by \\\\(2\\\\).\r\n\r\nNow you might be thinking…wait, isn\'t that just the same thing? If I try dividing \\\\(1823\\\\) by \\\\(2\\\\) and it doesn\'t leave a whole number, then it\'s not divisible. Well, you\'ll see in a bit why it\'s so much faster.\r\n\r\n## Getting rid of the modulus in preparation\r\n\r\nLet\'s do this simplification to prepare us for the entreé of the entreé. In a real implementation, the range of LHS values we generate will never need to exceed \\\\(2N\\\\) because of just how small \\\\(\\pi(B)\\\\) still is compared to \\\\(N\\\\). And since we start at \\\\(\\left(\\ceil{\\sqrt{N}} \\right)^2\\\\), we have\r\n\r\n\\\\[\r\nN \\le \\t{LHS} \\le 2N,\r\n\\\\]\r\n\r\nwhich means\r\n\r\n\\\\[\r\n\\t{LHS} \\mod N = \\t{LHS} - N\r\n\\\\]\r\n\r\nIf we get a bit more detailed and use the concrete numbers from our previous example so we don\'t have those big ugly ceiling symbols floating everywhere, we have\r\n\r\n\\\\[\r\n(735 + i )^2 \\mod 539873 = (735 + i)^2 - 539873.\r\n\\\\]\r\n\r\n## Sieving\r\n\r\nSo, back to our goal: figuring out if \\\\((735 + i)^2 - 539873\\\\) is divisible by each prime in our factor base, so that we can avoid wasting time on divisions that don\'t work when testing for \\\\(B\\\\)-smoothness.\r\n\r\nFocusing in on our first prime, \\\\(2\\\\), we actually want to figure out *which* LHS values give us a RHS divisible by \\\\(2\\\\). In other words, we need to find the values of \\\\(i\\\\) so that\r\n\r\n\\\\[\r\n\\tag{3} (735 + i)^2 - 539873 \\equiv 0 \\mod 2.\r\n\\\\]\r\n\r\nThe most obvious step here would probably be to reduce \\\\(\\t{mod } 2\\\\):\r\n\r\n\\\\[\r\n(1 + i)^2 - 1 \\equiv 0 \\mod 2.\r\n\\\\]\r\n\r\nDoing the algebra, we have\r\n\r\n\\\\[\r\ni \\equiv 0 \\mod 2.\r\n\\\\]\r\n\r\nThis means even \\\\(i\\\\)s satisfy equation \\\\((3)\\\\); in other words, we\'ve found that only the LHS values \\\\((735 + 0)^2\\\\), \\\\((735 + 2)^2\\\\), \\\\((735 + 4)^2\\\\), \\\\(\\dots\\\\) produce a RHS that is divisible by \\\\(2\\\\)! So, to answer the question of why this is much faster than division: realize that we now only have to perform half as many divisions by \\\\(2\\\\) just using this one step! We\'ve avoided so many wasted division attempts.\r\n\r\nIf we repeat this process for \\\\(3\\\\), we get\r\n\r\n\\\\[\r\ni^2 - 2 \\equiv 0 \\mod 3,\r\n\\\\]\r\n\r\nwhich has no integer solution. This means that no value of \\\\(i\\\\), up to where the LHS reaches \\\\(2N\\\\), has a RHS that is divisible by \\\\(3\\\\)[^note about RHS divisible by 3]. This saves us even more work! Typically, we will get 2 solutions, since these are quadratic congruences.\r\n\r\nThe combined process of testing divisibility and then dividing to test smoothness is known as **sieving**: basically a fancy, fast method of elimination, which in this case efficiently filters out the \\\\(B\\\\)-smooth numbers while the letting rest through the holes of the sieve.\r\n\r\n## A more rigorous explanation of the sieve\r\n\r\nIn an effort to tie back to other, possibly more rigorous sources you may be referencing, I will also provide a more robust explanation of why this sieve works than just \"holes\".\r\n\r\nNotice that saying \"even \\\\(i\\\\)s give us RHS values divisible by \\\\(2\\\\)\" is the same as the following expression:\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{2}\r\n&(735 + 0 \\cdot 2)^2 &&\\mod 539873 \\\\\\\\\r\n\\equiv{ }&(735 + 1 \\cdot 2)^2 &&\\mod 539873 \\\\\\\\\r\n\\equiv{ }&(735 + 2 \\cdot 2)^2 &&\\mod 539873 \\\\\\\\\r\n\\equiv{ }&\\dots \\\\\\\\\r\n\\equiv{ }&0 \\mod 2,\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nor, as we saw earlier when got rid of the modulus,\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\n&(735 + 0 \\cdot 2)^2 - 539873 \\\\\\\\\r\n\\equiv{ }&(735 + 1 \\cdot 2)^2 - 539873 \\\\\\\\\r\n\\equiv{ }&(735 + 2 \\cdot 2)^2 - 539873 \\\\\\\\\r\n\\equiv{ }&\\dots \\\\\\\\\r\n\\equiv{ }&0 \\mod 2.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nIn typical math fashion, let\'s abstract away the numbers again, letting \\\\(x\\\\) (\\\\(= 735\\\\)) be the starting value with the ugly ceiling, \\\\(q\\\\) (\\\\(= 2\\\\)) be each prime in our factor base, and \\\\(f(x) = x^2 - N\\\\). Now, we have the generalized result\r\n\r\n\\\\[\r\nf(x) = f(x + q) = f(x + 2q) = \\dots \\equiv 0 \\mod q.\r\n\\\\]\r\n\r\nFinally, these results hold because\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\nf(x + kq) &\\equiv (x + kq)^2 - n \\\\\\\\[3pt]\r\n&\\equiv x^2 +2xkq + (kq)^2 - n \\\\\\\\[3pt]\r\n&\\equiv x^2 - n + 2xkq + (kq)^2 \\\\\\\\[3pt]\r\n&\\equiv f(x) + 2xkq + (kq)^2 \\\\\\\\[3pt]\r\n&\\equiv f(x) \\mod q.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nIn advanced implementations, multiple similar functions, or more specifically polynomials, are used in order to generate more relations, as well as parallelize the workload between many CPUs. But even just one polynomial is already an insane optimization. So insane, in fact…\r\n\r\n…why is it called the quadratic sieve? Because this polynomial is *quadratic*, and it\'s a *sieve*[^quadratic sieve meaning]…\r\n\r\n# Part 4: even more optimizations of the quadratic sieve\r\n\r\n## Fixing a hole in the sieve with powers of primes\r\n\r\nWhen we divide our selected RHS values after we sieve for divisibility, we only want to divide *once* with every prime, as doing so again incurs the risk of it no longer being divisible and thus having wasted a division once more. However, how would we deal with a RHS value like \\\\(8 = 2^2\\\\) then? It is \\\\(2\\\\)-smooth, but since we only divide by \\\\(2\\\\) once, we are left with \\\\(2\\\\), not \\\\(1\\\\), so our algorithm can\'t tell that it\'s \\\\(2\\\\)-smooth. Our sieve is not catching a relation that could\'ve been useful!\r\n\r\nTo fix this, we actually apply the divisibility check step to powers of prime numbers as well (that are still less than or equal to \\\\(B\\\\)), as if they were unofficial members of our factor base. In this case, we would test divisibility with and divide by \\\\(2\\\\), then \\\\(3\\\\), then \\\\(2\\\\) again—the *base* of \\\\(4 = 2^2\\\\). On this last step, we would realize that our RHS value \\\\(4\\\\), now a \\\\(2\\\\), is still divisible. Thus, we divide it again, finally getting it down to the \\\\(1\\\\) that passes the sieve. Similarly, testing \\\\(8 = 2^3\\\\) would let us divide \\\\(8\\\\) down from the \\\\(2\\\\) it was at to a \\\\(1\\\\). The best part is that since we\'re still using this sieve, we would never have to try a division that won\'t work.\r\n\r\n## Further optimizing division with logarithm approximations\r\n\r\nDespite all our efforts, the division can still be faster if we convert it into the much faster subtraction using logarithms. Remember that logarithms have the following properties (surprisingly, so many flashbacks to high school math in here!):\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\n\\log(ab) &= \\log(a) + \\log(b) \\\\\\\\[5pt]\r\n\\log \\left(\\frac{a}{b} \\right) &= \\log(a) - \\log(b).\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nTo see how we can use this, let\'s use a very simple example first. The prime factorization of \\\\(60\\\\) is \\\\(2^2 \\cdot 3 \\cdot 5\\\\). To get it to the \\\\(1\\\\) that indicates \\\\(5\\\\)-smoothness, we can divide as we\'ve been doing:\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\n&60 = 2 \\cdot 3 \\cdot 2 \\cdot 5 \\\\\\\\\r\n\\implies &60 \\div 2 \\div 3 \\div 2 \\div 5 = 1.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nHowever, we can also use logarithms and only have subtraction:\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{2}\r\n&\\log(60) ={ }&&\\log(2) + \\log(3) + \\log(2) + \\log(5) \\\\\\\\\r\n\\implies &\\log(60)\\ - &&\\log(2) - \\log(3) - \\log(2) - \\log(5) = 0.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nIn reality, computers will approximate the logarithm using a very fast algorithm, as well as round it to an integer. Thus, a value *close* to 0 (within about a logarithm of the original value, according to Wikipedia) will indicate a likely \\\\(B\\\\)-smooth number, and only on that tiny subset do we actually check with division to make sure they actually are \\\\(B\\\\)-smooth. And while logs still seem much more complicated than division, converting division with huge numbers to subtraction is still worth it.\r\n\r\nNow let\'s bring this concept into the example from earlier. Let\'s pick the relation \\\\(801^2 \\equiv 101728 \\mod 539873\\\\), testing for \\\\(17\\\\)-smoothness. Our sieve will discover divisibility with the following values in our factor base:\r\n<p></p>\r\n- \\\\(2\\\\)\r\n- \\\\(2\\\\) (from \\\\(2^2\\\\))\r\n- \\\\(2\\\\) (from \\\\(2^3\\\\))\r\n- \\\\(11\\\\)\r\n- \\\\(2\\\\) (from \\\\(2^4\\\\))\r\n- \\\\(17\\\\)\r\n- \\\\(2\\\\) (from \\\\(2^5\\\\))\r\n- \\\\(17\\\\) (from \\\\(17^2\\\\)).\r\n\r\nThen, we approximate[^log approx base]:\r\n\r\n\\\\[\r\n\\begin{gather\\*}\r\n\\log(101728) - \\log(2) - \\log(2) -\\log(2) - \\log(11) \\\\\\\\\r\n- \\log(2) - \\log(17) - \\log(2) - \\log(17) \\approx -2.\r\n\\end{gather\\*}\r\n\\\\]\r\n\r\nOur \\\\(-2\\\\) result is fairly close to \\\\(0\\\\)[^log approx error bound]. Thus, this relation is a likely candidate for \\\\(17\\\\)-smoothness, and we can double-check with division[^log approx double-checking].\r\n\r\n## Solving equation \\\\((3)\\\\) faster\r\n\r\nIn reality, equations like \\\\((3)\\\\) are still rather slow to solve using the method we did when our numbers get big. Instead, yet another algorithm, commonly [Tonelli-Shanks](https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm), is used. I\'m not going to cover it here for the sake of my sanity.\r\n\r\n## Detecting no solutions to equation \\\\((3)\\\\) faster\r\n\r\nWe saw in our earlier example that when we tested the prime \\\\(3\\\\), we had no (integer) solutions for\r\n\r\n\\\\[\r\n(735 + i)^2 - 539873 \\equiv 0 \\mod 3,\r\n\\\\]\r\n\r\nsince it reduced down to the unsolvable\r\n\r\n\\\\[\r\ni^2 - 2 \\equiv 0 \\mod 3.\r\n\\\\]\r\n\r\nA method like [Euler\'s criteron/Legendre symbol/Jacobi symbol](https://en.wikipedia.org/wiki/Euler%27s_criterion) can detect these no-solution cases without having to reduce it all the way, which is faster when there\'s large numbers. Usually, this optimization is applied when generating the factor base—we straight up discard a prime if it won\'t give us a solution. This probably involves too much group theory or fancy quadratic residue stuff, so again I\'ve decided that\'s beyond the scope of ~~my mental and physical health~~ this post.\r\n\r\n# Part 5: choosing the right relations to find \\\\(x\\\\) and \\\\(y\\\\) using linear algebra\r\n\r\nWe\'ve applied the crucial optimization (or two, or a dozen) that makes the quadratic sieve so fast and literally gives it its name, but there\'s one more thing that I\'ve been glossing over:\r\n\r\n> If we play around with multiplying these values together to get a perfect square on the RHS…\r\n\r\nAfter we finally figure out all our \\\\(B\\\\)-smooth relations, how *do* we quickly determine which ones to pick so that we get all even exponents and the RHS perfect square we\'re looking for?\r\n\r\nAn easy way to check if any single exponent is even is to reduce \\\\(\\t{mod } 2\\\\). To expand this to all the exponents in the \\\\(\\pi(B) + 1\\\\) equations, we can put these reductions into a table. Using the previous example yet again with \\\\(N = 539873\\\\), we have\r\n\r\n| LHS | Power of \\\\(2\\\\),<br>\\\\(\\t{mod } 2\\\\) | Power of \\\\(3\\\\),<br>\\\\(\\t{mod } 2\\\\) | Power of \\\\(5\\\\),<br>\\\\(\\t{mod } 2\\\\) | Power of \\\\(7\\\\),<br>\\\\(\\t{mod } 2\\\\) | Power of \\\\(11\\\\),<br>\\\\(\\t{mod } 2\\\\) | Power of \\\\(13\\\\),<br>\\\\(\\t{mod } 2\\\\) | Power of \\\\(17\\\\),<br>\\\\(\\t{mod } 2\\\\) |\r\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\r\n| \\\\(735^2\\\\) | 1 | 0 | 0 | 0 | 1 | 0 | 0 |\r\n| \\\\(750^2\\\\) | 0 | 0 | 0 | 0 | 1 | 0 | 1 |\r\n| \\\\(738^2\\\\) | 1 | 0 | 0 | 0 | 1 | 1 | 0 |\r\n| \\\\(801^2\\\\) | 1 | 0 | 0 | 0 | 1 | 0 | 0 |\r\n| \\\\(933^2\\\\) | 1 | 0 | 0 | 0 | 1 | 1 | 0 |\r\n| \\\\(1049^2\\\\) | 0 | 1 | 1 | 0 | 0 | 0 | 1 |\r\n| \\\\(1076^2\\\\) | 1 | 1 | 1 | 0 | 0 | 0 | 0 |\r\n| \\\\(1273^2\\\\) | 1 | 0 | 1 | 1 | 0 | 1 | 0 |\r\n\r\nIn classic math fashion, this table can then be collapsed into a matrix:\r\n\r\n\\\\[\r\n\\begin{bmatrix}\r\n1 & 0 & 0 & 0 & 1 & 0 & 0 \\\\\\\\\r\n0 & 0 & 0 & 0 & 1 & 0 & 1 \\\\\\\\\r\n1 & 0 & 0 & 0 & 1 & 1 & 0 \\\\\\\\\r\n1 & 0 & 0 & 0 & 1 & 0 & 0 \\\\\\\\\r\n1 & 0 & 0 & 0 & 1 & 1 & 0 \\\\\\\\\r\n0 & 1 & 1 & 0 & 0 & 0 & 1 \\\\\\\\\r\n1 & 1 & 1 & 0 & 0 & 0 & 0 \\\\\\\\\r\n1 & 0 & 1 & 1 & 0 & 1 & 0\r\n\\end{bmatrix}.\r\n\\\\]\r\n\r\nThat was a useful step, because now the problem becomes finding a combination of these rows that sums to the zero row vector\r\n\r\n\\\\[\r\n\\begin{bmatrix}\r\n0 & 0 & 0 & 0 & 0 & 0 & 0\r\n\\end{bmatrix},\r\n\\\\]\r\n\r\nwhich will indicate all even exponents. Note that we take the sum since multiplying the LHS values in equation \\\\((2)\\\\) is the same as *adding* the exponents on the RHS, and the values within this matrix are those (reduced) exponents.\r\n\r\nIf we take the transpose of this matrix, which simply converts these row vectors to more familiar column vectors, then we get a familiar-looking problem of linear algebra…\r\n\r\n\\\\[\r\n\\tag{4} \\begin{bmatrix}\r\n1 & 0 & 1 & 1 & 1 & 0 & 1 & 1 \\\\\\\\\r\n0 & 0 & 0 & 0 & 0 & 1 & 1 & 0 \\\\\\\\\r\n0 & 0 & 0 & 0 & 0 & 1 & 1 & 1 \\\\\\\\\r\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\\\\\\r\n1 & 1 & 1 & 1 & 1 & 0 & 0 & 0 \\\\\\\\\r\n0 & 0 & 1 & 0 & 1 & 0 & 0 & 1 \\\\\\\\\r\n0 & 1 & 0 & 0 & 0 & 1 & 0 & 0\r\n\\end{bmatrix} \\vec{x} = \\vec{0}.\r\n\\\\]\r\n\r\nWith the matrix transposed, each \\*column\\* now corresponds to a LHS value, and a solution will give us the zero *column* vector (thus all even exponents, RHS perfect square, \\\\(y^2\\\\), you know the drill).\r\n\r\nTo find our solution, we can simply use Gaussian elimination, unless of course you prefer to work out an 8-variable system with good old substitution and elimination. We make sure to continue working \\\\(\\t{mod } 2\\\\) (e.g. \\\\(2\\\\) becomes \\\\(0\\\\), \\\\(-1\\\\) becomes \\\\(1\\\\)), and eventually we arrive at the following RREF matrix (with [a bit of help](https://github.com/mjcross/mod2MatrixTools)):\r\n\r\n\\\\[\r\n\\begin{bmatrix}\r\n1 & 0 & 0 & 1 & 0 & 0 & 1 & 0 & 0 \\\\\\\\\r\n0 & 1 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\\\\\\r\n0 & 0 & 1 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\\\\\r\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\\\\\r\n0 & 0 & 0 & 0 & 0 & 1 & 1 & 0 & 0 \\\\\\\\\r\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 \\\\\\\\\r\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\r\n\\end{bmatrix}.\r\n\\\\]\r\n\r\nReading the solutions off the matrix, we have\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{2}\r\nx_1 & = -&&x_4 - x_7 \\\\\\\\\r\nx_2 & = -&&x_7 \\\\\\\\\r\nx_3 & = -&&x_5 \\\\\\\\\r\nx_4 & = &&x_4 \\\\\\\\\r\nx_5 & = &&x_5 \\\\\\\\\r\nx_6 & = -&&x_7 \\\\\\\\\r\nx_7 & = &&x_7 \\\\\\\\\r\nx_8 & = &&0\r\n\\end{alignat\\*},\r\n\\\\]\r\n\r\nor (in \\\\(\\t{mod } 2\\\\)):\r\n\r\n\\\\[\r\n\\tag{5} \\vec{x} = x_4 \\begin{bmatrix}\r\n1 \\\\\\\\\r\n0 \\\\\\\\\r\n0 \\\\\\\\\r\n1 \\\\\\\\\r\n0 \\\\\\\\\r\n0 \\\\\\\\\r\n0 \\\\\\\\\r\n0\r\n\\end{bmatrix} + x_5 \\begin{bmatrix}\r\n0 \\\\\\\\\r\n0 \\\\\\\\\r\n1 \\\\\\\\\r\n0 \\\\\\\\\r\n1 \\\\\\\\\r\n0 \\\\\\\\\r\n0 \\\\\\\\\r\n0\r\n\\end{bmatrix} + x_7 \\begin{bmatrix}\r\n1 \\\\\\\\\r\n1 \\\\\\\\\r\n0 \\\\\\\\\r\n0 \\\\\\\\\r\n0 \\\\\\\\\r\n1 \\\\\\\\\r\n1 \\\\\\\\\r\n0\r\n\\end{bmatrix}.\r\n\\\\]\r\n\r\nWhile we have found our solution, it may still be unclear how this will tell us which LHS values to pick. If you recall equation \\\\((4)\\\\), multiplying a solution \\\\(\\vec{x}\\\\) with the transposed matrix will give us the zero vector. Expanding this matrix-vector multiplication, we have\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{3}\r\n&&&(\\t{first } \\vec{x} \\t{ element} &&\\cdot \\t{ first col of matrix}) \\\\\\\\\r\n&&+{ }&(\\t{second } \\vec{x} \\t{ element} &&\\cdot \\t{ second col of matrix}) \\\\\\\\\r\n&&+{ }&(\\t{third } \\vec{x} \\t{ element} &&\\cdot \\t{ third col of matrix}) \\\\\\\\\r\n&&+{ }&\\dots \\\\\\\\\r\n&&={ }&\\vec{0}.\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nWe can see that a solution \\\\(\\vec{x}\\\\) basically \"picks\" how many of each column to add in order to get to the zero vector, or *which* columns to add when we\'re working \\\\(\\t{mod } 2\\\\) and every element is \\\\(0\\\\) or \\\\(1\\\\). In addition, recall that the columns of our transposed matrix correspond to LHS values. Putting these together, a solution \"picks\" which LHS values to multiply so that we get the zero vector and thus all even exponents.\r\n\r\nIn this example, our solution \\\\(\\vec{x}\\\\) can be *any linear combination* of the three vectors in \\\\((5)\\\\). The first vector \"picks\" the first and fourth columns, or LHS values (\\\\(735^2\\\\) and \\\\(801^2\\\\)). The second vector picks the third and fifth ones (\\\\(783^2\\\\) and \\\\(933^2\\\\)), and the last vector picks the first, second, sixth, and seventh ones. Thus, bringing in the linear combination, any values of \\\\(x_4\\\\), \\\\(x_5\\\\), and \\\\(x_7\\\\) for\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\n&x_4 (735^2 \\cdot 801^2) \\\\\\\\\r\n+\\ &x_5 (783^2 \\cdot 933^2) \\\\\\\\\r\n+\\ &x_7 (735^2 \\cdot 750^2 \\cdot 1049^2 \\cdot 1076^2)\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nwill give us all even exponents and thus a perfect square on the RHS! When we found \\\\((735^2 \\cdot 801^2)\\\\) in the earlier section to obtain \\\\(y^2\\\\), we had been using the case where \\\\(x_4 = 1 \\c x_5 = 0 \\c x_7 = 0\\\\).\r\n\r\nIn addition, the reason we used \\\\(\\pi(B) + 1\\\\) equations was so that there would be one more equation than RHS exponent. Bringing this concept to our transposed matrix, that means that we would have one more variable than equation, or one more column than row. If you know your linear algebra, you\'ll know that this guarantees there are some linearly dependent columns/we will have at least one free variable[^linear algebra conceptual hell], and thus our solution won\'t be just \\\\(\\vec{0}\\\\). Ultimately, this means that we are guaranteed some way to find a combination of LHS values to multiply to get the RHS perfect square, \\\\(y^2\\\\).\r\n\r\nIt\'s still not really fast enough to crack RSA[^general number field sieve], and there are even more small optimizations that we haven\'t covered, like partial relations and [this monster of a post](https://crypto.stackexchange.com/a/93504)—but *wow* is it a beautiful fusion of ideas from all across math.\r\n\r\n# The meal is finally over\r\n\r\nTo recap, the major steps of this process are:\r\n<p></p>\r\n1. Pick a smoothness bound \\\\(B\\\\).\r\n2. Generate a factor base (Sieve of Eratosthenes).\r\n3. Sieve for at least \\\\((\\pi(B) + 1)\\\\) \\\\(B\\\\)-smooth relations (quadratic sieve + optimizations galore).\r\n4. Pick a combination of these relations to give us perfect squares on both sides (linear algebra).\r\n5. Use that perfect square relation we\'ve constructed to find a factor of \\\\(N\\\\) (the \\\\(\\gcd\\\\) thing of equation \\\\((1)\\\\)).\r\n\r\nMy eyes hurt, my brain hurts, my throat is dry—but I had so much fun. Who knew that the Greeks putting their drama points into mythology would give us all this? Who knew that linear algebra could be applied to number theory and cryptography? Who knew that what I had innocently thought was just gonna be *yet another algorithm* would turn into such a beautiful mess?\r\n\r\nAnd who knew that missing classes would give me a deeper understanding of these topics than I would\'ve ever gotten from three hours of lecture, as clearly demonstrated by my notes?\r\n\r\n![](../static/blogpage/3/images/162/notes.png)\r\n\r\nTo be fair, skipping class, doing triple the work, and ultimately getting a 100% on  a midterm with a 58% average[^final exam] is pretty much also how my entire linear algebra journey went, but that\'s a story for another day…\r\n\r\n[^Gasarch cite]: I have to credit him for being almost the sole thing that got me through this. His slides also provided the foundation for many of my examples and explanations to come.\r\n[^factor base size source]: A guideline is given in the Handbook of Applied Cryptography, p. 97 by Menezes, Van Oorschot, and Vanstone. Assuming I understood it right, they suggest \\\\(B \\approx e^{0.5 \\sqrt{\\Ln{N} \\Ln{\\Ln{N}}}}\\\\), which with a 2048-bit \\\\(N\\\\) breaks Desmos and is given by SageMath as having around 22 digits in base 10—still much better than 600+!\r\n[^note about RHS divisible by 3]: Note that in our example earlier, we *did* find that \\\\(1049^2\\\\) and \\\\(1076^2\\\\) had RHS values divisible by \\\\(3\\\\)—this is only because we had a *very* small \\\\(N\\\\) and a large \\\\(\\pi(B)\\\\) in comparison, and thus \\\\(1049^2 > 2N\\\\). Our assumption for this optimization to work was that we\'d never need a LHS value greater than \\\\(2N\\\\)—realistically, if we\'re factoring such small numbers, there is no point in using these optimizations anyway.\r\n[^quadratic sieve meaning]: In fact, the quadratic sieve sometimes refers to this sieving step itself—the exact semantics (as usual) are a bit blurred.\r\n[^log approx base]: (assuming we use base \\\\(e\\\\), which this [Stack Exchange answer](https://stackoverflow.com/a/56104549) seems to suggest and also sounds like the most sane base to assume)\r\n[^log approx error bound]: I wasn\'t able to find too many sources on what the error bound should be, but [Wikipedia](https://en.wikipedia.org/wiki/Quadratic_sieve#Checking_smoothness_by_sieving) suggests around the \\\\(\\log\\\\) of the original, non-squared LHS (in this case, \\\\(\\log(801)\\\\), which is about \\\\(7\\\\)—very high in comparison to our original \\\\(\\log(101728) \\approx 12\\\\), but again it\'ll be much better when we get to really big numbers). They don\'t have a citation for that though, and I couldn\'t figure out where it came from…\r\n[^log approx double-checking]: Or, according to [Wikipedia](https://en.wikipedia.org/wiki/Quadratic_sieve#Checking_smoothness_by_sieving) (again), straight up factorizing with Pollard\'s rho or something if the primes are still too big for division to be worth it. This is because we lose the divisibility information after our approximation, and thus there will be wasted divisions.\r\n[^linear algebra conceptual hell]: I could probably say this ten different ways, because linear algebra is just like that.\r\n[^general number field sieve]: There\'s only one faster algorithm known, the general number field sieve. It\'s built off the same principle but even more complicated, and it might only take about [2 million years](https://eprint.iacr.org/2010/006.pdf) to crack an RSA key half the current recommended size. GNFS\'s complexity grows somewhere between polynomially and exponentially with increasing key sizes—although admittedly, this was estimated on a single CPU from 2010.\r\n[^final exam]: We don\'t talk about the final…\r\n[^nofootnote sources]: Sources: [Gasarch\'s slides and associated lectures](https://www.cs.umd.edu/users/gasarch/COURSES/456/F19/slides.html) | [Good old Wikipedia](https://en.wikipedia.org/wiki/Quadratic_sieve) | [Akintunde Ayodele\'s Medium post](https://medium.com/nerd-for-tech/heres-how-quadratic-sieve-factorization-works-1c878bc94f81)',NULL,1,3),(185,'2024-07-01 19:22:07','What\'s the best way to guess answers for online quizzes with unlimited attempts?','whats-the-best-way-to-guess-answers-for-online-quizzes-with-unlimited-attempts','INVENTING THE EVIL STEPSISTER OF BINARY SEARCH TO SOLVE THE CANVAS QUIZ','I have a homework assignment due in eight hours, but here we are, embarking on Yet Another Useless Project™.\r\n\r\nBut this time, the homework is the mastermind behind its own murder.\r\n\r\nThis assignment is a multiple-choice Canvas quiz, with unlimited attempts and with the score shown after each attempt. In the past, I\'ve always wondered about the most efficient way to trial and error all the answers on a quiz like this. But today, I decide to take a serious crack at it. No longer will my academic career be bogged down by failed attempts to solve the Canvas quiz once and for all.\r\n\r\n# Brainstorming the approach\r\n\r\nI will use the number of attempts (in proportion to the number of questions) as my metric of determining how \"good\" a guessing strategy is.\r\n\r\nAssuming I lost my mind after too many proofs and could not conjure up the answer to even a single question, the most basic approach would be to just \"bogoguess\": guess completely randomly until I get 100%. Obviously, this wouldn\'t be the fastest way.\r\n\r\n![if this is a cybersecurity class you might get extra credit though](../static/blogpage/2/images/185/canvas_dos.png)\r\n\r\nIf we try to improve on this though, we will need a way to tell if an answer was right, so that we can strategically adjust our guesses. The simplest way to accomplish this would be to rotate through the options for one question while leaving the other ones blank, and whichever option increases our score will be the right answer. Then, we repeat this for every question.\r\n\r\n# Guessing one question at a time\r\n\r\nTo find the number of attempts we will need on average with this first approach, we need to look at the average amount of tries it will take per problem.\r\n\r\nNotice that for the first try, there is a \\\\(\\frac{1}{4}\\\\) chance we will guess the right answer, assuming 4 options per question.\r\n\r\nIf that isn\'t right, we have a \\\\(\\frac{1}{3}\\\\) chance of guessing the next one right, or a \\\\(\\left(1 - \\frac{1}{4} \\right) \\cdot \\frac{1}{3} = \\frac{1}{4}\\\\) chance in total.\r\n\r\nIf the second guess isn\'t right, we have a \\\\(\\frac{1}{2}\\\\) chance of guessing the third one right, or a \\\\(\\left(1 - \\frac{1}{4} - \\frac{1}{4} \\right) \\cdot \\frac{1}{2} = \\frac{1}{4}\\\\) chance in total.\r\n\r\nLastly, we will have a \\\\(1 - \\frac{1}{4} - \\frac{1}{4} - \\frac{1}{4} = \\frac{1}{4}\\\\) chance in total of guessing right on the last try.\r\n\r\nHowever, notice that if we\'ve been wrong for three of the four options, we automatically know what the answer must be, so we can start guessing the next question on the same attempt we finally deduce the current one. In other words, we will never need to spend four attempts guessing one question, except for on the last question where there is no next question to overlap the guessing with. We will pretend this last extra attempt does not exist as it is a constant term that becomes insignificant with more questions.\r\n\r\nIn summary, our chances of choosing the right answer after any number of attempts is given by this probability mass function (PMF):\r\n\r\n\\\\[\r\n\\begin{cases}\r\n1&: \\frac{1}{4} \\\\\\\\[5pt]\r\n2&: \\frac{1}{4} \\\\\\\\[5pt]\r\n3&: \\frac{1}{2}.\r\n\\end{cases}\r\n\\\\]\r\n\r\nIts expected value is thus\r\n\r\n\\\\[\r\n1 \\cdot \\frac{1}{4} + 2 \\cdot \\frac{1}{4} + 3 \\cdot \\frac{1}{2} = \\frac{9}{4}.\r\n\\\\]\r\n\r\nIt will take, on average, 2.25 attempts per question to guess the right answer.\r\n\r\nSince this method involves procedurally trying a single question at a time, the total number of attempts to get an 100% is the same as the number of attempts per question times the number of questions. In other words, for \\\\(n\\\\) questions, we will need \\\\(2.25n\\\\) attempts on average to get our 100%.\r\n\r\nAnd because I\'m highly insecure about my skills in probability, I wrote a bit of Python to confirm my calculations:\r\n\r\n\\dropdown\r\n\r\n\\summary\r\n\r\nThe pineapple on a mathematician\'s pizza\r\n\r\n\\endsummary\r\n\r\n```py\r\n# 1_question_simulator.py\r\nimport random\r\n\r\ntrials = 10000\r\nquestions = 120\r\nchoices = 4\r\nattempts = 0\r\n\r\nfor _ in range(trials):\r\n    for question in range(questions):\r\n        correct = random.randint(0, choices - 1)\r\n        for guess in range(choices - 1): # -1 for last attempt skip\r\n            attempts += 1\r\n            if guess == correct:\r\n                break\r\n\r\nprint((attempts / trials) / questions)\r\n```\r\n\r\nTruly a Python moment that this took a whole half second to run. I\'m totally not foreshadowing here…\r\n\r\n\\enddropdown\r\n\r\n# Guessing two questions at a time\r\n\r\nHow about guessing two questions at a time? If it takes less than 4.5 attempts on average to get both right, then we would save time over the previous strategy.\r\n\r\n## The approach\r\n\r\nOnce again, let\'s focus on each group of questions we answer at a time, in this case a group of two questions. Eventually, we\'ll try to build up another PMF of the number of attempts to get both questions right, and we can read our solutions off the PMF.\r\n\r\nI noticed that if I guess any two random options, there is a \\\\(\\frac{1}{4} \\cdot \\frac{1}{4} = \\frac{1}{16}\\\\) chance of both answers being correct.\r\n\r\nTo get one right, there are two ways: either only the first one is right, or only the second one is right. Adding these together, there is a \\\\(2 \\left(\\frac{1}{4} \\cdot \\frac{3}{4} \\right) = \\frac{3}{8}\\\\) chance to get one question right.\r\n\r\nGetting both questions wrong has a \\\\(\\frac{3}{4} \\cdot \\frac{3}{4} = \\frac{9}{16}\\\\) chance. If this happens, we make a second attempt, choosing different answers for both. Now, we have a \\\\(\\frac{1}{3}\\\\) chance each to get the answer right instead of \\\\(\\frac{1}{4}\\\\), since we\'ve eliminated an option for both. This leads to the second-round probabilities of:\r\n<p></p>\r\n- \\\\(\\frac{2}{3} \\cdot \\frac{2}{3} = \\frac{4}{9}\\\\) to get both wrong.\r\n- \\\\(2 \\left(\\frac{2}{3} \\cdot \\frac{1}{3} \\right) = \\frac{4}{9}\\\\) to get one right (there are still two ways to do this).\r\n- \\\\(\\frac{1}{3} \\cdot \\frac{1}{3} = \\frac{1}{9}\\\\) to get both right.\r\n\r\nWe can follow the same logic the rest of the way.\r\n\r\nLet\'s build a probability tree to visualize this better:\r\n\r\n![](../static/blogpage/2/images/185/2_questions_probability_tree.png)\r\n\r\nTake a moment to convince yourself that this makes sense.\r\n\r\nHow does this help, you might ask? Well, notice that each column corresponds to one attempt. After 1 attempt, on the first, leftmost column of the tree, there is a \\\\(\\frac{1}{16}\\\\) chance in total of having both questions right (as shown in the bottom left). Similarly, after 2 attempts, on the second column, there is a \\\\(\\frac{1}{16} + \\frac{1}{8} = \\frac{3}{16}\\\\) chance of getting both questions right.\r\n\r\nFollowing this logic, and remembering that we still won\'t need a fourth attempt for any group of two questions (the fourth attempt is in the tree for visualizations\' sake), we can build our complete PMF:\r\n\r\n\\\\[\r\n\\begin{cases}\r\n1&: \\frac{1}{16} \\\\\\\\[5pt]\r\n2&: \\frac{3}{16} \\\\\\\\[5pt]\r\n3&: \\frac{12}{16}.\r\n\\end{cases}\r\n\\\\]\r\n\r\nThis means that the expected value, the average number of attempts to get both questions right, is\r\n\r\n\\\\[\r\n1 \\cdot \\frac{1}{16} + 2 \\cdot \\frac{3}{16} + 3 \\cdot \\frac{12}{16} = 2.6875.\r\n\\\\]\r\n\r\n## Accounting for extra attempts\r\n\r\nThere is one thing that our current calculations don\'t account for: if we get only 1 question correct for the first time, we have to spend an extra attempt figuring out which one is the correct one. We can do this by leaving one of the questions blank on this extra turn to see if we still have our point or not. Thus, we have:\r\n\r\n![](../static/blogpage/2/images/185/2_questions_probability_tree_upgraded.png)\r\n\r\nWith this new probability tree, our PMF is\r\n\r\n\\\\[\r\n\\begin{cases}\r\n1&: \\frac{1}{16} \\\\\\\\[5pt]\r\n2&: \\frac{1}{16} \\\\\\\\[5pt]\r\n2 + 1&: \\frac{1}{8} \\\\\\\\[5pt]\r\n3&: \\frac{1}{8} \\\\\\\\[5pt]\r\n3 + 1&: \\frac{5}{8},\r\n\\end{cases}\r\n\\\\]\r\n\r\nthus the average number of tries to get both right is now\r\n\r\n\\\\[\r\n1 \\cdot \\frac{1}{16} + 2 \\cdot \\frac{1}{16} + 3 \\cdot \\frac{1}{4} + 4 \\cdot \\frac{5}{8} = 3.4375.\r\n\\\\]\r\n\r\nRemember that this is the number of attempts to get *two* questions right—thus, our overall number of attempts averages at \\\\(1.71875n\\\\). Significantly better than the \\\\(2.25n\\\\) of guessing one question at a time!\r\n\r\n# Guessing three questions at a time\r\n\r\nOh boy.\r\n\r\nIf we get none or all right out of our group of three, the same logic as with guessing two questions at a time will apply, just with tweaked numbers. However, if we get one or two right, everything\'s gonna get a bit more dank.\r\n\r\n## Binary check, the evil stepsister of binary search\r\n\r\nIf we get one right, then there are three possibilities now as to which one is actually right. I came up with the idea of a \"binary check\" for 3 or more questions:\r\n<p></p>\r\n1. If we only have one non-blank option left:\r\n    - If the score is 1, we\'ve found the right answer.\r\n    - If the score is 0, the right answer can still be logically deduced without needing an extra attempt.\r\n2. If we haven\'t found it yet, try again with a random half of the questions blank.\r\n3. Check our score:\r\n    - If our score is 0, then the right answer must\'ve been in the half that we turned blank. \"Flip\" our halves by making our current half blank and unblanking the other half. Then, repeat from step 1, only considering the newly unblanked half from now on.\r\n    - If our score is 1, then the right answer must be in the half we still have. Repeat from step 1, only considering our current half from now on.\r\n\r\nFor example, let\'s say we guessed all As for seven questions and the only one that is actually A is question 4. If we (arbitrarily) choose to blank the second half, and round in favor of blanking, we have:\r\n\r\n| <span data-col-width=\"15%\">Attempt</span> | <span data-col-width=\"6%\">1</span> | <span data-col-width=\"6%\">2</span> | <span data-col-width=\"6%\">3</span> | <span class=\"red\" data-col-width=\"6%\">4</span> | <span data-col-width=\"6%\">5</span> | <span data-col-width=\"6%\">6</span> | <span data-col-width=\"6%\">7</span> | <span data-col-width=\"10%\">Score</span> | <span data-col-width=\"33%\">Action</span> |\r\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\r\n| **1** | <span class=\"red\">A</span> | <span class=\"red\">A</span> | <span class=\"red\">A</span> | 0 | 0 | 0 | 0 | 0 | Flip and only consider<br>xxxAAAA from now on |\r\n| **2** | 0 | 0 | 0 | <span class=\"red\">A</span> | <span class=\"red\">A</span> | 0 | 0 | 1 | Only consider xxxAAxx<br>from now on |\r\n| **3** | 0 | 0 | 0 | <span class=\"red\">A</span> | 0 | 0 | 0 | 1 | Found! |\r\n\r\nAs an extra example: if we instead choose to blank the first half, and round in favor of not blanking, we have:\r\n\r\n| <span data-col-width=\"15%\">Attempt</span> | <span data-col-width=\"6%\">1</span> | <span data-col-width=\"6%\">2</span> | <span data-col-width=\"6%\">3</span> | <span class=\"red\" data-col-width=\"6%\">4</span> | <span data-col-width=\"6%\">5</span> | <span data-col-width=\"6%\">6</span> | <span data-col-width=\"6%\">7</span> | <span data-col-width=\"10%\">Score</span> | <span data-col-width=\"33%\">Action</span> |\r\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\r\n| **1** | 0 | 0 | 0 | <span class=\"red\">A</span> | <span class=\"red\">A</span> | <span class=\"red\">A</span> | <span class=\"red\">A</span> | 1 | Only consider xxxAAAA<br>from now on |\r\n| **2** | 0 | 0 | 0 | 0 | 0 | <span class=\"red\">A</span> | <span class=\"red\">A</span> | 0 | Flip and only consider<br>xxxAAxx from now on |\r\n| **3** | 0 | 0 | 0 | 0 | <span class=\"red\">A</span> | 0 | 0 | 0 | We can deduce that the<br>correct one must be 4 |\r\n\r\nJust like with binary search, we divide our sample size in half with each step; thus, this strategy should take an average of \\\\(\\Log{2}{b}\\\\) extra attempts, where \\\\(b\\\\) is the sample size. In the context of quiz guessing, \\\\(b\\\\) is the number of incorrect questions we had the attempt prior, or the number of questions that could be the right answer.\r\n\r\nWe do need to account for the imperfection of reality, though[^imperfect reality]. For example, with a sample size of \\\\(b = 6\\\\), the logarithm formula tells us that we will have an average of about \\\\(2.585\\\\) extra attempts. However, if you manually binary check each of the 6 places the correct answer could be, you will find that the actual average is \\\\(\\frac{16}{6}\\\\), or \\\\(2. \\overline{6}\\\\), regardless of which half you blank or how you round. Testing more values of \\\\(k\\\\), we realize that we actually have to round our logarithm output to the nearest multiple of \\\\(\\frac{1}{b}\\\\).\r\n\r\nAlso, notice that if we get two right, this is the same as getting one wrong—in other words, it\'s like an inverted binary check. Generalizing this, we will never need \\\\(a\\\\), the number of targets, to be more than half of \\\\(b\\\\), our sample size. Instead, we just invert the whole search once we hit the halfway mark. I will call this property \"symmetry\"[^abstract algebra].\r\n\r\nI will assume that binary checking is the fastest way to check here, because I can\'t think of anything that\'s faster. The ethos of my analysis is definitely in jeopardy now, but I\'m not expecting to be fully comprehensive anyway—that would take actual research by actual mathematicians, not several days of work by some random kid squeezed in between homework, finals, traveling, and not realizing that the fourth attempt was overlappable and having to rerun days of calculations.\r\n\r\n## Back to finding the number of attempts\r\n\r\n![](../static/blogpage/2/images/185/3_questions_probability_tree.png)\r\n\r\nThis tells us that our PMF is (with appropriate rounding for logs)\r\n\r\n\\\\[\r\n\\begin{cases}\r\n1&: \\frac{1}{64} \\\\\\\\[5pt]\r\n2&: \\frac{1}{64} \\\\\\\\[5pt]\r\n2 + \\frac{5}{3}&: \\frac{3}{32} \\\\\\\\[5pt]\r\n3&: \\frac{1}{32} \\\\\\\\[5pt]\r\n3 + \\frac{5}{3}&: \\frac{15}{32} \\\\\\\\[5pt]\r\n3 + \\frac{5}{3} + 1&: \\frac{3}{8}.\r\n\\end{cases}\r\n\\\\]\r\n\r\nSumming this up the same way as before, we have an average of about \\\\(4.797\\\\) attempts per 3 questions, or \\\\(1.599n\\\\) total attempts. Still improving, despite needing more extra turns!\r\n\r\n\\dropdown\r\n\r\n\\summary\r\n\r\nBy the way, if you weren\'t completely convinced of how \\\\(a\\\\) and \\\\(b\\\\) are calculated for the number of extra attempts a binary check incurs:\r\n\r\n\\endsummary\r\n\r\nHere\'s an annotated section of the tree with more hints:\r\n\r\n![lorem ipsum dolor sit amet, my sanity is like air in a cotton clarinet](../static/blogpage/2/images/185/3_questions_probability_tree_annotated.png)\r\n\r\nThis is totally not because I spent a long time making that for a piece of analysis I no longer have.\r\n\r\n\\enddropdown\r\n\r\n# Can we find a pattern?\r\n\r\n> pattern good<br>\r\n> — me\r\n\r\nIf you look at the probability tree until your eyes start to water, you might be able to find some patterns or deduce where certain numbers are coming from. These generalizations will be very helpful for figuring out how many attempts we need without having to lose increasing amounts of marbles to drawing big probability trees.\r\n\r\nFor example, if:\r\n\r\n- \\\\(k\\\\) is the number of questions we are guessing at a time,\r\n- \\\\(i\\\\) is the number of incorrect answers we still have (out of our group of \\\\(k\\\\)) at any point on the tree,\r\n- and logically \\\\(k - i\\\\) is our score at any intermediate point on the tree,\r\n\r\nthen we can turn the three-question probability tree from earlier into…\r\n\r\n![](../static/blogpage/2/images/185/3_questions_probability_tree_generalized.png)\r\n\r\nAgain, take a few moments, or a few hours, to digest this. Rhetorically analyze my color choices. Stare upon my Frankenstein\'s monster until your eyes bleed. I want you to see spindly LaTeX arms in your sleep.\r\n\r\n## An explanation of the combinatorics\r\n\r\nHere, I will attempt to condense countless hours of discovery and sleep deprivation into a few paragraphs. For simplicity, and for the health of your eyes, let\'s look at the branch with \\\\(i = 2\\\\) on the first attempt:\r\n\r\n![](../static/blogpage/2/images/185/3_questions_i2_branch.png)\r\n\r\nNotice that at every attempt, we choose from a sample/set of \\\\(i\\\\) elements. Remember that \\\\(i\\\\) is the number of questions we still have incorrect. Thus, the combinations represent the number of ways to get questions correct from our pool of \\\\(i\\\\) incorrect questions.\r\n\r\nThen, observe how the bottom path in a fork chooses \\\\(i - 0\\\\) items, then the path above chooses \\\\(i - 1\\\\) items, and so on until we reach \\\\(i - i = 0\\\\). In English, this means:\r\n<p></p>\r\n- The \\\\(i -{ }\\\\)<span class=\"red\">\\\\(0\\\\)</span> fork represents getting all (\"all but <span class=\"red\">\\\\(0\\\\)</span>\") remaining questions right.\r\n- The \\\\(i -{ }\\\\)<span class=\"red\">\\\\(1\\\\)</span> fork represents getting all but <span class=\"red\">\\\\(1\\\\)</span> remaining question right.\r\n- The \\\\(i -{ }\\\\)<span class=\"red\">\\\\(2\\\\)</span> fork represents getting all but <span class=\"red\">\\\\(2\\\\)</span> remaining questions right.\r\n- The \\\\(i -{ }\\\\)<span class=\"red\">\\\\(i\\\\)</span> fork represents getting no (\"all but <span class=\"red\">\\\\(i\\\\)</span>\") remaining questions right.\r\n\r\nNow, take a moment to convince yourself that the probabilities down each branch makes sense, specifically the fractions\' exponents. The color-coding is there, in both the bullet points and the probability tree, to help you see where these exponents come from. The red numbers are the number of questions still wrong after an attempt (whereas \\\\(i\\\\) is before the attempt). If you\'re red-black colorblind, I\'m sorry—I couldn\'t think of another way to show these cleanly.\r\n\r\n# The generalized binary check\r\n\r\nSo far, we\'ve only seen binary check used for finding one target or the inverse of one target. However, one we start checking 4 questions at a time, there is the possibility of getting 2 out of 4 right. How do we binary check *that*?\r\n\r\nWell, luckily for us, binary check does work for finding multiple targets too. And on first glance, it might appear to take \\\\(a \\Log{2}{b}\\\\) steps, where \\\\(a\\\\) is the number of targets we need to find and \\\\(b\\\\) is still the sample size of questions to search in. Or, in the context of the problem:\r\n<p></p>\r\n- The number of newly-correct answers to check for, \\\\(a\\\\), is the most recent score minus the score from before the current attempt (plus symmetry).\r\n- The sample size of questions that could be correct, \\\\(b\\\\), is still \\\\(k\\\\) minus the score from the previous attempt.\r\n\r\nHowever, multiple-target binary check is actually even more efficient than that! This is because we are not just performing a binary check for one target, then resetting all the way to the beginning, then doing it again for the next target. Instead, we gain \"intel\" about the other targets while searching for one of them based on the changes in the score, allowing us to not have to reset completely from the beginning. Here\'s an example to hopefully illustrate what \"intel\" means, where our four targets are 2, 5, 6, and 10:\r\n\r\n| <span data-col-width=\"9.5%\">Attempt</span> | <span data-col-width=\"4%\">1</span> | <span class=\"red\" data-col-width=\"4%\">2</span> | <span data-col-width=\"4%\">3</span> | <span data-col-width=\"4%\">4</span> | <span class=\"red\" data-col-width=\"4%\">5</span> | <span class=\"red\" data-col-width=\"4%\">6</span> | <span data-col-width=\"4%\">7</span> | <span data-col-width=\"4%\">8</span> | <span data-col-width=\"4%\">9</span> | <span class=\"red\" data-col-width=\"4%\">10</span> | <span data-col-width=\"7%\">Score</span> | <span data-col-width=\"14.5%\">Intel Used</span> | <span data-col-width=\"14.5%\">Action</span> | <span data-col-width=\"14.5%\">Intel Discovered</span> |\r\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\r\n| **1** | <span class=\"red\">A</span> | <span class=\"red\">A</span> | <span class=\"red\">A</span> | <span class=\"red\">A</span> | <span class=\"red\">A</span> | 0 | 0 | 0 | 0 | 0 | 2 |  | Only consider AAAAAxxxxx<br>for target 1 | **#1:** 2 targets<br>in xxxxxAAAAA |\r\n| **2** | <span class=\"red\">A</span> | <span class=\"red\">A</span> | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |  | Only consider AAxxxxxxxx<br>for target 1 | **#2:** 1 target<br>in xxAAAxxxxx |\r\n| **3** | <span class=\"red\">A</span> | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |  | We can deduce<br>that target 1<br>must be 2 |  |\r\n| **4** | 0 | 0 | <span class=\"red\">A</span> | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | **#2:**<br>target 2 in<br>xxAAAxxxxx | Flip and only consider<br>xxxAAxxxxx for target 2 |  |\r\n| **5** | 0 | 0 | 0 | <span class=\"red\">A</span> | 0 | 0 | 0 | 0 | 0 | 0 | 0 |  | We can deduce<br>that target 2<br>must be 5 |  |\r\n| **6** | 0 | 0 | 0 | 0 | 0 | <span class=\"red\">A</span> | <span class=\"red\">A</span> | 0 | 0 | 0 | 1 | **#1:**<br>target 3 in<br>xxxxxAAAAA | Only consider xxxxxAAxxx<br>for target 3 | **#3:** 1 target<br>in xxxxxxxAAA |\r\n| **7** | 0 | 0 | 0 | 0 | 0 | <span class=\"red\">A</span> | 0 | 0 | 0 | 0 | 1 |  | Target 3 found! |  |\r\n| **8** | 0 | 0 | 0 | 0 | 0 | 0 | 0 | <span class=\"red\">A</span> | 0 | 0 | 0 | **#3:**<br>target 4 in<br>xxxxxxxAAA | Flip and only consider<br>xxxxxxxxAA for target 4 |  |\r\n| **9** | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | <span class=\"red\">A</span> | 0 | 0 |  | We can deduce<br>that target 4<br>must be 10 |  |\r\n\r\nSo: what is the actual efficiency of multiple-target binary check? How many extra attempts does it take on average?\r\n\r\n## Abstracting binary check as tree traversal for time complexity analysis\r\n\r\nSince binary check is inherently a dividing-by-two sort of operation (hence the name), I figured it was probably possible to represent it as a binary tree. This is a widely-studied data structure, which hopefully makes our analysis much easier.\r\n\r\nHere is a tree representing how we can split the sample size of \\\\(b = 10\\\\) for a binary check:\r\n\r\n![It\'s sort of like the upside-down, satanic version of Pascal\'s triangle](../static/blogpage/2/images/185/bin_tree.png)\r\n\r\nAnd here is an annotated tree where the circled nodes are the ones we visited during the example search earlier, and the arrows + crosses show where our intel/flipping/deduction let us skip a node:\r\n\r\n![](../static/blogpage/2/images/185/bin_tree_annotated.png)\r\n\r\nMake sure you\'re comfortable with how this tree represents the binary check process we did in the table earlier. Without the annotations, this tree contains all the ways to guess for every possible configuration of target locations, letting us convert binary check into a much more conventional tree traversal problem.\r\n\r\nSo, back to time complexity: let\'s first look at the worst case of having to visit all the non-crossed-out leaves before we find our targets, like in this example. We traverse half the non-root nodes in the tree, due to the crossing-out. There are \\\\(2^{\\t{depth} + 1} - 2\\\\)\\\\({ }= 2^{\\Log{2}{b} + 1} - 2\\\\)\\\\({ }= 2b - 2\\\\) nodes excluding the root in the tree, so half of that is \\\\(b - 1\\\\).\r\n\r\nHowever, this assumes we visit all the non-crossed-out leaf nodes, or half the leaf nodes. But realize that if we reach a leaf node whose sibling is also a leaf, we *must* either find a target or be able to deduce a target. This means we are only allowed to visit \\\\(a\\\\) leaf nodes that have a leaf sibling (or are in a \"pair\") at most. Thus, we actually visit\r\n\r\n\\\\[\r\n\\begin{alignat\\*}{1}\r\n&b - 1 - \\left(\\frac{\\t{# leaves in pairs}}{2} - a \\right) \\\\\\\\[5pt]\r\n={ }&b - 1 - \\left(\\frac{b - \\t{# leaves not in pairs}}{2} - a \\right) \\\\\\\\[5pt]\r\n={ }&b - 1 - \\left(\\frac{b - |b - \\t{nearest power of } 2|}{2} - a \\right) \\\\\\\\[5pt]\r\n={ }&b - 1 - \\left(\\frac{b - \\left|b - 2^{\\t{round}(\\Log{2}{b})} \\right|}{2} - a \\right) \\\\\\\\[5pt]\r\n={ }&\\frac{b + \\left|b - 2^{\\t{round}(\\Log{2}{b})} \\right|}{2} + a - 1\r\n\\end{alignat\\*}\r\n\\\\]\r\n\r\nnodes in the worst case. Note that this only holds for \\\\(a \\le \\floor{\\frac{b}{2}}\\\\), as for anything above that, there will be at least one pair of leaves that are both correct, letting us stop at the \\\\(2\\\\) node above that and skip the leaves. But because we have symmetry, we need not worry about \\\\(a > \\floor{\\frac{b}{2}}\\\\), so this worst-case number of steps effectively holds anywhere.\r\n\r\nHowever, we want the number of steps in the *average* case if we are to accurately predict the number of attempts overall. And now I finally see why computer scientists don\'t usually bother with average-case: there are *so many ways* to skip certain sections of the tree with certain probabilities, or shave off a certain number of attempts depending on where the correct answers are. All this is far too deep into probability hell for me to figure out.\r\n\r\nSo, because I am a fake math major, I approximated it with Python.\r\n\r\n```py\r\n# binary_check.py\r\nimport math\r\nimport random\r\n\r\nclass Node:\r\n    def __init__(self, a, b, root_val=None, parent=None):\r\n        self.a = a\r\n        self.b = b\r\n        if root_val is None:\r\n            root_val = b\r\n        self.root_val = root_val\r\n        self.parent = parent\r\n\r\n        self.left = None\r\n        self.right = None\r\n        self.leaves = []\r\n        self.crossed = False\r\n        self.correct = False\r\n\r\n        if root_val > 1:\r\n            left_val = root_val // 2\r\n            right_val = root_val - left_val\r\n            self.left = Node(a, b, left_val, self)\r\n            self.right = Node(a, b, right_val, self)\r\n        elif root_val == 1 and parent is not None:\r\n            parent.leaves.append(self)\r\n\r\n        # sync leaves information all the way up to tree root\r\n        if parent is not None:\r\n            parent.leaves += self.leaves\r\n\r\n        # if root, generate correct answers\r\n        if parent is None:\r\n            answers = random.sample(range(b), a)\r\n            for i in answers:\r\n                self.leaves[i].correct = True\r\n\r\n    def get_score(self):\r\n        score = 0\r\n        for leaf in self.leaves:\r\n            if leaf.correct:\r\n                score += 1\r\n        return score\r\n\r\n    def traverse(self, attempts, remaining_targets):\r\n        # terminate recursion if we\'ve found all\r\n        if remaining_targets == 0:\r\n            return attempts, 0\r\n\r\n        # visit node and slaughter sibling\r\n        if not self.crossed:\r\n            attempts += 1\r\n            if self.parent is not None:\r\n                self.parent.right.crossed = True\r\n\r\n        # if leaf node; if no attempts += 1, then this is functionally a deduction\r\n        if self.root_val == 1:\r\n            if self.correct:\r\n                return attempts, remaining_targets - 1\r\n            else:\r\n                return attempts, remaining_targets\r\n\r\n        # if score is 0, skip entire subtree (\"flip\")\r\n        if self.get_score() == 0:\r\n            return attempts, remaining_targets\r\n\r\n        # recursively check left and right children\r\n        if self.left is not None:\r\n            attempts, remaining_targets = self.left.traverse(attempts, remaining_targets)\r\n            if remaining_targets == 0:\r\n                return attempts, remaining_targets\r\n        if self.right is not None:\r\n            attempts, remaining_targets = self.right.traverse(attempts, remaining_targets)\r\n            if remaining_targets == 0:\r\n                return attempts, remaining_targets\r\n\r\n        return attempts, remaining_targets\r\n\r\n    def run_bin_check(self):\r\n        attempts = 0\r\n        remaining_targets = self.a\r\n\r\n        # recursively check left and right children, and keep \"global\" values for these 2 values\r\n        attempts, remaining_targets = self.left.traverse(attempts, remaining_targets)\r\n        attempts, remaining_targets = self.right.traverse(attempts, remaining_targets)\r\n\r\n        return attempts\r\n\r\nif __name__ == \"__main__\":\r\n    TRIAL_COUNT = 10000\r\n    max_b = 10\r\n    attempts = [[0 for i in range(max_b)] for j in range(max_b)]\r\n\r\n    for _ in range(TRIAL_COUNT):\r\n        for b in range(max_b):\r\n            for a in range(b):\r\n                tree = Node(a + 1, b + 1)\r\n                attempts[b][a] += tree.run_bin_check()\r\n\r\n    for b in range(max_b):\r\n        for a in range(b):\r\n            print(f\"{a + 1} out of {b + 1}: {attempts[b][a] / TRIAL_COUNT} attempts\")\r\n        print()\r\n```\r\n\r\n# Putting it all together\r\n\r\nInstead of doing a full mathematical analysis, I decided to disappoint my ancestors once again by writing another program that recursively generates the average number of attempts per question, utilizing both the patterns in the tree earlier and `binary_check.py`. This problem is recursive because at every non-extra attempt, we perform the same process, just with tweaked numbers. In fact, if you\'ve truly burned the probability trees into your eyeballs, you might\'ve also noticed their recursive, self-similar nature already.\r\n\r\n```py\r\n# canvas.py\r\nimport math\r\nfrom binary_check import Node\r\n\r\nBIN_CHECK_TRIAL_COUNT = 1000\r\nbin_check_memoize = [] # not actually needed because python; just for consistency with the C++ version\r\n\r\ndef gen_tree(k, option_count, branch_count=None, old_score=0, old_attempts=0, old_prob=1.0, depth=0):\r\n    if branch_count is None:\r\n        branch_count = k + 1\r\n    if depth == option_count - 1:\r\n        branch_count = 1\r\n    \r\n    ev = 0\r\n    for j in range(branch_count):        # `j` is the red number\r\n        incorrect_before = k - old_score # `i` (except for attempt 1 on the tree)\r\n        new_score = k - j\r\n        new_attempts = old_attempts\r\n        if depth == option_count - 1:    # if on fourth non-extra attempt\r\n            new_prob = old_prob\r\n        else:\r\n            new_attempts += 1            # remember that fourth attempts are overlapped and do not count\r\n            new_prob = old_prob \\\r\n                    * math.comb(incorrect_before, incorrect_before - j) \\\r\n                    * math.pow(1 / (option_count - depth), incorrect_before - j) \\\r\n                    * math.pow((option_count - depth - 1) / (option_count - depth), j)\r\n        \r\n        # if we\'ve reached an ending, calculate attempts * total prob and add to ev\r\n        if new_score == k:\r\n            ev += new_attempts * new_prob\r\n            continue\r\n\r\n        # binary check simulator (don\'t forget symmetry!)\r\n        a = min(new_score - old_score, k - (new_score - old_score))\r\n        b = k - old_score\r\n        if a != 0 and b != 1: # if we need binary check\r\n            if bin_check_memoize[b][a] is None:\r\n                if a == 1 and (b & (b - 1) == 0) and b != 0:\r\n                    # if single-target and `b` is a power of 2 (no rounding), take shortcut\r\n                    # (https://stackoverflow.com/a/57025941)\r\n                    bin_check_memoize[b][a] = math.log2(b)\r\n                else:\r\n                    bin_check_attempts_total = 0\r\n                    for _ in range(BIN_CHECK_TRIAL_COUNT):\r\n                        tree = Node(a, b)\r\n                        bin_check_attempts_total += tree.run_bin_check()\r\n                    bin_check_memoize[b][a] = bin_check_attempts_total / BIN_CHECK_TRIAL_COUNT\r\n            new_attempts += bin_check_memoize[b][a]\r\n\r\n        # recursively call on sub-branches\r\n        # `j + 1` to account for getting 0 more correct next attempt\r\n        ev += gen_tree(k, option_count, j + 1, new_score, new_attempts, new_prob, depth + 1)\r\n\r\n    return ev\r\n\r\nif __name__ == \"__main__\":\r\n    min_k = int(input(\"k min (inclusive): \"))\r\n    max_k = int(input(\"k max (exclusive): \"))\r\n    option_count = int(input(\"number of option_count per question: \"))\r\n    bin_check_memoize = [[None for i in range(max_k)] for j in range(max_k)] # using `max_k` cause lazy\r\n\r\n    for k in range(min_k, max_k):\r\n        print(k, gen_tree(k, option_count) / k)\r\n```\r\n\r\nTake another moment to convince yourself that this does, in fact, generate the correct trees.\r\n\r\nTo generate the trees faster, I decided to run this in parallel over multiple cores. By \"in parallel\", I mean this:\r\n\r\n![yes i see that new tab button, but this is funnier](../static/blogpage/2/images/185/parallelism.png)\r\n\r\nPerfect.\r\n\r\n![](../static/blogpage/2/images/185/cpu_utilization.png)\r\n\r\n![](../static/blogpage/2/images/185/cpu_temperature.png)\r\n\r\nIt still took almost the entire afternoon to generate from \\\\(k = 1\\\\) to \\\\(k = 200\\\\) for 4 options per question though, so I spent the night rewriting all this in C++. The segfaults (stupid arbitrary-precision GMP objects) paid off—I just finished typing this, setting up a Git repo, and copying the code into this post, and the C++ version is already at \\\\(k = 224\\\\).\r\n\r\n\\dropdown\r\n\r\n\\summary\r\n\r\nFor the sake of your scroll wheel, I\'ve collapsed the C++ into this dropdown—it isn\'t a critical part of my analysis.\r\n\r\n\\endsummary\r\n\r\n```cpp\r\n// binary_check.h\r\n#include <vector>\r\n\r\nclass Node {\r\n    private:\r\n        int a;\r\n        int b;\r\n        int rootVal;\r\n        bool crossed;\r\n        bool correct;\r\n\r\n        Node* left;\r\n        Node* right;\r\n        Node* parent;\r\n        std::vector<Node*> leaves;\r\n\r\n        int getScore();\r\n        void traverse(int& attempts, int& remainingTargets);\r\n\r\n    public:\r\n        Node(int a, int b, int rootVal, Node* parent);\r\n        ~Node();\r\n        int runBinCheck();\r\n};\r\n```\r\n\r\n```cpp\r\n// binary_check.cpp\r\n/* Compile with `g++ binary_check.cpp -o binary_check` */\r\n\r\n#include \"binary_check.h\"\r\n#include <iostream>\r\n#include <random>\r\n#include <unordered_set>\r\n\r\nNode::Node(int a, int b, int rootVal, Node* parent) {\r\n    this->a = a;\r\n    this->b = b;\r\n    if (rootVal == NULL) {\r\n        rootVal = b;\r\n    }\r\n    this->rootVal = rootVal;\r\n    this->parent = parent;\r\n\r\n    this->left = NULL;\r\n    this->right = NULL;\r\n    this->crossed = false;\r\n    this->correct = false;\r\n\r\n    if (rootVal > 1) {\r\n        int leftVal = (int) (rootVal / 2); // totally necessary cast\r\n        int rightVal = rootVal - leftVal;\r\n        this->left = new Node(a, b, leftVal, this);\r\n        this->right = new Node(a, b, rightVal, this);\r\n    } else if (rootVal == 1 && parent != NULL) {\r\n        parent->leaves.push_back(this);\r\n    }\r\n\r\n    // sync leaves information all the way up to tree root\r\n    if (parent != NULL) {\r\n        parent->leaves.insert(parent->leaves.end(), this->leaves.begin(), this->leaves.end());\r\n    }\r\n\r\n    // if root, generate correct answers\r\n    if (parent == NULL) {\r\n        std::random_device r; // srand() by time did not seem to seed well, so here we are\r\n        std::default_random_engine e1(r());\r\n        std::uniform_int_distribution<int> rng(0, b - 1);\r\n\r\n        std::unordered_set<int> answers;\r\n        while (answers.size() < a) {\r\n            answers.insert(rng(e1));\r\n        }\r\n        for (const int answer : answers) {\r\n            this->leaves[answer]->correct = true;\r\n        }\r\n    }\r\n}\r\n\r\nNode::~Node() {\r\n    if (this->left != NULL) {\r\n        delete this->left;\r\n    }\r\n    if (this->right != NULL) {\r\n        delete this->right;\r\n    }\r\n}\r\n\r\nint Node::getScore() {\r\n    int score = 0;\r\n    for (const Node* leaf : this->leaves) {\r\n        if (leaf->correct) {\r\n            score++;\r\n        }\r\n    }\r\n    return score;\r\n}\r\n\r\nvoid Node::traverse(int& attempts, int& remainingTargets) {\r\n    // terminate recursion if we\'ve found all\r\n    if (remainingTargets == 0) {\r\n        return;\r\n    }\r\n\r\n    // visit node and slaughter sibling\r\n    if (!this->crossed) {\r\n        attempts++;\r\n        if (this->parent != NULL) {\r\n            this->parent->right->crossed = true;\r\n        }\r\n    }\r\n\r\n    // if leaf node; if no attempts += 1, then this is functionally a deduction\r\n    if (this->rootVal == 1) {\r\n        if (this->correct) {\r\n            remainingTargets--;\r\n        }\r\n        return;\r\n    }\r\n\r\n    // if score is 0, skip entire subtree (\"flip\")\r\n    if (this->getScore() == 0) {\r\n        return;\r\n    }\r\n\r\n    // recursively check left and right children\r\n    if (this->left != NULL) {\r\n        this->left->traverse(attempts, remainingTargets);\r\n        if (remainingTargets == 0) {\r\n            return;\r\n        }\r\n    }\r\n    if (this->right != NULL) {\r\n        this->right->traverse(attempts, remainingTargets);\r\n        if (remainingTargets == 0) {\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\nint Node::runBinCheck() {\r\n    int attempts = 0;\r\n    int remainingTargets = this->a;\r\n\r\n    // recursively check left and right children, and keep \"global\" values for these 2 values\r\n    this->left->traverse(attempts, remainingTargets);\r\n    this->right->traverse(attempts, remainingTargets);\r\n\r\n    return attempts;\r\n}\r\n```\r\n\r\n```cpp\r\n// canvas.cpp\r\n/* Compile with `g++ binary_check.cpp canvas.cpp -lgmpxx -lgmp -o canvas`\r\n * Make sure to `sudo apt install libgmp-dev` */\r\n\r\n#include \"binary_check.h\"\r\n#include <algorithm>\r\n#include <cmath>\r\n#include <gmpxx.h>\r\n#include <iostream>\r\n\r\nconst int BIN_CHECK_TRIAL_COUNT = 1000;\r\nmpf_class* factorialMemoize;\r\nmpf_class** binCheckMemoize;\r\n\r\nmpf_class factorial(int n) {\r\n    if (n == 1) {\r\n        return n;\r\n    }\r\n    if (factorialMemoize[n] == NULL) {\r\n        factorialMemoize[n] = n * factorial(n - 1);\r\n    }\r\n    return factorialMemoize[n];\r\n}\r\n\r\nmpf_class combination(int n, int r) {\r\n    if (r == 0 || n == r) {\r\n        return 1;\r\n    }\r\n    \r\n    return factorial(n) / (factorial(r) * factorial(n - r));\r\n}\r\n\r\nmpf_class genTree(\r\n        int k, int optionCount, int branchCount, int oldScore, mpf_class oldAttempts, mpf_class oldProb, int depth) {\r\n    if (branchCount == NULL) {\r\n        branchCount = k + 1;\r\n    }\r\n    if (depth == optionCount - 1) {\r\n        branchCount = 1;\r\n    }\r\n\r\n    mpf_class ev = 0.0;\r\n    for (int j = 0; j < branchCount; j++) { // `j` is the red number\r\n        int incorrectBefore = k - oldScore; // `i` (except for attempt 1 on the tree)\r\n        int newScore = k - j;\r\n        mpf_class newAttempts = oldAttempts;\r\n        mpf_class newProb;\r\n        if (depth == optionCount - 1) {     // if on fourth non-extra attempt\r\n            newProb = oldProb;\r\n        } else {\r\n            newAttempts++;                  // remember that fourth attempts are overlapped and do not count\r\n            newProb = oldProb \\\r\n                    * combination(incorrectBefore, incorrectBefore - j) \\\r\n                    * pow((float) 1 / (optionCount - depth), incorrectBefore - j) \\\r\n                    * pow((float) (optionCount - depth - 1) / (optionCount - depth), j);\r\n        }\r\n\r\n        // if we\'ve reached an ending, calculate attempts * total prob and add to ev\r\n        if (newScore == k) {\r\n            ev += newAttempts * newProb;\r\n            continue;\r\n        }\r\n\r\n        // binary check simulator (don\'t forget symmetry!)\r\n        int a = std::min(newScore - oldScore, k - (newScore - oldScore));\r\n        int b = k - oldScore;\r\n        if (a != 0 && b != 1) { // if we need binary check\r\n            if (binCheckMemoize[b][a] == NULL) {\r\n                if (a == 1 && (b & (b - 1) == 0) && b != 0) {\r\n                    // if single-target and `b` is a power of 2 (no rounding), take shortcut    \r\n                    // (https://stackoverflow.com/a/57025941)\r\n                    binCheckMemoize[b][a] = log2(b);\r\n                } else {\r\n                    int binCheckAttemptsTotal = 0;\r\n                    for (int i = 0; i < BIN_CHECK_TRIAL_COUNT; i++) {\r\n                        Node tree(a, b, NULL, NULL);\r\n                        binCheckAttemptsTotal += tree.runBinCheck();\r\n                    }\r\n                    binCheckMemoize[b][a] = (float) binCheckAttemptsTotal / BIN_CHECK_TRIAL_COUNT;\r\n                }\r\n            }\r\n            newAttempts += binCheckMemoize[b][a];\r\n        }\r\n\r\n        // recursively call on sub-branches\r\n        // `j + 1` to account for getting 0 more correct next attempt\r\n        ev += genTree(k, optionCount, j + 1, newScore, newAttempts, newProb, depth + 1);\r\n    }\r\n\r\n    return ev;\r\n}\r\n\r\nint main() {\r\n    int kMin;\r\n    int kMax;\r\n    int optionCount;\r\n    std::cout << \"k min (inclusive): \";\r\n    std::cin >> kMin;\r\n    std::cout << \"k max (exclusive): \";\r\n    std::cin >> kMax;\r\n    std::cout << \"number of optionCount per question: \";\r\n    std::cin >> optionCount;\r\n\r\n    factorialMemoize = (mpf_class*) malloc(kMax * sizeof(factorialMemoize[0])); // using `kMax` cause lazy\r\n    for (int i = 0; i < kMax; i++) {\r\n        // \"conditional jump or move depends on uninitialized value\" there are no memory errors in ba sing se\r\n        // i dont think im initializing `mpf_class`es right, because there are no memory issues if they\'re `double`s\r\n        factorialMemoize[i] = mpf_class(0.0);\r\n    }\r\n    binCheckMemoize = (mpf_class**) malloc(kMax * sizeof(binCheckMemoize[0]));\r\n    for (int i = 0; i < kMax; i++) {\r\n        binCheckMemoize[i] = (mpf_class*) malloc(kMax * sizeof(binCheckMemoize[0][0]));\r\n        for (int j = 0; j < kMax; j++) {\r\n            binCheckMemoize[i][j] = mpf_class(0.0);\r\n        }\r\n    }\r\n\r\n    for (int k = kMin; k < kMax; k++) {\r\n        std::cout << k << \" \" << genTree(k, optionCount, NULL, 0, 0, 1.0, 0) / k << \"\\n\";\r\n    }\r\n\r\n    // free\r\n    for (int i = 0; i < kMax; i++) {\r\n        free(binCheckMemoize[i]);\r\n    }\r\n    free(binCheckMemoize);\r\n    free(factorialMemoize);\r\n}\r\n```\r\n\r\n\\enddropdown\r\n\r\nWhile this was merely a computer scientist\'s dirty approximation, and the randomness was slightly compromised by the memoization, the answer was unmistakeable.\r\n\r\n*It depends.*\r\n\r\nI know, I\'m sorry—that\'s probably the most unsatisfying answer of all time, but life is cruel ¯\\\\\\_(ツ)\\_/¯. More specifically, it depends on how many options there are per questions. Here are some plots:\r\n\r\n![](../static/blogpage/2/images/185/k_to_attempts_plot_2_options.svg)\r\n\r\n![](../static/blogpage/2/images/185/k_to_attempts_plot_3_options.svg)\r\n\r\n![:3](../static/blogpage/2/images/185/k_to_attempts_plot_4_options.svg)\r\n\r\n![these were taking days and days to run so I just stopped earlier](../static/blogpage/2/images/185/k_to_attempts_plot_5_options.svg)\r\n\r\n![](../static/blogpage/2/images/185/k_to_attempts_plot_6_options.svg)\r\n\r\nAll these graphs take on a similar shape: big dip at the front, and then going back up a bit into a repeating up and down oscillation. Here, relative minima occur at powers of 2 and relative maxima occur about halfway between them, a curious phenomenon whose explanation ~~I cannot find at the moment~~ will be left as an exercise for the reader. The shape of these dips and rises also varies between plots.\r\n\r\nThe 2, 3, and 4 option graphs all reached a global minimum at \\\\(k = 4\\\\), assuming the globe abruptly ends at \\\\(k = 1024\\\\)[^x-\r\naxis earth]. This corresponded to the first power of 2 to exhibit local minimum behavior—i.e., the big dips are just the falling parts of the first trough! With 5 options, the minimum was at \\\\(k = 8\\\\), and with 6 options, the minimum was (barely) at \\\\(k = 9\\\\), both corresponding to the second of these mysterious local minima. More testing confirms that the global minimum keeps occurring further down the list of local minima as we increase the number of options per question. I just stopped at 6 for these plots since ~~I was getting tired of waiting~~ realistically there won\'t be more than 6 options per question[^realistic].\r\n\r\nSo there we have it.\r\n\r\nAfter about 70 hours of work and rerunning days of calculations twice because of oversights in my analysis, I can finally shave off three minutes the next time I, uhh…spend 70 hours analyzing a quiz instead of studying for said quiz.\r\n\r\n# Not the end\r\n\r\nOriginally, I had about 3,600 more words of analysis ready to go, which largely consisted of my sanity being absolutely decimated by an apocalyptic torrent of pattern clusterf%&kery from the floodgates of Hell itself:\r\n\r\n![this increased my prescription by half a diopter](../static/blogpage/2/images/185/latex_hell.png)\r\n\r\n![no, there isn\'t.](../static/blogpage/2/images/185/mathjax_giving_up.png)\r\n\r\n![](../static/blogpage/2/images/185/mental_breakdown.png)\r\n\r\nFor several days, I consumed a substantial portion of the Amazon rainforest endlessly scribbling down formulas and trees[^trees irony] on paper. I did find a lot more cool patterns though, like the \\\\(1 + 2 + 3 + \\dots\\\\) nature of the number of second-attempt branches, or the unchanging structure of the bottom branches. Sadly, none of this work lived to see the light of day. On the bright side though, trying to optimize algorithms by hand was how I found my love for CS in the first place, so at least I still had fun, even if it was a mildly distressed fun.\r\n\r\nAnd, despite all my efforts, this is just one approach of guessing multiple questions, analyzed with less rigor than Fermat\'s proof of his Last Theorem. Who knows if someone will come up with \"merge guess\" or, like, the \"isosceles squidward check with Chinese characteristics\" in the future. Or maybe binary check becomes more efficient again when \\\\(k\\\\) hits pi to the eighth power, and uncovers a segfault in my C++ when it reaches the number of Brilliant sponsorships[^sponsor] I\'ve seen in the past year. So the next time your teacher accidentally gives you infinite attempts on an online quiz and you find yourself using damn near all infinity of them, please feel free to contribute towards the blooming new field of Canvas quiz theory.\r\n\r\nOh, right…that\'s what I doing all this for.\r\n\r\nThe homework assignment.\r\n\r\nThat was, uhh…weeks ago.\r\n\r\nAnd apparently it wasn\'t all multiple-choice.\r\n\r\nAnd apparently it didn\'t show the score after every attempt.\r\n\r\nBut a seasoned ~~procrastinator~~ student like me would never need such brutish tactics to speedrun a quiz anyway 😤.\r\n\r\nWait—does APA want the emoji before or after the period?\r\n\r\n[^imperfect reality]: [r/im14andthisisdeep](https://www.reddit.com/r/im14andthisisdeep/)\r\n[^abstract algebra]: Abstract algebra took all the good names—maybe I should call it the \"uniform palpatine quasilava brain rot\" property instead. At least there\'s a slightly higher chance that it\'s not taken.\r\n[^x-axis earth]: When are those silly flat Earthers going to realize that the Earth is actually an \\\\(x\\\\)-axis?\r\n[^realistic]: (says while simulating guessing 1024 questions at a time)\r\n[^trees irony]: Tree cannibalism?\r\n[^sponsor]: This video was sponsored by My Three Braincells. If you enjoyed the video, be sure to obliterate that subscribe button, put a spam bot in my comments, lick your elbow, commit tax fraud, pour hand sanitizer into your eyeba',NULL,1,2),(186,'2024-06-14 11:37:53','The Three Stars On My Wall','the-three-stars-on-my-wall',NULL,'Sometimes I think about the three stars on my wall.\r\n\r\nThey glow gently in the darkness, twinkling slowly above the thin sliver of moonlight that filters in through the window.\r\n\r\nIt isn\'t every day that I see them. Sometimes, I lose them in the noise of the light. Sometimes, I\'m too afraid to face the silence. But on the rare nights I do decide to, the stars never seem to stop smiling at me.\r\n\r\nAnd I can never stop being mesmerized by their light.\r\n\r\nGenerations upon generations these stars have traveled, and their bright twinkling light never tires. But no matter how hard they try to smile, I can\'t help but feel the weight of their years as we come to the end of another generation. It was time for me to pass them down to the next.\r\n\r\nThe three stars blink for me, one last time.',NULL,1,7),(189,'2024-07-19 05:59:30','US Resumes Bombing Middle East, Citing Sunk Cost Fallacy','us-resumes-bombing-middle-east-citing-sunk-cost-fallacy',NULL,'The President announced today the resumption of war in the Middle East, following a severe case of the sunk cost fallacy.\r\n\r\n\"It felt so unsatisfying,\" President Biden remarked, commenting on the troop withdrawal a few years ago. \"We had a job that we didn\'t finish.\"\r\n\r\nThe United States is reported to have spent about $8 trillion in the Middle East ever since the war began, and seeing such a huge sum of money go down the drain was \"too much for Lockheed Martin to bear\", according to the White House. Lockheed Martin CEO \r\nJim Taiclet was unable to be reached for comment, as he was recovering from an eye infection after wiping his tears with unspent lobbying funds.\r\n\r\n\\figure\r\n\r\n![](../static/blogpage/5/images/189/taiclet.png)\r\n\r\n\\caption\r\n\r\nJames Donald Taiclet Jr.\r\n\r\n\\endcaption\r\n\r\n\\endfigure\r\n\r\nTroops are expected to be deposited back into Afghanistan by July 4th. President Biden expects the war to last \"until Jim Taiclet brings [him] to dinner.\" When our reporters asked the President for more details during his press conference earlier today, he cleared his throat for forty seconds before leaving the stage.\r\n\r\nReactions to this announcement by other politicians have been mixed. Former president Trump paid perhaps his first ever compliment to Biden: \"The great people of Nepal will be grateful to our beautiful country for destroying the evil Talisman [*sic*] and their terrible, Islamic evils. Great, amazing people, I tell ya.\"\r\n\r\nOn the other hand, many political figures condemned Biden for his initiative. For example, Representative Marjorie Taylor Greene (R-Hell) said that Biden \"should\'ve let dear Donnie[^throwing up] take the credit in 2025.\" Meanwhile, Senator Bernie Sanders was caught in the bathroom calling American troops an \"invasive species\" by Representative Gaetz\'s cameras.\r\n\r\nThe public has largely been indifferent to the announcement. \"We\'re all desensitized to new wars at this point,\" said an anonymous homeless college student.\r\n\r\n[^throwing up]: (i am throwing up)',NULL,1,5),(190,'2024-07-19 05:59:21','New Mouth Guard Combats Snoring by Keeping Wearer Awake All Night','new-mouth-guard-combats-snoring-by-keeping-wearer-awake-all-night',NULL,'A new snore guard that keeps its wearer awake is being hailed as the greatest invention since the hurricane-deflecting Sharpie.\r\n\r\nThe mouth guard continuously releases a tiny stream of concentrated caffeine into its wearer\'s mouth. Designed by esteemed inventor and social media marketing genius Elung Mask, the mouth guard is inspired by Mask\'s discovery that the main cause of snoring is sleep. The revolutionary product became viral just hours after its official trailer was released on Y.\r\n\r\n\\figure\r\n\r\n![](../static/blogpage/5/images/190/elung_mask.png)\r\n\r\n\\caption\r\n\r\nA screenshot from the trailer depicting Mask after three days of testing\r\n\r\n\\endcaption\r\n\r\n\\endfigure\r\n\r\nAccording to Mask, caffeine was chosen over more potent methods of sleep deprivation due to its lack of cumbersome legal regulations, and its bitterness helps keep the wearer awake. In addition, once inserted, the mouth guard clamps tightly to the tongue with a serrated edge, discouraging attempts to pull it out before it automatically disengages after eight hours.\r\n\r\n\"It\'s a miracle,\" said Mrs. Doe as blood leaked out of her husband\'s eyes. \"I slept so well last night I didn\'t even realize my husband was kicking me in the shin, and we finally didn\'t wake up the deaf neighbor or the seismologist down the road. Nothing else kept him up quite like this, not even the humidifier filled with fart spray.\"\r\n\r\nTo avoid building up tolerance to caffeine, the mouth guard can also be configured to instead jerk its wearer\'s mouth around in extremely uncomfortable positions throughout the night. It is recommended to switch to this mode for at least five days a month, but not more than ten to avoid premature onset of psychiatry bills.\r\n\r\n\"I think my left nostril is a big bigger now,\" Mr. Doe croaked, weakly popping his jaw back into place. When asked for a rating of the mouth guard, Mr. Doe simply dribbled a bit more blood out of his eyes, evidently touched by the brilliance of the invention and the marriage that it had saved. \"It\'s jaw-dropping how well it works,\" commented a beaming Mrs. Doe.\r\n\r\nThe long-awaited mouth guard, along with its proprietary caffeine pouches, hits stores on Saturday. The product is generously covered by warranty until death.',NULL,1,5),(191,'2024-07-19 05:59:27','Texas Considers Banning Women Altogether','texas-considers-banning-women-altogether',NULL,'Continuing his mission to reverse decades of progress in women\'s rights, Texas governor Greg Abbott has asked the state legislature Tuesday to draft a bill banning women altogether.\r\n\r\nTwo months ago, Abbott announced his plans to enforce the death penalty on women who decided to menstruate for wasting a precious life every month. However, faced with the immense financial and logistical stress of performing millions of executions, he eventually decided to offload the burden onto poorer states by banishing women from Texas. This reportedly reduced the project\'s required budget to just the cost of the governor\'s new pair of adjacent homes on either side of the Texas-Louisiana border.\r\n\r\nMore recently, Abbott has been pressuring lawmakers even harder to pass the bill after he accidentally killed countless children one night due to a woman. \"Women cause men to waste millions of children, [inaudible] attractive coworkers [inaudible] excessively revealing faces,\" he said during his annual State of the Confederacy address, adjusting his wheelchair to make sure he was fully behind the podium. \"Children were not meant to be sprayed into an old sock and then tossed into the washing machine.\" Sections of his speech were inaudible because the power was out and his microphone was not working.\r\n\r\n\\figure\r\n\r\n![this is not edited btw](../static/blogpage/5/images/191/abbott.png)\r\n\r\n\\caption\r\n\r\nAbbott shows off his plan at a gun range because that was the only photo of him next to a whiteboard-like object I could find\r\n\r\n\\endcaption\r\n\r\n\\endfigure\r\n\r\nAbbott plans to enforce his ban by giving law enforcement the power to shoot anything that they could not take their eyes off of. According to the governor, this would also require every policeman to be regularly screened for contraband sexual orientations and interests. A test run of these new policies proved their effectiveness when three male screening agents were shot by blushing policemen who could not resist following the law.\r\n\r\nSupport for this new plan among the women of Texas has been universal, because they can\'t wait to get out of there.',NULL,1,5),(192,'2024-07-19 05:58:46','Supreme Court Rules Constitution as Unconstitutional','supreme-court-rules-constitution-as-unconstitutional',NULL,'In a shocking move this morning, the Supreme Court voted 6-3 to strike down the Constitution as unconstitutional, bringing an end to the long-fought *United States v. United States* by defeating *United States*.\r\n\r\nThe main author of the majority opinion, Justice Alito, expressed his belief that \"having a Constitution is not a fundamental constitutional right because such a right has no basis in the Constitution\'s text or in our Nation\'s history.\" We note that he later mentioned court cases involving the Constitution that took place during the nation\'s history.\r\n\r\nMeanwhile, famous originalist Justice Thomas wrote that the copy of the *Pocket Constitution* he had received in high school was not the original copy written by the founding fathers, and was therefore not to be followed.\r\n\r\nOne of Justice Barrett\'s arguments was that the First Amendment \"encroached upon the people\'s right to be converted.\" Whether or not this was her main point is still unknown, as she quoted approximately three-quarters of the Bible in total throughout her very lengthy argument.\r\n\r\nThe remaining majority Justices did not contribute to the majority opinion because OpenAI\'s servers were down last night.\r\n\r\nThe dissenting opinion was blank, as all three dissenting justices resigned and started a bakery together in Cancún.',NULL,1,5),(193,'2024-07-19 05:59:13','The Weather Channel Accused of Fake News','the-weather-channel-accused-of-fake-news',NULL,'Residents of Florida filed a class-action lawsuit against The Weather Channel today, accusing it of reporting fake news and slandering Hurricane Tragedeigh\'s peaceful reputation. The hurricane was predicted to hit Florida as a Category 3 storm, but it veered away eastwards into the Atlantic right before it could make landfall.\r\n\r\n\"I can\'t believe it was drizzling when they said there was going to be a hurricane,\" huffed an upset Orlando resident, evidently battered by the breeze. \"I was hoping there wouldn\'t be any traffic on the way to the alligator petting zoo!\"\r\n\r\nAnother resident lamented the state of fear-mongering in the press. \"Big Weather is trying to brainwash us into thinking hurricanes are scary and dangerous\", she said. \"Tragedeigh was so peaceful! Where was the fear-mongering when there was a rainbow in the sky yesterday?\"\r\n\r\nWhen we reached out to The Weather Channel, a sobbing spokesperson told us to \"j-just watch A-AccuWeather then….\" The hurricane prediction team at The Weather Channel is expected to release an official apology later today describing how they would steer the hurricane more accurately the next time.\r\n\r\nThis isn\'t the first time The Weather Channel has been hit with flak for fake news, even within the last year. In March, residents argued that a prediction of \"partly cloudy\" should\'ve been \"mostly cloudy\", and in May, one person complained that the wind speed forecast had failed to take their ceiling fan into account. In fact, The Weather Channel has the most fake news incidents out of any major broadcasting corporation, and legal analysts both inside and outside the company are still trying to figure out why.\r\n\r\nIt is unknown *weather* or not the courts will take the case.',NULL,1,5),(194,'2024-07-22 06:37:21','Trump Drops Out of Race, Acknowledging Concerns Over Age After Five More Terms','trump-drops-out-of-race-acknowledging-concerns-over-age-after-five-more-terms',NULL,'![he just took a long shower ok? he needed to shred up those documents before shoving them down the drain](../static/blogpage/5/images/194/trump_old.jpeg)\r\n\r\nFormer president Donald Trump released a statement on Truth Social this morning indicating his intent to leave the 2024 presidential race.\r\n\r\nIn his statement, Trump acknowledged the public\'s growing concern over his health and advanced age. \"After I make the Traitorous Democrats give me five more terms to fix this Country, I will be a hundred years old!\" Trump claimed. He added that this would make him \"almost as old as Sleepy Joe was when Joe led the armies into battle during the Revolutionary War.\" We note that Trump\'s statement contains the factual error that he would be a hundred years old after five terms; in reality, he would be ninety-eight.\r\n\r\nTrump\'s announcement came shortly after he calculated that most current Democratic congresspeople and Supreme Court justices would have retired after five presidential terms of four years each. According to him, this would give him ample time to Schedule F his most loyal Old Rich White Guys into all three branches of the government. When asked about the younger members of government who could still be working after twenty years, an unidentified spouse of Trump in the audience guessed that the former president only had twenty appendages of adequate size to count with. Trump himself was unavailable to answer the question, as he had left the press conference early to commentate a wrestling match.\r\n\r\nTrump endorsed Robert F. Kennedy Jr.\'s brain worm to succeed him as the Republican  nominee, as he believed the worm had eaten the part that denied climate change. The former president claimed to have already donated $7.50, a Big Mac, and over four hundred delegates to the worm\'s campaign, although an independent investigation by our writers was unable to verify that the burger was actually a Big Mac.\r\n\r\nTrump also thanked his running mate, JD Vance, for being \"America\'s Himmler.\" Finally, the former president listed his accomplishments in office by ending his statement.\r\n\r\nWith both parties\' top nominees having dropped out of the race, delegates across the aisle are scrambling to push forward their next-best options. The Democratic Party is likely to promote Kamala Harris, but the Republican Party seems to be split between J. D. Vance, former primary contender Nikki Haley, and the worm. \"She\'s a *woman*!\" cried one angry delegate at today\'s emergency convention. \"Yeah, but he\'s married to a woman!\" another screamed in defense of Haley.\r\n\r\n---\r\n\r\n*Post-shower Trump from [here](https://x.com/creepydotorg/status/1816438193266266166). Kudos to them who managed to sneak into Mar-a-Lago\'s bathroom.*',NULL,1,5),(196,'2024-07-23 05:50:51','Trump Calls Vance \"America\'s Himmler\" in Recently Surfaced Clip','trump-calls-vance-americas-himmler-in-recently-surfaced-clip',NULL,'A clip showing presidential candidate Donald Trump calling his running mate \"America\'s Himmler\" went viral on X last night.\r\n\r\nIn the clip, Trump, who appeared to be highly sober, was seen sitting in a golf cart humming the line: \"America\'s Hitler and America\'s Himmler, sitting in a tree.\" It is unknown which one of Trump\'s golf course aides took the video, as they had posted it to an anonymous account on X. The account has since been taken down because the Trump aide was unable to prove that they were 13 or older, but a mirror of the clip is accessible [here](https://www.youtube.com/watch?v=XqZsoesa55w).\r\n\r\nIn his reply to the post, Vance appeared to be offended, stating \"my hairline is NOT that bad.\" However, he later said that he remained on good terms with Trump, as the comparison had otherwise moved him to tears.\r\n\r\n\\figure\r\n\r\n![im having too much fun (besides repainting the flags. screw you flags)](../static/blogpage/5/images/196/vance.png)\r\n\r\n\\caption\r\n\r\nA visual comparison between Vance and Himmler. Note that Vance is the one on the right.\r\n\r\n\\endcaption\r\n\r\n\\endfigure\r\n\r\nThe current presidential administration expressed generally negative sentiments towards Trump\'s remark. President Biden was concerned that the Nazi parallel would strengthen support and turnout within the Republican voter base. He also criticized the inaccuracy of the comparison, noting that Trump and Vance combined had less years of experience in office than Himmler had in World War 2 alone.\r\n\r\nMeanwhile, Vice President Harris attacked Trump\'s creative abilities during a rally today, calling his lyrics \"illogical\" as there would be no trees left to sit on if he were to take office. \"Maybe only the coconut trees at the beach will survive,\" she laughed sadly. \"I hope he falls out of one.\"\r\n\r\nHarris even posted a video of her comments on a Truth Social account she had bravely created, attempting to win over those who still closeted a shred of empathy. However, this quickly backfired when the right-wing hacktivist group Men In Diapers began to expose her history of being a lawful citizen.\r\n\r\nThe hashtag #HitlerHimmler2024 and its variations continue to dominate the trending section on X today, beating out other topics such as #ElonDisownsLiberalSon, #YetAnotherCelebrityIsAPedophile, and #YellowstoneEruption.',NULL,1,5),(228,'2024-08-04 07:43:10','Struggling Mirror Industry Kept Alive by Narcissists','struggling-mirror-industry-kept-alive-by-narcissists',NULL,'The endangered mirror industry narrowly avoided extinction this quarter thanks to a loyal group of self-proclaimed narcissists.\r\n\r\nTwo months ago, the new iPhone featuring 18 front-facing cameras was released, branded as \"the spawn of a biblically accurate angel.\" Since then, Apple fanboys around the country have boycotted mirrors, accusing them of monopolizing the tech corporation\'s market. With about 95% of the nation pledging to not buy mirrors, sales have plummeted so much that many CEOs were forced to replace their offices\' toilet paper with the scratchy one-ply kind.\r\n\r\n\\figure\r\n\r\n![<span data-width=\"50%\"></span>](../static/blogpage/5/images/228/iphone.png)\r\n\r\n\\caption\r\n\r\nApple\'s new iPhone\r\n\r\n\\endcaption\r\n\r\n\\endfigure\r\n\r\nHowever, many narcissists were not swayed.\r\n\r\n\"Cameras always make you look ugly,\" said one. \"The phones are also really small, so I can\'t put them u—.\" Our reporter had to evacuate the mirror-covered residence at that moment as their skin had begun to resemble the surface of a particularly red onion.\r\n\r\nAnother customer credited mirrors with getting him through periods of depression, moderate self-esteem, and reduced sex drive. \"I burn through two mirrors a week,\" he said proudly, holding up a very blurry mirror with his visibly moist hands.\r\n\r\nMany mirror companies have expressed their gratitude towards these loyal narcissists that had saved them from bankruptcy. One company tried to invite prominent customers onto their Board of Directors before realizing they were already on the board. Another company handed out free slices of (very greasy and reflective) pizza to famous narcissists, thanking them for their selfless heroism.',NULL,1,5),(229,'2024-07-29 06:08:38','testing in production','testing-in-production',NULL,'',NULL,0,-6),(231,'2024-08-21 06:48:53','Air and Space Museum Erected in Empty Warehouse','air-and-space-museum-erected-in-empty-warehouse',NULL,'',NULL,0,-5),(233,'2024-08-25 18:50:17','Fly Away','fly-away',NULL,'I always remembered being flightless and alien\r\n<br>\r\nAll the birds said I was but a chicken\r\n<br>\r\nThey\'d fly away every day to hunt and to play\r\n<br>\r\nI\'d stay back and gnaw at the bones that they would throw away\r\n\r\nThen one bird suddenly came to me\r\n<br>\r\nA fiercely warm companion who made me feel free\r\n<br>\r\nHe helped me realize that I could soar and swing\r\n<br>\r\nIf I hadn\'t let them stop me from spreading my wings\r\n\r\nUp there I was with the flock at last\r\n<br>\r\nWith him who showed me that life was vast\r\n<br>\r\nHe was my angel, flying mighty and tall\r\n<br>\r\nSlowly we became the fastest of them all\r\n\r\nThen one day he disappeared from my side\r\n<br>\r\nI looked back and saw a feather fall behind\r\n<br>\r\nA crowd was forming, so I pushed through them\r\n<br>\r\nMy friend lay there injured; he would never fly again\r\n\r\nHe did nothing wrong, but his change made me feel betrayed\r\n<br>\r\nMy reckless pride in our skill now made him one I had been determined to hate\r\n<br>\r\nWhat had once given me confidence now left me alone and devastated\r\n<br>\r\nFor I had fallen in love with a being who no longer existed\r\n\r\nLet me fly away\r\n<br>\r\nso I don\'t have to see your fate',NULL,1,7);
/*!40000 ALTER TABLE `post` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `email` varchar(512) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `password_hash` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,'admin','yhugdrive@gmail.com','scrypt:32768:8:1$rQ7X37kufaepyXl4$47276f084e2698b3d3deb5d9290b295c4e5232d42a9a69168624ce3923f9d472fda477f0d9d53aaf34115420b35f45dbd059123424f6820ac1de9ef8d8c89291');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2024-08-25 19:23:36
